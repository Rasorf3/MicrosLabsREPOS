
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000b06  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080013a  0080013a  00000bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151d  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5c  00000000  00000000  000022c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b90  00000000  00000000  00002f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000646  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000432e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  9e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT22_init>:
#include "DHT_22.h"
#include "LCD_Module.h"

// Funci?n para configurar el pin del DHT22
void DHT22_init() {
	DDRD |= (1 << DHT22_PIN);   // Configura el pin como salida
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DHT22_PIN);  // Pone el pin en alto
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT22_init+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT22_init+0x1c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <DHT22_read>:
/*		  18ms	   40us	    80us	80us
	¯¯¯¯|_______|¯¯¯¯¯¯¯¯|_______|¯¯¯¯¯¯¯|....datos....
	
	---------PUC---------|----------dht22-------------|      */	
// Funci?n para leer datos del DHT22
char DHT22_read() {
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <DHT22_read+0x1a>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DHT22_read+0x1c>
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	char bits[5] = {0, 0, 0, 0, 0};
  e8:	fe 01       	movw	r30, r28
  ea:	31 96       	adiw	r30, 0x01	; 1
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	df 01       	movw	r26, r30
  f0:	1d 92       	st	X+, r1
  f2:	8a 95       	dec	r24
  f4:	e9 f7       	brne	.-6      	; 0xf0 <DHT22_read+0x2a>
	char i, j = 0;
	
	// Inicio de la comunicaci?n
	DDRD |= (1 << DHT22_PIN);   // Configura el pin como salida
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << DHT22_PIN); // Pone el pin en bajo
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	8b b9       	out	0x0b, r24	; 11
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9c e8       	ldi	r25, 0x8C	; 140
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <DHT22_read+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <DHT22_read+0x46>
 10c:	00 00       	nop
	_delay_ms(18);               // Espera al menos 1ms (m?nimo 1ms seg?n datasheet)
	
	PORTD|= (1 << DHT22_PIN);  // Pone el pin en alto
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8b b9       	out	0x0b, r24	; 11
	DDRD &= ~(1 << DHT22_PIN);
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	8a b9       	out	0x0a, r24	; 10
	
	// Espera la respuesta del sensor
	unsigned int contador = 0;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
	while(PIND & (1<<DHT22_PIN))
 11e:	10 c0       	rjmp	.+32     	; 0x140 <DHT22_read+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	a5 e0       	ldi	r26, 0x05	; 5
 122:	aa 95       	dec	r26
 124:	f1 f7       	brne	.-4      	; 0x122 <DHT22_read+0x5c>
 126:	00 00       	nop
	{
		_delay_us(2);
		contador += 2;
 128:	02 96       	adiw	r24, 0x02	; 2
		if (contador > 60)
 12a:	8d 33       	cpi	r24, 0x3D	; 61
 12c:	91 05       	cpc	r25, r1
 12e:	40 f0       	brcs	.+16     	; 0x140 <DHT22_read+0x7a>
		{
			DDRD |= (1<<DHT22_PIN);	//Pin como salida
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8a b9       	out	0x0a, r24	; 10
			PORTD |= (1<<DHT22_PIN);	//Nivel alto
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8b b9       	out	0x0b, r24	; 11
			return 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	b7 c0       	rjmp	.+366    	; 0x2ae <DHT22_read+0x1e8>
	PORTD|= (1 << DHT22_PIN);  // Pone el pin en alto
	DDRD &= ~(1 << DHT22_PIN);
	
	// Espera la respuesta del sensor
	unsigned int contador = 0;
	while(PIND & (1<<DHT22_PIN))
 140:	4f 99       	sbic	0x09, 7	; 9
 142:	ee cf       	rjmp	.-36     	; 0x120 <DHT22_read+0x5a>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	10 c0       	rjmp	.+32     	; 0x16a <DHT22_read+0xa4>
 14a:	b5 e0       	ldi	r27, 0x05	; 5
 14c:	ba 95       	dec	r27
 14e:	f1 f7       	brne	.-4      	; 0x14c <DHT22_read+0x86>
 150:	00 00       	nop
	}
	contador = 0;
	while(!(PIND & (1<<DHT22_PIN)))
	{
		_delay_us(2);
		contador += 2;
 152:	02 96       	adiw	r24, 0x02	; 2
		if (contador > 100)
 154:	85 36       	cpi	r24, 0x65	; 101
 156:	91 05       	cpc	r25, r1
 158:	40 f0       	brcs	.+16     	; 0x16a <DHT22_read+0xa4>
		{
			DDRD |= (1<<DHT22_PIN);	//Pin como salida
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8a b9       	out	0x0a, r24	; 10
			PORTD |= (1<<DHT22_PIN);	//Nivel alto
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8b b9       	out	0x0b, r24	; 11
			return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	a2 c0       	rjmp	.+324    	; 0x2ae <DHT22_read+0x1e8>
			PORTD |= (1<<DHT22_PIN);	//Nivel alto
			return 1;
		}
	}
	contador = 0;
	while(!(PIND & (1<<DHT22_PIN)))
 16a:	4f 9b       	sbis	0x09, 7	; 9
 16c:	ee cf       	rjmp	.-36     	; 0x14a <DHT22_read+0x84>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	10 c0       	rjmp	.+32     	; 0x194 <DHT22_read+0xce>
 174:	25 e0       	ldi	r18, 0x05	; 5
 176:	2a 95       	dec	r18
 178:	f1 f7       	brne	.-4      	; 0x176 <DHT22_read+0xb0>
 17a:	00 00       	nop
	}
	contador = 0;
	while(PIND & (1<<DHT22_PIN))
	{
		_delay_us(2);
		contador += 2;
 17c:	02 96       	adiw	r24, 0x02	; 2
		if (contador > 100)
 17e:	85 36       	cpi	r24, 0x65	; 101
 180:	91 05       	cpc	r25, r1
 182:	40 f0       	brcs	.+16     	; 0x194 <DHT22_read+0xce>
		{
			DDRD |= (1<<DHT22_PIN);	//Pin como salida
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8a b9       	out	0x0a, r24	; 10
			PORTD |= (1<<DHT22_PIN);	//Nivel alto
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	8b b9       	out	0x0b, r24	; 11
			return 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8d c0       	rjmp	.+282    	; 0x2ae <DHT22_read+0x1e8>
			PORTD |= (1<<DHT22_PIN);	//Nivel alto
			return 1;
		}
	}
	contador = 0;
	while(PIND & (1<<DHT22_PIN))
 194:	4f 99       	sbic	0x09, 7	; 9
 196:	ee cf       	rjmp	.-36     	; 0x174 <DHT22_read+0xae>
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	24 c0       	rjmp	.+72     	; 0x1e4 <DHT22_read+0x11e>
	for (j=0; j<5; j++)
	{
		unsigned char result=0;
		for (i=0; i<8; i++)
		{
			while (!(PIND & (1<<DHT22_PIN)));
 19c:	4f 9b       	sbis	0x09, 7	; 9
 19e:	fe cf       	rjmp	.-4      	; 0x19c <DHT22_read+0xd6>
 1a0:	ad e5       	ldi	r26, 0x5D	; 93
 1a2:	aa 95       	dec	r26
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <DHT22_read+0xdc>
 1a6:	00 00       	nop
			_delay_us(35);

			if (PIND & (1<<DHT22_PIN))
 1a8:	4f 9b       	sbis	0x09, 7	; 9
 1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <DHT22_read+0xfe>
			result |= (1<<(7-i));
 1ac:	47 e0       	ldi	r20, 0x07	; 7
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	48 1b       	sub	r20, r24
 1b2:	51 09       	sbc	r21, r1
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DHT22_read+0xf8>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DHT22_read+0xf4>
 1c2:	92 2b       	or	r25, r18
			
			while(PIND & (1<<DHT22_PIN));
 1c4:	4f 99       	sbic	0x09, 7	; 9
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <DHT22_read+0xfe>

	// Lectura de los 40 bits de datos
	for (j=0; j<5; j++)
	{
		unsigned char result=0;
		for (i=0; i<8; i++)
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DHT22_read+0x10a>
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	88 30       	cpi	r24, 0x08	; 8
 1d2:	20 f3       	brcs	.-56     	; 0x19c <DHT22_read+0xd6>
			if (PIND & (1<<DHT22_PIN))
			result |= (1<<(7-i));
			
			while(PIND & (1<<DHT22_PIN));
		}
		bits[j] = result;
 1d4:	e1 e0       	ldi	r30, 0x01	; 1
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	e6 0f       	add	r30, r22
 1de:	f1 1d       	adc	r31, r1
 1e0:	90 83       	st	Z, r25
		}
	}
	

	// Lectura de los 40 bits de datos
	for (j=0; j<5; j++)
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	65 30       	cpi	r22, 0x05	; 5
 1e6:	90 f3       	brcs	.-28     	; 0x1cc <DHT22_read+0x106>
			
			while(PIND & (1<<DHT22_PIN));
		}
		bits[j] = result;
	}
	DDRD |= (1<<DHT22_PIN);	//Pin como salida
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<DHT22_PIN);	//Nivel alto
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8b b9       	out	0x0b, r24	; 11
	
	// Almacena los datos en las variables globales
	unsigned int humidity = (bits[0] << 8) | (bits[1]);
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	a8 2e       	mov	r10, r24
 1f8:	b1 2c       	mov	r11, r1
 1fa:	1a 2d       	mov	r17, r10
 1fc:	00 27       	eor	r16, r16
 1fe:	4a 81       	ldd	r20, Y+2	; 0x02
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	04 2b       	or	r16, r20
 204:	15 2b       	or	r17, r21
	unsigned int temperature = (bits[2] << 8) | (bits[3]);
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	c8 2e       	mov	r12, r24
 20a:	d1 2c       	mov	r13, r1
 20c:	fc 2d       	mov	r31, r12
 20e:	ee 27       	eor	r30, r30
 210:	8c 81       	ldd	r24, Y+4	; 0x04
 212:	e8 2e       	mov	r14, r24
 214:	f1 2c       	mov	r15, r1
 216:	ee 29       	or	r30, r14
 218:	ff 29       	or	r31, r15
	humidity_int = humidity/10;
 21a:	98 01       	movw	r18, r16
 21c:	ad ec       	ldi	r26, 0xCD	; 205
 21e:	bc ec       	ldi	r27, 0xCC	; 204
 220:	0e 94 88 02 	call	0x510	; 0x510 <__umulhisi3>
 224:	4c 01       	movw	r8, r24
 226:	96 94       	lsr	r9
 228:	87 94       	ror	r8
 22a:	96 94       	lsr	r9
 22c:	87 94       	ror	r8
 22e:	96 94       	lsr	r9
 230:	87 94       	ror	r8
 232:	80 92 3e 01 	sts	0x013E, r8	; 0x80013e <humidity_int>
	humidity_dec = humidity%10;
 236:	c4 01       	movw	r24, r8
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	88 0c       	add	r8, r8
 23e:	99 1c       	adc	r9, r9
 240:	88 0c       	add	r8, r8
 242:	99 1c       	adc	r9, r9
 244:	88 0c       	add	r8, r8
 246:	99 1c       	adc	r9, r9
 248:	88 0e       	add	r8, r24
 24a:	99 1e       	adc	r9, r25
 24c:	08 19       	sub	r16, r8
 24e:	19 09       	sbc	r17, r9
 250:	00 93 3d 01 	sts	0x013D, r16	; 0x80013d <humidity_dec>
	temp_int = temperature/10;
 254:	9f 01       	movw	r18, r30
 256:	0e 94 88 02 	call	0x510	; 0x510 <__umulhisi3>
 25a:	8c 01       	movw	r16, r24
 25c:	16 95       	lsr	r17
 25e:	07 95       	ror	r16
 260:	16 95       	lsr	r17
 262:	07 95       	ror	r16
 264:	16 95       	lsr	r17
 266:	07 95       	ror	r16
 268:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <temp_int>
	temp_dec = temperature%10;
 26c:	c8 01       	movw	r24, r16
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	00 0f       	add	r16, r16
 274:	11 1f       	adc	r17, r17
 276:	00 0f       	add	r16, r16
 278:	11 1f       	adc	r17, r17
 27a:	00 0f       	add	r16, r16
 27c:	11 1f       	adc	r17, r17
 27e:	08 0f       	add	r16, r24
 280:	19 1f       	adc	r17, r25
 282:	e0 1b       	sub	r30, r16
 284:	f1 0b       	sbc	r31, r17
 286:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <temp_dec>
	checksum = bits[4];
 28a:	2d 81       	ldd	r18, Y+5	; 0x05
 28c:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
	
	// Verifica el checksum
	if (((bits[0] + bits[1] + bits[2] + bits[3]) & 0xFF) != bits[4])
 290:	c5 01       	movw	r24, r10
 292:	84 0f       	add	r24, r20
 294:	95 1f       	adc	r25, r21
 296:	8c 0d       	add	r24, r12
 298:	9d 1d       	adc	r25, r13
 29a:	8e 0d       	add	r24, r14
 29c:	9f 1d       	adc	r25, r15
 29e:	99 27       	eor	r25, r25
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	82 17       	cp	r24, r18
 2a4:	93 07       	cpc	r25, r19
 2a6:	11 f0       	breq	.+4      	; 0x2ac <DHT22_read+0x1e6>
	{
		return 3; // Error de checksum
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <DHT22_read+0x1e8>
	}
	
	
	return 0; // Lectura exitosa
 2ac:	80 e0       	ldi	r24, 0x00	; 0
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	bf 90       	pop	r11
 2ca:	af 90       	pop	r10
 2cc:	9f 90       	pop	r9
 2ce:	8f 90       	pop	r8
 2d0:	08 95       	ret

000002d2 <DHT_Display_Data>:
void DHT_Display_Data()
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	64 97       	sbiw	r28, 0x14	; 20
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[20];
	sprintf(buffer," Temp: %d,%d C.",temp_int,temp_dec);
 2ea:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <temp_dec>
 2ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <temp_int>
 2f2:	1f 92       	push	r1
 2f4:	9f 93       	push	r25
 2f6:	1f 92       	push	r1
 2f8:	8f 93       	push	r24
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	8e 01       	movw	r16, r28
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	1f 93       	push	r17
 30a:	0f 93       	push	r16
 30c:	0e 94 97 02 	call	0x52e	; 0x52e <sprintf>
	LCD_Command(LCD_CLEAR);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
	LCD_SetCursor(0,0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 33 02 	call	0x466	; 0x466 <LCD_SetCursor>
	LCD_Write_String(buffer);
 31e:	c8 01       	movw	r24, r16
 320:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Write_String>
	sprintf(buffer," Hum: %d,%d %.",humidity_int,humidity_dec);
 324:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <humidity_dec>
 328:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <humidity_int>
 32c:	1f 92       	push	r1
 32e:	9f 93       	push	r25
 330:	1f 92       	push	r1
 332:	8f 93       	push	r24
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	9f 93       	push	r25
 33a:	8f 93       	push	r24
 33c:	1f 93       	push	r17
 33e:	0f 93       	push	r16
 340:	0e 94 97 02 	call	0x52e	; 0x52e <sprintf>
	LCD_SetCursor(0,1);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 33 02 	call	0x466	; 0x466 <LCD_SetCursor>
	LCD_Write_String(buffer);
 34c:	c8 01       	movw	r24, r16
 34e:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	83 ed       	ldi	r24, 0xD3	; 211
 356:	90 e3       	ldi	r25, 0x30	; 48
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <DHT_Display_Data+0x86>
 360:	00 c0       	rjmp	.+0      	; 0x362 <DHT_Display_Data+0x90>
 362:	00 00       	nop
	_delay_ms(2000);
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	64 96       	adiw	r28, 0x14	; 20
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <twi_init>:

//TWI initialize
// bit rate:18
void twi_init(void)
{
	TWBR= 0x12; //set bit rate
 384:	82 e1       	ldi	r24, 0x12	; 18
 386:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR |= (1<<TWPS0);
 38a:	e9 eb       	ldi	r30, 0xB9	; 185
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	81 60       	ori	r24, 0x01	; 1
 392:	80 83       	st	Z, r24
	TWCR |= (1<<TWEA) | (1<<TWEN);
 394:	ec eb       	ldi	r30, 0xBC	; 188
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	84 64       	ori	r24, 0x44	; 68
 39c:	80 83       	st	Z, r24
	TWAR= 0x00; //set slave address
 39e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
 3a2:	08 95       	ret

000003a4 <LCD_Command>:
	LCD_Command(LCD_CLEAR);
}

void LCD_Command(unsigned char command)
{
	LCD_DATA = command;
 3a4:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << RS_LCD); //Colocamos RS_LCD en 0
 3a6:	88 b1       	in	r24, 0x08	; 8
 3a8:	8e 7f       	andi	r24, 0xFE	; 254
 3aa:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
 3ac:	88 b1       	in	r24, 0x08	; 8
 3ae:	8d 7f       	andi	r24, 0xFD	; 253
 3b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	8a e1       	ldi	r24, 0x1A	; 26
 3b4:	8a 95       	dec	r24
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_Command+0x10>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_Command+0x16>
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
 3ba:	88 b1       	in	r24, 0x08	; 8
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	88 b9       	out	0x08, r24	; 8
 3c0:	87 ec       	ldi	r24, 0xC7	; 199
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_Command+0x20>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Command+0x26>
 3ca:	00 00       	nop
 3cc:	08 95       	ret

000003ce <LCD_Init>:
 */ 
#include "LCD_Module.h"

void LCD_Init()
{
	DDRB = 0xFF; 
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1<<RS_LCD) | (1 << EN_LCD);
 3d2:	87 b1       	in	r24, 0x07	; 7
 3d4:	83 60       	ori	r24, 0x03	; 3
 3d6:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	8f e2       	ldi	r24, 0x2F	; 47
 3da:	95 e7       	ldi	r25, 0x75	; 117
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_Init+0xe>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Init+0x14>
 3e2:	00 00       	nop
	
	//Comandos Iniciales al encender EL LCD
	_delay_ms(15);
	LCD_Command(0x30);
 3e4:	80 e3       	ldi	r24, 0x30	; 48
 3e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
 3ea:	87 e0       	ldi	r24, 0x07	; 7
 3ec:	90 e2       	ldi	r25, 0x20	; 32
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Init+0x20>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Init+0x26>
 3f4:	00 00       	nop
	_delay_ms(4.1);
	LCD_Command(0x30);
 3f6:	80 e3       	ldi	r24, 0x30	; 48
 3f8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	87 ec       	ldi	r24, 0xC7	; 199
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	_delay_us(100);
	LCD_Command(0x30);
 408:	80 e3       	ldi	r24, 0x30	; 48
 40a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
	
	//Comandos para configurar EL LCD
	LCD_Command(LCD_INTERFACE_DATA1);
 40e:	88 e3       	ldi	r24, 0x38	; 56
 410:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
	LCD_Command(LCD_DISPLAY_ON_CURSOR_OF);
 414:	8c e0       	ldi	r24, 0x0C	; 12
 416:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
	LCD_Command(LCD_CLEAR);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
 420:	08 95       	ret

00000422 <LCD_Write_Char>:
	_delay_us(100);
}

void LCD_Write_Char(unsigned char character)
{
	PORTC |= (1 << RS_LCD);
 422:	98 b1       	in	r25, 0x08	; 8
 424:	91 60       	ori	r25, 0x01	; 1
 426:	98 b9       	out	0x08, r25	; 8
	LCD_DATA = character;
 428:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
 42a:	88 b1       	in	r24, 0x08	; 8
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	88 b9       	out	0x08, r24	; 8
 430:	8a e1       	ldi	r24, 0x1A	; 26
 432:	8a 95       	dec	r24
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_Write_Char+0x10>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCD_Write_Char+0x16>
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
 438:	88 b1       	in	r24, 0x08	; 8
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	88 b9       	out	0x08, r24	; 8
 43e:	87 ec       	ldi	r24, 0xC7	; 199
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_Write_Char+0x20>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_Write_Char+0x26>
 448:	00 00       	nop
 44a:	08 95       	ret

0000044c <LCD_Write_String>:
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ec 01       	movw	r28, r24
	while(*str)
 452:	03 c0       	rjmp	.+6      	; 0x45a <LCD_Write_String+0xe>
	{
		LCD_Write_Char(*str++);
 454:	21 96       	adiw	r28, 0x01	; 1
 456:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Write_Char>
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
	while(*str)
 45a:	88 81       	ld	r24, Y
 45c:	81 11       	cpse	r24, r1
 45e:	fa cf       	rjmp	.-12     	; 0x454 <LCD_Write_String+0x8>
	{
		LCD_Write_Char(*str++);
	}
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_SetCursor>:
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
 466:	62 30       	cpi	r22, 0x02	; 2
 468:	31 f0       	breq	.+12     	; 0x476 <LCD_SetCursor+0x10>
 46a:	63 30       	cpi	r22, 0x03	; 3
 46c:	31 f0       	breq	.+12     	; 0x47a <LCD_SetCursor+0x14>
 46e:	61 30       	cpi	r22, 0x01	; 1
 470:	31 f0       	breq	.+12     	; 0x47e <LCD_SetCursor+0x18>
		case 0: address = 0x00; break;  // Primera fila
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	05 c0       	rjmp	.+10     	; 0x480 <LCD_SetCursor+0x1a>
		case 1: address = 0x40; break;  // Segunda fila
		case 2: address = 0x14; break;  // Tercera fila 
 476:	94 e1       	ldi	r25, 0x14	; 20
 478:	03 c0       	rjmp	.+6      	; 0x480 <LCD_SetCursor+0x1a>
		case 3: address = 0x54; break;  // Cuarta fila 
 47a:	94 e5       	ldi	r25, 0x54	; 84
 47c:	01 c0       	rjmp	.+2      	; 0x480 <LCD_SetCursor+0x1a>
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
		case 0: address = 0x00; break;  // Primera fila
		case 1: address = 0x40; break;  // Segunda fila
 47e:	90 e4       	ldi	r25, 0x40	; 64
		case 2: address = 0x14; break;  // Tercera fila 
		case 3: address = 0x54; break;  // Cuarta fila 
		default: address = 0x00;
	}
	LCD_Command(LCD_CHANGE_LINE | (address + col));  // Comando "Set DDRAM Address"
 480:	89 0f       	add	r24, r25
 482:	80 68       	ori	r24, 0x80	; 128
 484:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
 488:	08 95       	ret

0000048a <main>:

int main(void)
{
	float distancia_basura = 0;
	unsigned char Datos_LCD[15];
	DDRC |= 0x30;
 48a:	87 b1       	in	r24, 0x07	; 7
 48c:	80 63       	ori	r24, 0x30	; 48
 48e:	87 b9       	out	0x07, r24	; 7
    /* Replace with your application code */
	LCD_Init();
 490:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_Init>
	UltraSonicInit();
 494:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UltraSonicInit>
	twi_init();
 498:	0e 94 c2 01 	call	0x384	; 0x384 <twi_init>
	Timer1_Init();
 49c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Timer1_Init>
	DHT22_init();
 4a0:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT22_init>
		{
			LCD_Command(LCD_CLEAR);
			RTC_displayTime();
			_delay_ms(100);
		}*/
		LCD_Command(LCD_CLEAR);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Command>
		unsigned char result = DHT22_read();
 4aa:	0e 94 63 00 	call	0xc6	; 0xc6 <DHT22_read>
 4ae:	c8 2f       	mov	r28, r24
		
		if (result == 0) 
 4b0:	81 11       	cpse	r24, r1
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <main+0x30>
		{
			DHT_Display_Data();
 4b4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DHT_Display_Data>
 4b8:	12 c0       	rjmp	.+36     	; 0x4de <main+0x54>
		} 
		else
		{
			if(result == 1)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <main+0x3c>
			{
				LCD_Write_String(" error 1");
 4be:	8f e1       	ldi	r24, 0x1F	; 31
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Write_String>
			}
			if(result == 2)
 4c6:	c2 30       	cpi	r28, 0x02	; 2
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <main+0x48>
			{
				LCD_Write_String(" error 2");
 4ca:	88 e2       	ldi	r24, 0x28	; 40
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Write_String>
			}
			if(result == 3)
 4d2:	c3 30       	cpi	r28, 0x03	; 3
 4d4:	21 f4       	brne	.+8      	; 0x4de <main+0x54>
			{
				LCD_Write_String(" error 3");
 4d6:	81 e3       	ldi	r24, 0x31	; 49
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	83 ed       	ldi	r24, 0xD3	; 211
 4e2:	90 e3       	ldi	r25, 0x30	; 48
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x5a>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x64>
 4ee:	00 00       	nop
 4f0:	d9 cf       	rjmp	.-78     	; 0x4a4 <main+0x1a>

000004f2 <Timer1_Init>:

#include <avr/io.h>

// FunciÃ³n para configurar Timer1
void Timer1_Init() {
	TCCR1A = 0;             // Modo normal
 4f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11);   // Prescaler 1 (sin prescaler)
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 4fc:	08 95       	ret

000004fe <UltraSonicInit>:

#include "UltraSonicModule.h"
#include "Timer1.h"
void UltraSonicInit()
{
	DDRC |= (1 << TRIGGER);
 4fe:	87 b1       	in	r24, 0x07	; 7
 500:	84 60       	ori	r24, 0x04	; 4
 502:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << ECHO);
 504:	87 b1       	in	r24, 0x07	; 7
 506:	87 7f       	andi	r24, 0xF7	; 247
 508:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	8a b9       	out	0x0a, r24	; 10
 50e:	08 95       	ret

00000510 <__umulhisi3>:
 510:	a2 9f       	mul	r26, r18
 512:	b0 01       	movw	r22, r0
 514:	b3 9f       	mul	r27, r19
 516:	c0 01       	movw	r24, r0
 518:	a3 9f       	mul	r26, r19
 51a:	70 0d       	add	r23, r0
 51c:	81 1d       	adc	r24, r1
 51e:	11 24       	eor	r1, r1
 520:	91 1d       	adc	r25, r1
 522:	b2 9f       	mul	r27, r18
 524:	70 0d       	add	r23, r0
 526:	81 1d       	adc	r24, r1
 528:	11 24       	eor	r1, r1
 52a:	91 1d       	adc	r25, r1
 52c:	08 95       	ret

0000052e <sprintf>:
 52e:	ae e0       	ldi	r26, 0x0E	; 14
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	ed e9       	ldi	r30, 0x9D	; 157
 534:	f2 e0       	ldi	r31, 0x02	; 2
 536:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__prologue_saves__+0x1c>
 53a:	0d 89       	ldd	r16, Y+21	; 0x15
 53c:	1e 89       	ldd	r17, Y+22	; 0x16
 53e:	86 e0       	ldi	r24, 0x06	; 6
 540:	8c 83       	std	Y+4, r24	; 0x04
 542:	1a 83       	std	Y+2, r17	; 0x02
 544:	09 83       	std	Y+1, r16	; 0x01
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	9f e7       	ldi	r25, 0x7F	; 127
 54a:	9e 83       	std	Y+6, r25	; 0x06
 54c:	8d 83       	std	Y+5, r24	; 0x05
 54e:	ae 01       	movw	r20, r28
 550:	47 5e       	subi	r20, 0xE7	; 231
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	6f 89       	ldd	r22, Y+23	; 0x17
 556:	78 8d       	ldd	r23, Y+24	; 0x18
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	0e 94 b9 02 	call	0x572	; 0x572 <vfprintf>
 560:	ef 81       	ldd	r30, Y+7	; 0x07
 562:	f8 85       	ldd	r31, Y+8	; 0x08
 564:	e0 0f       	add	r30, r16
 566:	f1 1f       	adc	r31, r17
 568:	10 82       	st	Z, r1
 56a:	2e 96       	adiw	r28, 0x0e	; 14
 56c:	e4 e0       	ldi	r30, 0x04	; 4
 56e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__epilogue_restores__+0x1c>

00000572 <vfprintf>:
 572:	ab e0       	ldi	r26, 0x0B	; 11
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	ef eb       	ldi	r30, 0xBF	; 191
 578:	f2 e0       	ldi	r31, 0x02	; 2
 57a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__prologue_saves__>
 57e:	6c 01       	movw	r12, r24
 580:	7b 01       	movw	r14, r22
 582:	8a 01       	movw	r16, r20
 584:	fc 01       	movw	r30, r24
 586:	17 82       	std	Z+7, r1	; 0x07
 588:	16 82       	std	Z+6, r1	; 0x06
 58a:	83 81       	ldd	r24, Z+3	; 0x03
 58c:	81 ff       	sbrs	r24, 1
 58e:	cc c1       	rjmp	.+920    	; 0x928 <__stack+0x29>
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	3c 01       	movw	r6, r24
 596:	f6 01       	movw	r30, r12
 598:	93 81       	ldd	r25, Z+3	; 0x03
 59a:	f7 01       	movw	r30, r14
 59c:	93 fd       	sbrc	r25, 3
 59e:	85 91       	lpm	r24, Z+
 5a0:	93 ff       	sbrs	r25, 3
 5a2:	81 91       	ld	r24, Z+
 5a4:	7f 01       	movw	r14, r30
 5a6:	88 23       	and	r24, r24
 5a8:	09 f4       	brne	.+2      	; 0x5ac <vfprintf+0x3a>
 5aa:	ba c1       	rjmp	.+884    	; 0x920 <__stack+0x21>
 5ac:	85 32       	cpi	r24, 0x25	; 37
 5ae:	39 f4       	brne	.+14     	; 0x5be <vfprintf+0x4c>
 5b0:	93 fd       	sbrc	r25, 3
 5b2:	85 91       	lpm	r24, Z+
 5b4:	93 ff       	sbrs	r25, 3
 5b6:	81 91       	ld	r24, Z+
 5b8:	7f 01       	movw	r14, r30
 5ba:	85 32       	cpi	r24, 0x25	; 37
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <vfprintf+0x56>
 5be:	b6 01       	movw	r22, r12
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 5c6:	e7 cf       	rjmp	.-50     	; 0x596 <vfprintf+0x24>
 5c8:	91 2c       	mov	r9, r1
 5ca:	21 2c       	mov	r2, r1
 5cc:	31 2c       	mov	r3, r1
 5ce:	ff e1       	ldi	r31, 0x1F	; 31
 5d0:	f3 15       	cp	r31, r3
 5d2:	d8 f0       	brcs	.+54     	; 0x60a <vfprintf+0x98>
 5d4:	8b 32       	cpi	r24, 0x2B	; 43
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <vfprintf+0x84>
 5d8:	38 f4       	brcc	.+14     	; 0x5e8 <vfprintf+0x76>
 5da:	80 32       	cpi	r24, 0x20	; 32
 5dc:	79 f0       	breq	.+30     	; 0x5fc <vfprintf+0x8a>
 5de:	83 32       	cpi	r24, 0x23	; 35
 5e0:	a1 f4       	brne	.+40     	; 0x60a <vfprintf+0x98>
 5e2:	23 2d       	mov	r18, r3
 5e4:	20 61       	ori	r18, 0x10	; 16
 5e6:	1d c0       	rjmp	.+58     	; 0x622 <vfprintf+0xb0>
 5e8:	8d 32       	cpi	r24, 0x2D	; 45
 5ea:	61 f0       	breq	.+24     	; 0x604 <vfprintf+0x92>
 5ec:	80 33       	cpi	r24, 0x30	; 48
 5ee:	69 f4       	brne	.+26     	; 0x60a <vfprintf+0x98>
 5f0:	23 2d       	mov	r18, r3
 5f2:	21 60       	ori	r18, 0x01	; 1
 5f4:	16 c0       	rjmp	.+44     	; 0x622 <vfprintf+0xb0>
 5f6:	83 2d       	mov	r24, r3
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	38 2e       	mov	r3, r24
 5fc:	e3 2d       	mov	r30, r3
 5fe:	e4 60       	ori	r30, 0x04	; 4
 600:	3e 2e       	mov	r3, r30
 602:	2a c0       	rjmp	.+84     	; 0x658 <vfprintf+0xe6>
 604:	f3 2d       	mov	r31, r3
 606:	f8 60       	ori	r31, 0x08	; 8
 608:	1d c0       	rjmp	.+58     	; 0x644 <vfprintf+0xd2>
 60a:	37 fc       	sbrc	r3, 7
 60c:	2d c0       	rjmp	.+90     	; 0x668 <vfprintf+0xf6>
 60e:	20 ed       	ldi	r18, 0xD0	; 208
 610:	28 0f       	add	r18, r24
 612:	2a 30       	cpi	r18, 0x0A	; 10
 614:	40 f0       	brcs	.+16     	; 0x626 <vfprintf+0xb4>
 616:	8e 32       	cpi	r24, 0x2E	; 46
 618:	b9 f4       	brne	.+46     	; 0x648 <vfprintf+0xd6>
 61a:	36 fc       	sbrc	r3, 6
 61c:	81 c1       	rjmp	.+770    	; 0x920 <__stack+0x21>
 61e:	23 2d       	mov	r18, r3
 620:	20 64       	ori	r18, 0x40	; 64
 622:	32 2e       	mov	r3, r18
 624:	19 c0       	rjmp	.+50     	; 0x658 <vfprintf+0xe6>
 626:	36 fe       	sbrs	r3, 6
 628:	06 c0       	rjmp	.+12     	; 0x636 <vfprintf+0xc4>
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	98 9e       	mul	r9, r24
 62e:	20 0d       	add	r18, r0
 630:	11 24       	eor	r1, r1
 632:	92 2e       	mov	r9, r18
 634:	11 c0       	rjmp	.+34     	; 0x658 <vfprintf+0xe6>
 636:	ea e0       	ldi	r30, 0x0A	; 10
 638:	2e 9e       	mul	r2, r30
 63a:	20 0d       	add	r18, r0
 63c:	11 24       	eor	r1, r1
 63e:	22 2e       	mov	r2, r18
 640:	f3 2d       	mov	r31, r3
 642:	f0 62       	ori	r31, 0x20	; 32
 644:	3f 2e       	mov	r3, r31
 646:	08 c0       	rjmp	.+16     	; 0x658 <vfprintf+0xe6>
 648:	8c 36       	cpi	r24, 0x6C	; 108
 64a:	21 f4       	brne	.+8      	; 0x654 <vfprintf+0xe2>
 64c:	83 2d       	mov	r24, r3
 64e:	80 68       	ori	r24, 0x80	; 128
 650:	38 2e       	mov	r3, r24
 652:	02 c0       	rjmp	.+4      	; 0x658 <vfprintf+0xe6>
 654:	88 36       	cpi	r24, 0x68	; 104
 656:	41 f4       	brne	.+16     	; 0x668 <vfprintf+0xf6>
 658:	f7 01       	movw	r30, r14
 65a:	93 fd       	sbrc	r25, 3
 65c:	85 91       	lpm	r24, Z+
 65e:	93 ff       	sbrs	r25, 3
 660:	81 91       	ld	r24, Z+
 662:	7f 01       	movw	r14, r30
 664:	81 11       	cpse	r24, r1
 666:	b3 cf       	rjmp	.-154    	; 0x5ce <vfprintf+0x5c>
 668:	98 2f       	mov	r25, r24
 66a:	9f 7d       	andi	r25, 0xDF	; 223
 66c:	95 54       	subi	r25, 0x45	; 69
 66e:	93 30       	cpi	r25, 0x03	; 3
 670:	28 f4       	brcc	.+10     	; 0x67c <vfprintf+0x10a>
 672:	0c 5f       	subi	r16, 0xFC	; 252
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	9f e3       	ldi	r25, 0x3F	; 63
 678:	99 83       	std	Y+1, r25	; 0x01
 67a:	0d c0       	rjmp	.+26     	; 0x696 <vfprintf+0x124>
 67c:	83 36       	cpi	r24, 0x63	; 99
 67e:	31 f0       	breq	.+12     	; 0x68c <vfprintf+0x11a>
 680:	83 37       	cpi	r24, 0x73	; 115
 682:	71 f0       	breq	.+28     	; 0x6a0 <vfprintf+0x12e>
 684:	83 35       	cpi	r24, 0x53	; 83
 686:	09 f0       	breq	.+2      	; 0x68a <vfprintf+0x118>
 688:	59 c0       	rjmp	.+178    	; 0x73c <vfprintf+0x1ca>
 68a:	21 c0       	rjmp	.+66     	; 0x6ce <vfprintf+0x15c>
 68c:	f8 01       	movw	r30, r16
 68e:	80 81       	ld	r24, Z
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	0e 5f       	subi	r16, 0xFE	; 254
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	88 24       	eor	r8, r8
 698:	83 94       	inc	r8
 69a:	91 2c       	mov	r9, r1
 69c:	53 01       	movw	r10, r6
 69e:	13 c0       	rjmp	.+38     	; 0x6c6 <vfprintf+0x154>
 6a0:	28 01       	movw	r4, r16
 6a2:	f2 e0       	ldi	r31, 0x02	; 2
 6a4:	4f 0e       	add	r4, r31
 6a6:	51 1c       	adc	r5, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	a0 80       	ld	r10, Z
 6ac:	b1 80       	ldd	r11, Z+1	; 0x01
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x146>
 6b2:	69 2d       	mov	r22, r9
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <vfprintf+0x14a>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	7f ef       	ldi	r23, 0xFF	; 255
 6bc:	c5 01       	movw	r24, r10
 6be:	0e 94 a5 04 	call	0x94a	; 0x94a <strnlen>
 6c2:	4c 01       	movw	r8, r24
 6c4:	82 01       	movw	r16, r4
 6c6:	f3 2d       	mov	r31, r3
 6c8:	ff 77       	andi	r31, 0x7F	; 127
 6ca:	3f 2e       	mov	r3, r31
 6cc:	16 c0       	rjmp	.+44     	; 0x6fa <vfprintf+0x188>
 6ce:	28 01       	movw	r4, r16
 6d0:	22 e0       	ldi	r18, 0x02	; 2
 6d2:	42 0e       	add	r4, r18
 6d4:	51 1c       	adc	r5, r1
 6d6:	f8 01       	movw	r30, r16
 6d8:	a0 80       	ld	r10, Z
 6da:	b1 80       	ldd	r11, Z+1	; 0x01
 6dc:	36 fe       	sbrs	r3, 6
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <vfprintf+0x174>
 6e0:	69 2d       	mov	r22, r9
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0x178>
 6e6:	6f ef       	ldi	r22, 0xFF	; 255
 6e8:	7f ef       	ldi	r23, 0xFF	; 255
 6ea:	c5 01       	movw	r24, r10
 6ec:	0e 94 9a 04 	call	0x934	; 0x934 <strnlen_P>
 6f0:	4c 01       	movw	r8, r24
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f0 68       	ori	r31, 0x80	; 128
 6f6:	3f 2e       	mov	r3, r31
 6f8:	82 01       	movw	r16, r4
 6fa:	33 fc       	sbrc	r3, 3
 6fc:	1b c0       	rjmp	.+54     	; 0x734 <vfprintf+0x1c2>
 6fe:	82 2d       	mov	r24, r2
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	88 16       	cp	r8, r24
 704:	99 06       	cpc	r9, r25
 706:	b0 f4       	brcc	.+44     	; 0x734 <vfprintf+0x1c2>
 708:	b6 01       	movw	r22, r12
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 712:	2a 94       	dec	r2
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <vfprintf+0x18c>
 716:	f5 01       	movw	r30, r10
 718:	37 fc       	sbrc	r3, 7
 71a:	85 91       	lpm	r24, Z+
 71c:	37 fe       	sbrs	r3, 7
 71e:	81 91       	ld	r24, Z+
 720:	5f 01       	movw	r10, r30
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 72a:	21 10       	cpse	r2, r1
 72c:	2a 94       	dec	r2
 72e:	21 e0       	ldi	r18, 0x01	; 1
 730:	82 1a       	sub	r8, r18
 732:	91 08       	sbc	r9, r1
 734:	81 14       	cp	r8, r1
 736:	91 04       	cpc	r9, r1
 738:	71 f7       	brne	.-36     	; 0x716 <vfprintf+0x1a4>
 73a:	e8 c0       	rjmp	.+464    	; 0x90c <__stack+0xd>
 73c:	84 36       	cpi	r24, 0x64	; 100
 73e:	11 f0       	breq	.+4      	; 0x744 <vfprintf+0x1d2>
 740:	89 36       	cpi	r24, 0x69	; 105
 742:	41 f5       	brne	.+80     	; 0x794 <vfprintf+0x222>
 744:	f8 01       	movw	r30, r16
 746:	37 fe       	sbrs	r3, 7
 748:	07 c0       	rjmp	.+14     	; 0x758 <vfprintf+0x1e6>
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	82 81       	ldd	r24, Z+2	; 0x02
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	08 c0       	rjmp	.+16     	; 0x768 <vfprintf+0x1f6>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	07 2e       	mov	r0, r23
 75e:	00 0c       	add	r0, r0
 760:	88 0b       	sbc	r24, r24
 762:	99 0b       	sbc	r25, r25
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	f3 2d       	mov	r31, r3
 76a:	ff 76       	andi	r31, 0x6F	; 111
 76c:	3f 2e       	mov	r3, r31
 76e:	97 ff       	sbrs	r25, 7
 770:	09 c0       	rjmp	.+18     	; 0x784 <vfprintf+0x212>
 772:	90 95       	com	r25
 774:	80 95       	com	r24
 776:	70 95       	com	r23
 778:	61 95       	neg	r22
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	f0 68       	ori	r31, 0x80	; 128
 782:	3f 2e       	mov	r3, r31
 784:	2a e0       	ldi	r18, 0x0A	; 10
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	a3 01       	movw	r20, r6
 78a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__ultoa_invert>
 78e:	88 2e       	mov	r8, r24
 790:	86 18       	sub	r8, r6
 792:	45 c0       	rjmp	.+138    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 794:	85 37       	cpi	r24, 0x75	; 117
 796:	31 f4       	brne	.+12     	; 0x7a4 <vfprintf+0x232>
 798:	23 2d       	mov	r18, r3
 79a:	2f 7e       	andi	r18, 0xEF	; 239
 79c:	b2 2e       	mov	r11, r18
 79e:	2a e0       	ldi	r18, 0x0A	; 10
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	25 c0       	rjmp	.+74     	; 0x7ee <vfprintf+0x27c>
 7a4:	93 2d       	mov	r25, r3
 7a6:	99 7f       	andi	r25, 0xF9	; 249
 7a8:	b9 2e       	mov	r11, r25
 7aa:	8f 36       	cpi	r24, 0x6F	; 111
 7ac:	c1 f0       	breq	.+48     	; 0x7de <vfprintf+0x26c>
 7ae:	18 f4       	brcc	.+6      	; 0x7b6 <vfprintf+0x244>
 7b0:	88 35       	cpi	r24, 0x58	; 88
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <vfprintf+0x260>
 7b4:	b5 c0       	rjmp	.+362    	; 0x920 <__stack+0x21>
 7b6:	80 37       	cpi	r24, 0x70	; 112
 7b8:	19 f0       	breq	.+6      	; 0x7c0 <vfprintf+0x24e>
 7ba:	88 37       	cpi	r24, 0x78	; 120
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <vfprintf+0x254>
 7be:	b0 c0       	rjmp	.+352    	; 0x920 <__stack+0x21>
 7c0:	e9 2f       	mov	r30, r25
 7c2:	e0 61       	ori	r30, 0x10	; 16
 7c4:	be 2e       	mov	r11, r30
 7c6:	b4 fe       	sbrs	r11, 4
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x272>
 7ca:	fb 2d       	mov	r31, r11
 7cc:	f4 60       	ori	r31, 0x04	; 4
 7ce:	bf 2e       	mov	r11, r31
 7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <vfprintf+0x272>
 7d2:	34 fe       	sbrs	r3, 4
 7d4:	0a c0       	rjmp	.+20     	; 0x7ea <vfprintf+0x278>
 7d6:	29 2f       	mov	r18, r25
 7d8:	26 60       	ori	r18, 0x06	; 6
 7da:	b2 2e       	mov	r11, r18
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x278>
 7de:	28 e0       	ldi	r18, 0x08	; 8
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <vfprintf+0x27c>
 7e4:	20 e1       	ldi	r18, 0x10	; 16
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x27c>
 7ea:	20 e1       	ldi	r18, 0x10	; 16
 7ec:	32 e0       	ldi	r19, 0x02	; 2
 7ee:	f8 01       	movw	r30, r16
 7f0:	b7 fe       	sbrs	r11, 7
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	82 81       	ldd	r24, Z+2	; 0x02
 7fa:	93 81       	ldd	r25, Z+3	; 0x03
 7fc:	0c 5f       	subi	r16, 0xFC	; 252
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	06 c0       	rjmp	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	60 81       	ld	r22, Z
 804:	71 81       	ldd	r23, Z+1	; 0x01
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	a3 01       	movw	r20, r6
 810:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__ultoa_invert>
 814:	88 2e       	mov	r8, r24
 816:	86 18       	sub	r8, r6
 818:	fb 2d       	mov	r31, r11
 81a:	ff 77       	andi	r31, 0x7F	; 127
 81c:	3f 2e       	mov	r3, r31
 81e:	36 fe       	sbrs	r3, 6
 820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 822:	23 2d       	mov	r18, r3
 824:	2e 7f       	andi	r18, 0xFE	; 254
 826:	a2 2e       	mov	r10, r18
 828:	89 14       	cp	r8, r9
 82a:	58 f4       	brcc	.+22     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 82c:	34 fe       	sbrs	r3, 4
 82e:	0b c0       	rjmp	.+22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 830:	32 fc       	sbrc	r3, 2
 832:	09 c0       	rjmp	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	83 2d       	mov	r24, r3
 836:	8e 7e       	andi	r24, 0xEE	; 238
 838:	a8 2e       	mov	r10, r24
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83c:	b8 2c       	mov	r11, r8
 83e:	a3 2c       	mov	r10, r3
 840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 842:	b8 2c       	mov	r11, r8
 844:	01 c0       	rjmp	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 846:	b9 2c       	mov	r11, r9
 848:	a4 fe       	sbrs	r10, 4
 84a:	0f c0       	rjmp	.+30     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 84c:	fe 01       	movw	r30, r28
 84e:	e8 0d       	add	r30, r8
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	21 f4       	brne	.+8      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 858:	9a 2d       	mov	r25, r10
 85a:	99 7e       	andi	r25, 0xE9	; 233
 85c:	a9 2e       	mov	r10, r25
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 860:	a2 fe       	sbrs	r10, 2
 862:	06 c0       	rjmp	.+12     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 864:	b3 94       	inc	r11
 866:	b3 94       	inc	r11
 868:	04 c0       	rjmp	.+8      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 86a:	8a 2d       	mov	r24, r10
 86c:	86 78       	andi	r24, 0x86	; 134
 86e:	09 f0       	breq	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	b3 94       	inc	r11
 872:	a3 fc       	sbrc	r10, 3
 874:	11 c0       	rjmp	.+34     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 876:	a0 fe       	sbrs	r10, 0
 878:	06 c0       	rjmp	.+12     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 87a:	b2 14       	cp	r11, r2
 87c:	88 f4       	brcc	.+34     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 87e:	28 0c       	add	r2, r8
 880:	92 2c       	mov	r9, r2
 882:	9b 18       	sub	r9, r11
 884:	0e c0       	rjmp	.+28     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 886:	b2 14       	cp	r11, r2
 888:	60 f4       	brcc	.+24     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 88a:	b6 01       	movw	r22, r12
 88c:	80 e2       	ldi	r24, 0x20	; 32
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 894:	b3 94       	inc	r11
 896:	f7 cf       	rjmp	.-18     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 898:	b2 14       	cp	r11, r2
 89a:	18 f4       	brcc	.+6      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89c:	2b 18       	sub	r2, r11
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8a0:	98 2c       	mov	r9, r8
 8a2:	21 2c       	mov	r2, r1
 8a4:	a4 fe       	sbrs	r10, 4
 8a6:	10 c0       	rjmp	.+32     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8b2:	a2 fe       	sbrs	r10, 2
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8b6:	a1 fc       	sbrc	r10, 1
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ba:	88 e7       	ldi	r24, 0x78	; 120
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c0:	88 e5       	ldi	r24, 0x58	; 88
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	b6 01       	movw	r22, r12
 8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8c8:	8a 2d       	mov	r24, r10
 8ca:	86 78       	andi	r24, 0x86	; 134
 8cc:	59 f0       	breq	.+22     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8ce:	a1 fe       	sbrs	r10, 1
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d2:	8b e2       	ldi	r24, 0x2B	; 43
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	a7 fc       	sbrc	r10, 7
 8da:	8d e2       	ldi	r24, 0x2D	; 45
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8e4:	89 14       	cp	r8, r9
 8e6:	38 f4       	brcc	.+14     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8f2:	9a 94       	dec	r9
 8f4:	f7 cf       	rjmp	.-18     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8f6:	8a 94       	dec	r8
 8f8:	f3 01       	movw	r30, r6
 8fa:	e8 0d       	add	r30, r8
 8fc:	f1 1d       	adc	r31, r1
 8fe:	80 81       	ld	r24, Z
 900:	b6 01       	movw	r22, r12
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 908:	81 10       	cpse	r8, r1
 90a:	f5 cf       	rjmp	.-22     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 90c:	22 20       	and	r2, r2
 90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
 910:	42 ce       	rjmp	.-892    	; 0x596 <vfprintf+0x24>
 912:	b6 01       	movw	r22, r12
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 91c:	2a 94       	dec	r2
 91e:	f6 cf       	rjmp	.-20     	; 0x90c <__stack+0xd>
 920:	f6 01       	movw	r30, r12
 922:	86 81       	ldd	r24, Z+6	; 0x06
 924:	97 81       	ldd	r25, Z+7	; 0x07
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	9f ef       	ldi	r25, 0xFF	; 255
 92c:	2b 96       	adiw	r28, 0x0b	; 11
 92e:	e2 e1       	ldi	r30, 0x12	; 18
 930:	0c 94 66 05 	jmp	0xacc	; 0xacc <__epilogue_restores__>

00000934 <strnlen_P>:
 934:	fc 01       	movw	r30, r24
 936:	05 90       	lpm	r0, Z+
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	70 40       	sbci	r23, 0x00	; 0
 93c:	01 10       	cpse	r0, r1
 93e:	d8 f7       	brcc	.-10     	; 0x936 <strnlen_P+0x2>
 940:	80 95       	com	r24
 942:	90 95       	com	r25
 944:	8e 0f       	add	r24, r30
 946:	9f 1f       	adc	r25, r31
 948:	08 95       	ret

0000094a <strnlen>:
 94a:	fc 01       	movw	r30, r24
 94c:	61 50       	subi	r22, 0x01	; 1
 94e:	70 40       	sbci	r23, 0x00	; 0
 950:	01 90       	ld	r0, Z+
 952:	01 10       	cpse	r0, r1
 954:	d8 f7       	brcc	.-10     	; 0x94c <strnlen+0x2>
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	8e 0f       	add	r24, r30
 95c:	9f 1f       	adc	r25, r31
 95e:	08 95       	ret

00000960 <fputc>:
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	fb 01       	movw	r30, r22
 96a:	23 81       	ldd	r18, Z+3	; 0x03
 96c:	21 fd       	sbrc	r18, 1
 96e:	03 c0       	rjmp	.+6      	; 0x976 <fputc+0x16>
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	2c c0       	rjmp	.+88     	; 0x9ce <fputc+0x6e>
 976:	22 ff       	sbrs	r18, 2
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <fputc+0x46>
 97a:	46 81       	ldd	r20, Z+6	; 0x06
 97c:	57 81       	ldd	r21, Z+7	; 0x07
 97e:	24 81       	ldd	r18, Z+4	; 0x04
 980:	35 81       	ldd	r19, Z+5	; 0x05
 982:	42 17       	cp	r20, r18
 984:	53 07       	cpc	r21, r19
 986:	44 f4       	brge	.+16     	; 0x998 <fputc+0x38>
 988:	a0 81       	ld	r26, Z
 98a:	b1 81       	ldd	r27, Z+1	; 0x01
 98c:	9d 01       	movw	r18, r26
 98e:	2f 5f       	subi	r18, 0xFF	; 255
 990:	3f 4f       	sbci	r19, 0xFF	; 255
 992:	31 83       	std	Z+1, r19	; 0x01
 994:	20 83       	st	Z, r18
 996:	8c 93       	st	X, r24
 998:	26 81       	ldd	r18, Z+6	; 0x06
 99a:	37 81       	ldd	r19, Z+7	; 0x07
 99c:	2f 5f       	subi	r18, 0xFF	; 255
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	37 83       	std	Z+7, r19	; 0x07
 9a2:	26 83       	std	Z+6, r18	; 0x06
 9a4:	14 c0       	rjmp	.+40     	; 0x9ce <fputc+0x6e>
 9a6:	8b 01       	movw	r16, r22
 9a8:	ec 01       	movw	r28, r24
 9aa:	fb 01       	movw	r30, r22
 9ac:	00 84       	ldd	r0, Z+8	; 0x08
 9ae:	f1 85       	ldd	r31, Z+9	; 0x09
 9b0:	e0 2d       	mov	r30, r0
 9b2:	09 95       	icall
 9b4:	89 2b       	or	r24, r25
 9b6:	e1 f6       	brne	.-72     	; 0x970 <fputc+0x10>
 9b8:	d8 01       	movw	r26, r16
 9ba:	16 96       	adiw	r26, 0x06	; 6
 9bc:	8d 91       	ld	r24, X+
 9be:	9c 91       	ld	r25, X
 9c0:	17 97       	sbiw	r26, 0x07	; 7
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	17 96       	adiw	r26, 0x07	; 7
 9c6:	9c 93       	st	X, r25
 9c8:	8e 93       	st	-X, r24
 9ca:	16 97       	sbiw	r26, 0x06	; 6
 9cc:	ce 01       	movw	r24, r28
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	08 95       	ret

000009d8 <__ultoa_invert>:
 9d8:	fa 01       	movw	r30, r20
 9da:	aa 27       	eor	r26, r26
 9dc:	28 30       	cpi	r18, 0x08	; 8
 9de:	51 f1       	breq	.+84     	; 0xa34 <__ultoa_invert+0x5c>
 9e0:	20 31       	cpi	r18, 0x10	; 16
 9e2:	81 f1       	breq	.+96     	; 0xa44 <__ultoa_invert+0x6c>
 9e4:	e8 94       	clt
 9e6:	6f 93       	push	r22
 9e8:	6e 7f       	andi	r22, 0xFE	; 254
 9ea:	6e 5f       	subi	r22, 0xFE	; 254
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	af 4f       	sbci	r26, 0xFF	; 255
 9f4:	b1 e0       	ldi	r27, 0x01	; 1
 9f6:	3e d0       	rcall	.+124    	; 0xa74 <__ultoa_invert+0x9c>
 9f8:	b4 e0       	ldi	r27, 0x04	; 4
 9fa:	3c d0       	rcall	.+120    	; 0xa74 <__ultoa_invert+0x9c>
 9fc:	67 0f       	add	r22, r23
 9fe:	78 1f       	adc	r23, r24
 a00:	89 1f       	adc	r24, r25
 a02:	9a 1f       	adc	r25, r26
 a04:	a1 1d       	adc	r26, r1
 a06:	68 0f       	add	r22, r24
 a08:	79 1f       	adc	r23, r25
 a0a:	8a 1f       	adc	r24, r26
 a0c:	91 1d       	adc	r25, r1
 a0e:	a1 1d       	adc	r26, r1
 a10:	6a 0f       	add	r22, r26
 a12:	71 1d       	adc	r23, r1
 a14:	81 1d       	adc	r24, r1
 a16:	91 1d       	adc	r25, r1
 a18:	a1 1d       	adc	r26, r1
 a1a:	20 d0       	rcall	.+64     	; 0xa5c <__ultoa_invert+0x84>
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__ultoa_invert+0x48>
 a1e:	68 94       	set
 a20:	3f 91       	pop	r19
 a22:	2a e0       	ldi	r18, 0x0A	; 10
 a24:	26 9f       	mul	r18, r22
 a26:	11 24       	eor	r1, r1
 a28:	30 19       	sub	r19, r0
 a2a:	30 5d       	subi	r19, 0xD0	; 208
 a2c:	31 93       	st	Z+, r19
 a2e:	de f6       	brtc	.-74     	; 0x9e6 <__ultoa_invert+0xe>
 a30:	cf 01       	movw	r24, r30
 a32:	08 95       	ret
 a34:	46 2f       	mov	r20, r22
 a36:	47 70       	andi	r20, 0x07	; 7
 a38:	40 5d       	subi	r20, 0xD0	; 208
 a3a:	41 93       	st	Z+, r20
 a3c:	b3 e0       	ldi	r27, 0x03	; 3
 a3e:	0f d0       	rcall	.+30     	; 0xa5e <__ultoa_invert+0x86>
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__ultoa_invert+0x5c>
 a42:	f6 cf       	rjmp	.-20     	; 0xa30 <__ultoa_invert+0x58>
 a44:	46 2f       	mov	r20, r22
 a46:	4f 70       	andi	r20, 0x0F	; 15
 a48:	40 5d       	subi	r20, 0xD0	; 208
 a4a:	4a 33       	cpi	r20, 0x3A	; 58
 a4c:	18 f0       	brcs	.+6      	; 0xa54 <__ultoa_invert+0x7c>
 a4e:	49 5d       	subi	r20, 0xD9	; 217
 a50:	31 fd       	sbrc	r19, 1
 a52:	40 52       	subi	r20, 0x20	; 32
 a54:	41 93       	st	Z+, r20
 a56:	02 d0       	rcall	.+4      	; 0xa5c <__ultoa_invert+0x84>
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__ultoa_invert+0x6c>
 a5a:	ea cf       	rjmp	.-44     	; 0xa30 <__ultoa_invert+0x58>
 a5c:	b4 e0       	ldi	r27, 0x04	; 4
 a5e:	a6 95       	lsr	r26
 a60:	97 95       	ror	r25
 a62:	87 95       	ror	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	ba 95       	dec	r27
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0x86>
 a6c:	00 97       	sbiw	r24, 0x00	; 0
 a6e:	61 05       	cpc	r22, r1
 a70:	71 05       	cpc	r23, r1
 a72:	08 95       	ret
 a74:	9b 01       	movw	r18, r22
 a76:	ac 01       	movw	r20, r24
 a78:	0a 2e       	mov	r0, r26
 a7a:	06 94       	lsr	r0
 a7c:	57 95       	ror	r21
 a7e:	47 95       	ror	r20
 a80:	37 95       	ror	r19
 a82:	27 95       	ror	r18
 a84:	ba 95       	dec	r27
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__ultoa_invert+0xa2>
 a88:	62 0f       	add	r22, r18
 a8a:	73 1f       	adc	r23, r19
 a8c:	84 1f       	adc	r24, r20
 a8e:	95 1f       	adc	r25, r21
 a90:	a0 1d       	adc	r26, r0
 a92:	08 95       	ret

00000a94 <__prologue_saves__>:
 a94:	2f 92       	push	r2
 a96:	3f 92       	push	r3
 a98:	4f 92       	push	r4
 a9a:	5f 92       	push	r5
 a9c:	6f 92       	push	r6
 a9e:	7f 92       	push	r7
 aa0:	8f 92       	push	r8
 aa2:	9f 92       	push	r9
 aa4:	af 92       	push	r10
 aa6:	bf 92       	push	r11
 aa8:	cf 92       	push	r12
 aaa:	df 92       	push	r13
 aac:	ef 92       	push	r14
 aae:	ff 92       	push	r15
 ab0:	0f 93       	push	r16
 ab2:	1f 93       	push	r17
 ab4:	cf 93       	push	r28
 ab6:	df 93       	push	r29
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
 abc:	ca 1b       	sub	r28, r26
 abe:	db 0b       	sbc	r29, r27
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	f8 94       	cli
 ac4:	de bf       	out	0x3e, r29	; 62
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	cd bf       	out	0x3d, r28	; 61
 aca:	09 94       	ijmp

00000acc <__epilogue_restores__>:
 acc:	2a 88       	ldd	r2, Y+18	; 0x12
 ace:	39 88       	ldd	r3, Y+17	; 0x11
 ad0:	48 88       	ldd	r4, Y+16	; 0x10
 ad2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad8:	8c 84       	ldd	r8, Y+12	; 0x0c
 ada:	9b 84       	ldd	r9, Y+11	; 0x0b
 adc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ade:	b9 84       	ldd	r11, Y+9	; 0x09
 ae0:	c8 84       	ldd	r12, Y+8	; 0x08
 ae2:	df 80       	ldd	r13, Y+7	; 0x07
 ae4:	ee 80       	ldd	r14, Y+6	; 0x06
 ae6:	fd 80       	ldd	r15, Y+5	; 0x05
 ae8:	0c 81       	ldd	r16, Y+4	; 0x04
 aea:	1b 81       	ldd	r17, Y+3	; 0x03
 aec:	aa 81       	ldd	r26, Y+2	; 0x02
 aee:	b9 81       	ldd	r27, Y+1	; 0x01
 af0:	ce 0f       	add	r28, r30
 af2:	d1 1d       	adc	r29, r1
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	f8 94       	cli
 af8:	de bf       	out	0x3e, r29	; 62
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	cd bf       	out	0x3d, r28	; 61
 afe:	ed 01       	movw	r28, r26
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
