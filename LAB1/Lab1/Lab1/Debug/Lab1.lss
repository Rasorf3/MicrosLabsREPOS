
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008001be  008001be  000007ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001858  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbe  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000edd  00000000  00000000  00002da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000777  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	c0 02       	muls	r28, r16
  6a:	c5 02       	muls	r28, r21
  6c:	ca 02       	muls	r28, r26
  6e:	cf 02       	muls	r28, r31
  70:	d4 02       	muls	r29, r20
  72:	d9 02       	muls	r29, r25
  74:	de 02       	muls	r29, r30

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 e6       	ldi	r30, 0x68	; 104
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ae 3b       	cpi	r26, 0xBE	; 190
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ae eb       	ldi	r26, 0xBE	; 190
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 3d       	cpi	r26, 0xDC	; 220
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  ac:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <twi_init>:

//TWI initialize
// bit rate:18
void twi_init(void)
{
	TWBR= 0x12; //set bit rate
  b4:	82 e1       	ldi	r24, 0x12	; 18
  b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR |= (1<<TWPS0);
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
	TWCR |= (1<<TWEA) | (1<<TWEN);
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	84 64       	ori	r24, 0x44	; 68
  cc:	80 83       	st	Z, r24
	TWAR= 0x00; //set slave address
  ce:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  d2:	08 95       	ret

000000d4 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
    while (!(TWCR & (1<<TWINT)));   	//Wait for TWINT flag set. This indicates that the
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <i2c_start+0x6>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
  e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	11 f4       	brne	.+4      	; 0xf0 <i2c_start+0x1c>
	   return(0);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
	else		 	  	 				//if problem, transmit the code to PC  to know what's the problem
	{
		return(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
	}  
}
  f2:	08 95       	ret

000000f4 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);  //Send START condition
  f4:	84 ea       	ldi	r24, 0xA4	; 164
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));   		 //Wait for TWINT flag set. This indicates that the
  fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fe:	88 23       	and	r24, r24
 100:	e4 f7       	brge	.-8      	; 0xfa <i2c_repeatStart+0x6>
		  									 //START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)		 //Check value of TWI Status Register
 102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	11 f4       	brne	.+4      	; 0x110 <i2c_repeatStart+0x1c>
 	   return(0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
	else
	   return(1);
 110:	81 e0       	ldi	r24, 0x01	; 1
}
 112:	08 95       	ret

00000114 <i2c_sendAddress>:
//**************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
 114:	80 fd       	sbrc	r24, 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	01 c0       	rjmp	.+2      	; 0x11e <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
 11c:	90 e4       	ldi	r25, 0x40	; 64
   
   TWDR = address; 
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
   TWCR = (1<<TWINT)|(1<<TWEN);	   	   //Load SLA_W into TWDR Register. Clear TWINT bit
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
 128:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	88 23       	and	r24, r24
 12e:	e4 f7       	brge	.-8      	; 0x128 <i2c_sendAddress+0x14>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   	   //Check value of TWI Status Register
 130:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	98 13       	cpse	r25, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <i2c_sendAddress+0x2a>
   	  return(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
   else 
      return(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
}
 140:	08 95       	ret

00000142 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
 142:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
 14c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	88 23       	and	r24, r24
 152:	e4 f7       	brge	.-8      	; 0x14c <i2c_sendData+0xa>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
 154:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	88 32       	cpi	r24, 0x28	; 40
 15c:	11 f0       	breq	.+4      	; 0x162 <i2c_sendData+0x20>
   	  return(1);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
   else
      return(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
}
 164:	08 95       	ret

00000166 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
 166:	84 ec       	ldi	r24, 0xC4	; 196
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
 16c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 170:	88 23       	and	r24, r24
 172:	e4 f7       	brge	.-8      	; 0x16c <i2c_receiveData_ACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
 174:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 178:	88 7f       	andi	r24, 0xF8	; 248
 17a:	80 35       	cpi	r24, 0x50	; 80
 17c:	19 f4       	brne	.+6      	; 0x184 <i2c_receiveData_ACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
 17e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  return(data);
 182:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
 184:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
 186:	08 95       	ret

00000188 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
 188:	84 e8       	ldi	r24, 0x84	; 132
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
 18e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 192:	88 23       	and	r24, r24
 194:	e4 f7       	brge	.-8      	; 0x18e <i2c_receiveData_NACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)   //Check value of TWI Status Register
 196:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 35       	cpi	r24, 0x58	; 88
 19e:	19 f4       	brne	.+6      	; 0x1a6 <i2c_receiveData_NACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
 1a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  return(data);
 1a4:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)   //Check value of TWI Status Register
   	  return(ERROR_CODE);
 1a6:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
 1a8:	08 95       	ret

000001aa <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
 1aa:	84 e9       	ldi	r24, 0x94	; 148
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	08 95       	ret

000001b2 <LCD_Command>:
	LCD_Command(LCD_CLEAR);
}

void LCD_Command(unsigned char command)
{
	PORTB &= ~(0x3F);
 1b2:	95 b1       	in	r25, 0x05	; 5
 1b4:	90 7c       	andi	r25, 0xC0	; 192
 1b6:	95 b9       	out	0x05, r25	; 5
	PORTB |= (command & 0x3F);
 1b8:	95 b1       	in	r25, 0x05	; 5
 1ba:	28 2f       	mov	r18, r24
 1bc:	2f 73       	andi	r18, 0x3F	; 63
 1be:	92 2b       	or	r25, r18
 1c0:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	93 7f       	andi	r25, 0xF3	; 243
 1c6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((command >> 4) & 0x0C);
 1c8:	9b b1       	in	r25, 0x0b	; 11
 1ca:	82 95       	swap	r24
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	8c 70       	andi	r24, 0x0C	; 12
 1d0:	89 2b       	or	r24, r25
 1d2:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << RS_LCD); //Colocamos RS_LCD en 0
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	85 e3       	ldi	r24, 0x35	; 53
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_Command+0x30>
 1e6:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	88 b9       	out	0x08, r24	; 8
 1ee:	8f e8       	ldi	r24, 0x8F	; 143
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Command+0x40>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_Command+0x46>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <LCD_Init>:
 */ 
#include "LCD_Module.h"

void LCD_Init()
{
	DDRB |= 0x3F; 
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	8f 63       	ori	r24, 0x3F	; 63
 200:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0x0C;
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	8c 60       	ori	r24, 0x0C	; 12
 206:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<RS_LCD) | (1 << EN_LCD);
 208:	87 b1       	in	r24, 0x07	; 7
 20a:	83 60       	ori	r24, 0x03	; 3
 20c:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e5       	ldi	r24, 0x5F	; 95
 210:	9a ee       	ldi	r25, 0xEA	; 234
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_Init+0x16>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_Init+0x1c>
 218:	00 00       	nop
	
	//Comandos Iniciales al encender EL LCD
	_delay_ms(15);
	LCD_Command(0x30);
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	90 e4       	ldi	r25, 0x40	; 64
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Init+0x28>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Init+0x2e>
 22a:	00 00       	nop
	_delay_ms(4.1);
	LCD_Command(0x30);
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f e8       	ldi	r24, 0x8F	; 143
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Init+0x3a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Init+0x40>
 23c:	00 00       	nop
	_delay_us(100);
	LCD_Command(0x30);
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
	
	//Comandos para configurar EL LCD
	LCD_Command(LCD_INTERFACE_DATA1);
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
	LCD_Command(LCD_DISPLAY_ON_CURSOR_OF);
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
	LCD_Command(LCD_CLEAR);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
 256:	08 95       	ret

00000258 <LCD_Write_Char>:
	_delay_us(100);
}

void LCD_Write_Char(unsigned char character)
{
	PORTC |= (1 << RS_LCD);
 258:	98 b1       	in	r25, 0x08	; 8
 25a:	91 60       	ori	r25, 0x01	; 1
 25c:	98 b9       	out	0x08, r25	; 8
	PORTB &= ~(0x3F);
 25e:	95 b1       	in	r25, 0x05	; 5
 260:	90 7c       	andi	r25, 0xC0	; 192
 262:	95 b9       	out	0x05, r25	; 5
	PORTB |= (character & 0x3F);
 264:	95 b1       	in	r25, 0x05	; 5
 266:	28 2f       	mov	r18, r24
 268:	2f 73       	andi	r18, 0x3F	; 63
 26a:	92 2b       	or	r25, r18
 26c:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	93 7f       	andi	r25, 0xF3	; 243
 272:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((character >> 4) & 0x0C);
 274:	9b b1       	in	r25, 0x0b	; 11
 276:	82 95       	swap	r24
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	8c 70       	andi	r24, 0x0C	; 12
 27c:	89 2b       	or	r24, r25
 27e:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
 280:	88 b1       	in	r24, 0x08	; 8
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	88 b9       	out	0x08, r24	; 8
 286:	85 e3       	ldi	r24, 0x35	; 53
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_Write_Char+0x30>
 28c:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	82 60       	ori	r24, 0x02	; 2
 292:	88 b9       	out	0x08, r24	; 8
 294:	8f e8       	ldi	r24, 0x8F	; 143
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_Write_Char+0x40>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_Write_Char+0x46>
 29e:	00 00       	nop
 2a0:	08 95       	ret

000002a2 <LCD_Write_String>:
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ec 01       	movw	r28, r24
	while(*str)
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <LCD_Write_String+0xe>
	{
		LCD_Write_Char(*str++);
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Write_Char>
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
	while(*str)
 2b0:	88 81       	ld	r24, Y
 2b2:	81 11       	cpse	r24, r1
 2b4:	fa cf       	rjmp	.-12     	; 0x2aa <LCD_Write_String+0x8>
	{
		LCD_Write_Char(*str++);
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_SetCursor>:
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
 2bc:	62 30       	cpi	r22, 0x02	; 2
 2be:	31 f0       	breq	.+12     	; 0x2cc <LCD_SetCursor+0x10>
 2c0:	63 30       	cpi	r22, 0x03	; 3
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <LCD_SetCursor+0x14>
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <LCD_SetCursor+0x18>
		case 0: address = 0x00; break;  // Primera fila
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <LCD_SetCursor+0x1a>
		case 1: address = 0x40; break;  // Segunda fila
		case 2: address = 0x14; break;  // Tercera fila 
 2cc:	94 e1       	ldi	r25, 0x14	; 20
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_SetCursor+0x1a>
		case 3: address = 0x54; break;  // Cuarta fila 
 2d0:	94 e5       	ldi	r25, 0x54	; 84
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCD_SetCursor+0x1a>
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
		case 0: address = 0x00; break;  // Primera fila
		case 1: address = 0x40; break;  // Segunda fila
 2d4:	90 e4       	ldi	r25, 0x40	; 64
		case 2: address = 0x14; break;  // Tercera fila 
		case 3: address = 0x54; break;  // Cuarta fila 
		default: address = 0x00;
	}
	LCD_Command(LCD_CHANGE_LINE | (address + col));  // Comando "Set DDRAM Address"
 2d6:	89 0f       	add	r24, r25
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
 2de:	08 95       	ret

000002e0 <main>:

int main(void)
{
	float distancia_basura = 0;
	unsigned char Datos_LCD[15];
	DDRC |= 0x30;
 2e0:	87 b1       	in	r24, 0x07	; 7
 2e2:	80 63       	ori	r24, 0x30	; 48
 2e4:	87 b9       	out	0x07, r24	; 7
  
	LCD_Init();
 2e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Init>
	//UltraSonicInit();
	twi_init();
 2ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <twi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	94 e0       	ldi	r25, 0x04	; 4
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x14>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x1e>
 2fe:	00 00       	nop
	_delay_ms(100);
	  
    while (1) 
    {
	
	    RTC_display_data();
 300:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <RTC_display_data>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	87 ea       	ldi	r24, 0xA7	; 167
 308:	91 e6       	ldi	r25, 0x61	; 97
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x2a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x34>
 314:	00 00       	nop
		_delay_ms(2000);
		if(ReadRollPin())
 316:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <ReadRollPin>
 31a:	89 2b       	or	r24, r25
 31c:	69 f1       	breq	.+90     	; 0x378 <main+0x98>
		{
			LCD_Command(LCD_CLEAR);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
			LCD_SetCursor(0,0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
			LCD_Write_String(" --------------------------------------");
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
			LCD_SetCursor(0,1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
			LCD_Write_String("****Bote Abierto****");
 33c:	88 e2       	ldi	r24, 0x28	; 40
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
			LCD_SetCursor(0,2);
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
			LCD_Write_String("**Esperando Cierre***");
 34c:	8d e3       	ldi	r24, 0x3D	; 61
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
			LCD_SetCursor(0,3);
 354:	63 e0       	ldi	r22, 0x03	; 3
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
			LCD_Write_String("--------------------");
 35c:	83 e1       	ldi	r24, 0x13	; 19
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	87 ea       	ldi	r24, 0xA7	; 167
 368:	91 e6       	ldi	r25, 0x61	; 97
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x8a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x94>
 374:	00 00       	nop
 376:	c4 cf       	rjmp	.-120    	; 0x300 <main+0x20>
		}
		else
		{
		/*	UltraSonic_Display_Data();
			DHT_Display_Data();*/
		LCD_Command(LCD_CLEAR);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
		LCD_SetCursor(0,0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
		LCD_Write_String(" -------------------");
 386:	83 e5       	ldi	r24, 0x53	; 83
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
		LCD_SetCursor(0,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
		LCD_Write_String("cerradddooo");
 396:	88 e6       	ldi	r24, 0x68	; 104
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	87 ea       	ldi	r24, 0xA7	; 167
 3a2:	91 e6       	ldi	r25, 0x61	; 97
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0xc4>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0xce>
 3ae:	00 00       	nop
 3b0:	a7 cf       	rjmp	.-178    	; 0x300 <main+0x20>

000003b2 <ReadRollPin>:
 */ 
#include "ROLL_Module.h"

int ReadRollPin()
{
	if(PIND & (1 << ROLL_PIN))
 3b2:	4e 9b       	sbis	0x09, 6	; 9
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <ReadRollPin+0xa>
	{
		return 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 95       	ret
	}
	return 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
}
 3c0:	08 95       	ret

000003c2 <RTC_read>:

//******************************************************************
//Function to read RTC data.
//******************************************************************    
void RTC_read(void)
{
 3c2:	cf 93       	push	r28

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
 3c4:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_start>
   if(errorStatus == 1)
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <RTC_read+0x10>
   {
   	 i2c_stop();
 3cc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	 return;
 3d0:	37 c0       	rjmp	.+110    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
 3d2:	80 ed       	ldi	r24, 0xD0	; 208
 3d4:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_sendAddress>
   
   if(errorStatus == 1)
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	19 f4       	brne	.+6      	; 0x3e2 <RTC_read+0x20>
   {
	 i2c_stop();
 3dc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	 return;
 3e0:	2f c0       	rjmp	.+94     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   } 
   
   errorStatus = i2c_sendData(0x00);
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_sendData>
   if(errorStatus == 1)
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <RTC_read+0x30>
   {
	 i2c_stop();
 3ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	 return;
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   } 

    errorStatus = i2c_repeatStart();
 3f2:	0e 94 7a 00 	call	0xf4	; 0xf4 <i2c_repeatStart>
   if(errorStatus == 1)
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	19 f4       	brne	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
   {
   	 i2c_stop();
 3fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	 return;
 3fe:	20 c0       	rjmp	.+64     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
 400:	81 ed       	ldi	r24, 0xD1	; 209
 402:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_sendAddress>
   
   if(errorStatus == 1)
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	b1 f4       	brne	.+44     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
   {
	 i2c_stop();
 40a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	 return;
 40e:	18 c0       	rjmp	.+48     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
 410:	c6 30       	cpi	r28, 0x06	; 6
 412:	19 f4       	brne	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	   	  data = i2c_receiveData_NACK();
 414:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_receiveData_NACK>
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	  else
	  	  data = i2c_receiveData_ACK();
 41a:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
 41e:	8e 37       	cpi	r24, 0x7E	; 126
 420:	19 f4       	brne	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
   	  {
			i2c_stop();
 422:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	   		return;
 426:	0c c0       	rjmp	.+24     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
   	  }
	  
	  rtc_register[i] = data;
 428:	ec 2f       	mov	r30, r28
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e2 54       	subi	r30, 0x42	; 66
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	80 83       	st	Z, r24
   {
	 i2c_stop();
	 return;
   } 
 
    for(i=0;i<7;i++)
 432:	cf 5f       	subi	r28, 0xFF	; 255
 434:	01 c0       	rjmp	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	c0 e0       	ldi	r28, 0x00	; 0
 438:	c7 30       	cpi	r28, 0x07	; 7
 43a:	50 f3       	brcs	.-44     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
 43c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
}	  
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <RTC_getTime>:
//******************************************************************
//Function to read time data.
//****************************************************************** 
void RTC_getTime(void)
{
   RTC_read();
 444:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <RTC_read>
   time[9] = 0x00;	  //NIL
 448:	e5 ec       	ldi	r30, 0xC5	; 197
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	11 86       	std	Z+9, r1	; 0x09
   time[8] = ' ';
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	80 87       	std	Z+8, r24	; 0x08
   time[7] = (SECONDS & 0x0f) | 0x30;		//seconds(1's)
 452:	ae eb       	ldi	r26, 0xBE	; 190
 454:	b1 e0       	ldi	r27, 0x01	; 1
 456:	8c 91       	ld	r24, X
 458:	98 2f       	mov	r25, r24
 45a:	9f 70       	andi	r25, 0x0F	; 15
 45c:	90 63       	ori	r25, 0x30	; 48
 45e:	97 83       	std	Z+7, r25	; 0x07
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30;		//seconds(10's)
 460:	80 77       	andi	r24, 0x70	; 112
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	95 95       	asr	r25
 466:	87 95       	ror	r24
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	95 95       	asr	r25
 46e:	87 95       	ror	r24
 470:	95 95       	asr	r25
 472:	87 95       	ror	r24
 474:	80 63       	ori	r24, 0x30	; 48
 476:	86 83       	std	Z+6, r24	; 0x06
   time[5] = ':';
 478:	2a e3       	ldi	r18, 0x3A	; 58
 47a:	25 83       	std	Z+5, r18	; 0x05
   
   time[4] = (MINUTES & 0x0f) | 0x30;
 47c:	11 96       	adiw	r26, 0x01	; 1
 47e:	8c 91       	ld	r24, X
 480:	11 97       	sbiw	r26, 0x01	; 1
 482:	98 2f       	mov	r25, r24
 484:	9f 70       	andi	r25, 0x0F	; 15
 486:	90 63       	ori	r25, 0x30	; 48
 488:	94 83       	std	Z+4, r25	; 0x04
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
 48a:	80 77       	andi	r24, 0x70	; 112
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	95 95       	asr	r25
 490:	87 95       	ror	r24
 492:	95 95       	asr	r25
 494:	87 95       	ror	r24
 496:	95 95       	asr	r25
 498:	87 95       	ror	r24
 49a:	95 95       	asr	r25
 49c:	87 95       	ror	r24
 49e:	80 63       	ori	r24, 0x30	; 48
 4a0:	83 83       	std	Z+3, r24	; 0x03
   time[2] = ':'; 
 4a2:	22 83       	std	Z+2, r18	; 0x02
   
   time[1] = (HOURS & 0x0f) | 0x30;	
 4a4:	12 96       	adiw	r26, 0x02	; 2
 4a6:	8c 91       	ld	r24, X
 4a8:	98 2f       	mov	r25, r24
 4aa:	9f 70       	andi	r25, 0x0F	; 15
 4ac:	90 63       	ori	r25, 0x30	; 48
 4ae:	91 83       	std	Z+1, r25	; 0x01
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
 4b0:	80 73       	andi	r24, 0x30	; 48
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	95 95       	asr	r25
 4b6:	87 95       	ror	r24
 4b8:	95 95       	asr	r25
 4ba:	87 95       	ror	r24
 4bc:	95 95       	asr	r25
 4be:	87 95       	ror	r24
 4c0:	95 95       	asr	r25
 4c2:	87 95       	ror	r24
 4c4:	80 63       	ori	r24, 0x30	; 48
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret

000004ca <RTC_getDate>:
//******************************************************************
//Function to read date data
//****************************************************************** 
void RTC_getDate(void)
{
  RTC_read();
 4ca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <RTC_read>
  date[11] = 0x00;  //NIL
 4ce:	e0 ed       	ldi	r30, 0xD0	; 208
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
  date[11] = ' ';
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	83 87       	std	Z+11, r24	; 0x0b
  date[9] = (YEAR & 0x0f) | 0x30;
 4d6:	ae eb       	ldi	r26, 0xBE	; 190
 4d8:	b1 e0       	ldi	r27, 0x01	; 1
 4da:	16 96       	adiw	r26, 0x06	; 6
 4dc:	8c 91       	ld	r24, X
 4de:	16 97       	sbiw	r26, 0x06	; 6
 4e0:	98 2f       	mov	r25, r24
 4e2:	9f 70       	andi	r25, 0x0F	; 15
 4e4:	90 63       	ori	r25, 0x30	; 48
 4e6:	91 87       	std	Z+9, r25	; 0x09
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	80 63       	ori	r24, 0x30	; 48
 4ee:	80 87       	std	Z+8, r24	; 0x08
  date[7] = '0';
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	87 83       	std	Z+7, r24	; 0x07
  date[6] = '2';
 4f4:	82 e3       	ldi	r24, 0x32	; 50
 4f6:	86 83       	std	Z+6, r24	; 0x06
  date[5] = '/';
 4f8:	2f e2       	ldi	r18, 0x2F	; 47
 4fa:	25 83       	std	Z+5, r18	; 0x05
  date[4] = (MONTH & 0x0f) | 0x30;
 4fc:	15 96       	adiw	r26, 0x05	; 5
 4fe:	8c 91       	ld	r24, X
 500:	15 97       	sbiw	r26, 0x05	; 5
 502:	98 2f       	mov	r25, r24
 504:	9f 70       	andi	r25, 0x0F	; 15
 506:	90 63       	ori	r25, 0x30	; 48
 508:	94 83       	std	Z+4, r25	; 0x04
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
 50a:	80 71       	andi	r24, 0x10	; 16
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	95 95       	asr	r25
 510:	87 95       	ror	r24
 512:	95 95       	asr	r25
 514:	87 95       	ror	r24
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	95 95       	asr	r25
 51c:	87 95       	ror	r24
 51e:	80 63       	ori	r24, 0x30	; 48
 520:	83 83       	std	Z+3, r24	; 0x03
  date[2] = '/';
 522:	22 83       	std	Z+2, r18	; 0x02
  date[1] = (DATE & 0x0f) | 0x30;
 524:	14 96       	adiw	r26, 0x04	; 4
 526:	8c 91       	ld	r24, X
 528:	98 2f       	mov	r25, r24
 52a:	9f 70       	andi	r25, 0x0F	; 15
 52c:	90 63       	ori	r25, 0x30	; 48
 52e:	91 83       	std	Z+1, r25	; 0x01
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
 530:	80 73       	andi	r24, 0x30	; 48
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	95 95       	asr	r25
 536:	87 95       	ror	r24
 538:	95 95       	asr	r25
 53a:	87 95       	ror	r24
 53c:	95 95       	asr	r25
 53e:	87 95       	ror	r24
 540:	95 95       	asr	r25
 542:	87 95       	ror	r24
 544:	80 63       	ori	r24, 0x30	; 48
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <RTC_displayTime>:
//******************************************************************
//Function to display time. 
//****************************************************************** 
void RTC_displayTime(void)
{
  RTC_getTime();
 54a:	0e 94 22 02 	call	0x444	; 0x444 <RTC_getTime>
  
  LCD_Write_String(time);
 54e:	85 ec       	ldi	r24, 0xC5	; 197
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
 556:	08 95       	ret

00000558 <RTC_displayDate>:
//******************************************************************
//Function to display date
//****************************************************************** 
void RTC_displayDate(void)
{
	RTC_getDate();
 558:	0e 94 65 02 	call	0x4ca	; 0x4ca <RTC_getDate>
	LCD_Write_String(date);
 55c:	80 ed       	ldi	r24, 0xD0	; 208
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
 564:	08 95       	ret

00000566 <RTC_displayDay>:
}

void RTC_displayDay(void)
{
  switch(DAY)
 566:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <__data_end+0x3>
 56a:	8e 2f       	mov	r24, r30
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	31 97       	sbiw	r30, 0x01	; 1
 572:	e7 30       	cpi	r30, 0x07	; 7
 574:	f1 05       	cpc	r31, r1
 576:	38 f5       	brcc	.+78     	; 0x5c6 <RTC_displayDay+0x60>
 578:	ec 5c       	subi	r30, 0xCC	; 204
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__tablejump2__>
  {
   case 1:
		  LCD_Write_String("Sunday ");
 580:	84 e7       	ldi	r24, 0x74	; 116
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 
 588:	08 95       	ret
   case 2:
		  LCD_Write_String("Monday ");
 58a:	8c e7       	ldi	r24, 0x7C	; 124
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 
 592:	08 95       	ret
   case 3:
		  LCD_Write_String("Tuesday ");
 594:	84 e8       	ldi	r24, 0x84	; 132
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 
 59c:	08 95       	ret
   case 4:
		  LCD_Write_String("Wednesday ");
 59e:	8d e8       	ldi	r24, 0x8D	; 141
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 
 5a6:	08 95       	ret
   case 5:
		  LCD_Write_String("Thursday ");
 5a8:	88 e9       	ldi	r24, 0x98	; 152
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 		  
 5b0:	08 95       	ret
   case 6:
		  LCD_Write_String("Friday  ");
 5b2:	82 ea       	ldi	r24, 0xA2	; 162
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 		  
 5ba:	08 95       	ret
   case 7:
		  LCD_Write_String("Saturday ");
 5bc:	8b ea       	ldi	r24, 0xAB	; 171
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
          break; 
 5c4:	08 95       	ret
   default:
		  LCD_Write_String("Unknown ");
 5c6:	85 eb       	ldi	r24, 0xB5	; 181
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
 5ce:	08 95       	ret

000005d0 <RTC_display_data>:
  }
}	
void RTC_display_data(void)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
	LCD_Command(LCD_CLEAR);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Command>
	LCD_SetCursor(0,0);
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
	LCD_Write_String(" --------------------------------------");
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
	LCD_SetCursor(0,1);
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
	RTC_displayDate();
 5f2:	0e 94 ac 02 	call	0x558	; 0x558 <RTC_displayDate>
	LCD_SetCursor(10,1);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	8a e0       	ldi	r24, 0x0A	; 10
 5fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
	LCD_Write_String("  ");
 5fe:	88 ea       	ldi	r24, 0xA8	; 168
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
	RTC_displayDay();
 606:	0e 94 b3 02 	call	0x566	; 0x566 <RTC_displayDay>
	LCD_SetCursor(0,2);
 60a:	62 e0       	ldi	r22, 0x02	; 2
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
	RTC_displayTime();
 612:	0e 94 a5 02 	call	0x54a	; 0x54a <RTC_displayTime>
	LCD_SetCursor(0,3);
 616:	63 e0       	ldi	r22, 0x03	; 3
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
	LCD_Write_String("--------------------");
 61e:	83 e1       	ldi	r24, 0x13	; 19
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Write_String>
	for(int i = 0; i < 10; i++)
 626:	c0 e0       	ldi	r28, 0x00	; 0
 628:	d0 e0       	ldi	r29, 0x00	; 0
 62a:	10 c0       	rjmp	.+32     	; 0x64c <RTC_display_data+0x7c>
	{
		LCD_SetCursor(0,2);
 62c:	62 e0       	ldi	r22, 0x02	; 2
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_SetCursor>
		RTC_displayTime();
 634:	0e 94 a5 02 	call	0x54a	; 0x54a <RTC_displayTime>
 638:	2f ef       	ldi	r18, 0xFF	; 255
 63a:	89 e6       	ldi	r24, 0x69	; 105
 63c:	98 e1       	ldi	r25, 0x18	; 24
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <RTC_display_data+0x6e>
 646:	00 c0       	rjmp	.+0      	; 0x648 <RTC_display_data+0x78>
 648:	00 00       	nop
	RTC_displayDay();
	LCD_SetCursor(0,2);
	RTC_displayTime();
	LCD_SetCursor(0,3);
	LCD_Write_String("--------------------");
	for(int i = 0; i < 10; i++)
 64a:	21 96       	adiw	r28, 0x01	; 1
 64c:	ca 30       	cpi	r28, 0x0A	; 10
 64e:	d1 05       	cpc	r29, r1
 650:	6c f3       	brlt	.-38     	; 0x62c <RTC_display_data+0x5c>
		LCD_SetCursor(0,2);
		RTC_displayTime();
		_delay_ms(500);
	}
	
}
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <__tablejump2__>:
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	05 90       	lpm	r0, Z+
 65e:	f4 91       	lpm	r31, Z
 660:	e0 2d       	mov	r30, r0
 662:	09 94       	ijmp

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
