
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00001896  0000192a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008001c2  008001c2  000019ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b6  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001121  00000000  00000000  000041b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015bb  00000000  00000000  000052d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00006894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c6  00000000  00000000  00006d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5b  00000000  00000000  0000764a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000085a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	52 03       	mulsu	r21, r18
      6a:	57 03       	mulsu	r21, r23
      6c:	5c 03       	fmul	r21, r20
      6e:	61 03       	mulsu	r22, r17
      70:	66 03       	mulsu	r22, r22
      72:	6b 03       	fmul	r22, r19
      74:	70 03       	mulsu	r23, r16

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <UltraSonic_Display_Data+0xa2>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <RTC_displayDay+0x32>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <LCD_SetCursor+0x18>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <twi_init+0xe>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	11 e0       	ldi	r17, 0x01	; 1
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	e6 e9       	ldi	r30, 0x96	; 150
     184:	f8 e1       	ldi	r31, 0x18	; 24
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 3c       	cpi	r26, 0xC2	; 194
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	a2 ec       	ldi	r26, 0xC2	; 194
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a6 3e       	cpi	r26, 0xE6	; 230
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
     1a6:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <DHT22_init>:
#include "DHT_22.h"
#include "LCD_Module.h"

// Funci?n para configurar el pin del DHT22
void DHT22_init() {
	DDRD |= (1 << DHT22_PIN);   // Configura el pin como salida
     1ae:	8a b1       	in	r24, 0x0a	; 10
     1b0:	80 68       	ori	r24, 0x80	; 128
     1b2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DHT22_PIN);  // Pone el pin en alto
     1b4:	8b b1       	in	r24, 0x0b	; 11
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ba:	2f ef       	ldi	r18, 0xFF	; 255
     1bc:	81 ee       	ldi	r24, 0xE1	; 225
     1be:	94 e0       	ldi	r25, 0x04	; 4
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	80 40       	sbci	r24, 0x00	; 0
     1c4:	90 40       	sbci	r25, 0x00	; 0
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <DHT22_init+0x12>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <DHT22_init+0x1c>
     1ca:	00 00       	nop
     1cc:	08 95       	ret

000001ce <twi_init>:

//TWI initialize
// bit rate:18
void twi_init(void)
{
	TWBR= 0x12; //set bit rate
     1ce:	82 e1       	ldi	r24, 0x12	; 18
     1d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR |= (1<<TWPS0);
     1d4:	e9 eb       	ldi	r30, 0xB9	; 185
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
	TWCR |= (1<<TWEA) | (1<<TWEN);
     1de:	ec eb       	ldi	r30, 0xBC	; 188
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	84 64       	ori	r24, 0x44	; 68
     1e6:	80 83       	st	Z, r24
	TWAR= 0x00; //set slave address
     1e8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     1ec:	08 95       	ret

000001ee <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
     1ee:	84 ea       	ldi	r24, 0xA4	; 164
     1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
    while (!(TWCR & (1<<TWINT)));   	//Wait for TWINT flag set. This indicates that the
     1f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f8:	88 23       	and	r24, r24
     1fa:	e4 f7       	brge	.-8      	; 0x1f4 <i2c_start+0x6>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
     1fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     200:	88 7f       	andi	r24, 0xF8	; 248
     202:	88 30       	cpi	r24, 0x08	; 8
     204:	11 f4       	brne	.+4      	; 0x20a <i2c_start+0x1c>
	   return(0);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	08 95       	ret
	else		 	  	 				//if problem, transmit the code to PC  to know what's the problem
	{
		return(1);
     20a:	81 e0       	ldi	r24, 0x01	; 1
	}  
}
     20c:	08 95       	ret

0000020e <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);  //Send START condition
     20e:	84 ea       	ldi	r24, 0xA4	; 164
     210:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));   		 //Wait for TWINT flag set. This indicates that the
     214:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     218:	88 23       	and	r24, r24
     21a:	e4 f7       	brge	.-8      	; 0x214 <i2c_repeatStart+0x6>
		  									 //START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)		 //Check value of TWI Status Register
     21c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     220:	88 7f       	andi	r24, 0xF8	; 248
     222:	80 31       	cpi	r24, 0x10	; 16
     224:	11 f4       	brne	.+4      	; 0x22a <i2c_repeatStart+0x1c>
 	   return(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	08 95       	ret
	else
	   return(1);
     22a:	81 e0       	ldi	r24, 0x01	; 1
}
     22c:	08 95       	ret

0000022e <i2c_sendAddress>:
//**************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
     22e:	80 fd       	sbrc	r24, 0
     230:	02 c0       	rjmp	.+4      	; 0x236 <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
     232:	98 e1       	ldi	r25, 0x18	; 24
     234:	01 c0       	rjmp	.+2      	; 0x238 <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
     236:	90 e4       	ldi	r25, 0x40	; 64
   
   TWDR = address; 
     238:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
   TWCR = (1<<TWINT)|(1<<TWEN);	   	   //Load SLA_W into TWDR Register. Clear TWINT bit
     23c:	84 e8       	ldi	r24, 0x84	; 132
     23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     242:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     246:	88 23       	and	r24, r24
     248:	e4 f7       	brge	.-8      	; 0x242 <i2c_sendAddress+0x14>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   	   //Check value of TWI Status Register
     24a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     24e:	88 7f       	andi	r24, 0xF8	; 248
     250:	98 13       	cpse	r25, r24
     252:	02 c0       	rjmp	.+4      	; 0x258 <i2c_sendAddress+0x2a>
   	  return(0);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
   else 
      return(1);
     258:	81 e0       	ldi	r24, 0x01	; 1
}
     25a:	08 95       	ret

0000025c <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
     25c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     260:	84 e8       	ldi	r24, 0x84	; 132
     262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     266:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     26a:	88 23       	and	r24, r24
     26c:	e4 f7       	brge	.-8      	; 0x266 <i2c_sendData+0xa>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
     26e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     272:	88 7f       	andi	r24, 0xF8	; 248
     274:	88 32       	cpi	r24, 0x28	; 40
     276:	11 f0       	breq	.+4      	; 0x27c <i2c_sendData+0x20>
   	  return(1);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	08 95       	ret
   else
      return(0);
     27c:	80 e0       	ldi	r24, 0x00	; 0
}
     27e:	08 95       	ret

00000280 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     280:	84 ec       	ldi	r24, 0xC4	; 196
     282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     286:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     28a:	88 23       	and	r24, r24
     28c:	e4 f7       	brge	.-8      	; 0x286 <i2c_receiveData_ACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
     28e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     292:	88 7f       	andi	r24, 0xF8	; 248
     294:	80 35       	cpi	r24, 0x50	; 80
     296:	19 f4       	brne	.+6      	; 0x29e <i2c_receiveData_ACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
     298:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  return(data);
     29c:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
     29e:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
     2a0:	08 95       	ret

000002a2 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
     2a2:	84 e8       	ldi	r24, 0x84	; 132
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     2a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2ac:	88 23       	and	r24, r24
     2ae:	e4 f7       	brge	.-8      	; 0x2a8 <i2c_receiveData_NACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)   //Check value of TWI Status Register
     2b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2b4:	88 7f       	andi	r24, 0xF8	; 248
     2b6:	88 35       	cpi	r24, 0x58	; 88
     2b8:	19 f4       	brne	.+6      	; 0x2c0 <i2c_receiveData_NACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
     2ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  return(data);
     2be:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)   //Check value of TWI Status Register
   	  return(ERROR_CODE);
     2c0:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
     2c2:	08 95       	ret

000002c4 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     2c4:	84 e9       	ldi	r24, 0x94	; 148
     2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2ca:	08 95       	ret

000002cc <LCD_Command>:
	LCD_Command(LCD_CLEAR);
}

void LCD_Command(unsigned char command)
{
	PORTB &= ~(0x3F);
     2cc:	95 b1       	in	r25, 0x05	; 5
     2ce:	90 7c       	andi	r25, 0xC0	; 192
     2d0:	95 b9       	out	0x05, r25	; 5
	PORTB |= (command & 0x3F);
     2d2:	95 b1       	in	r25, 0x05	; 5
     2d4:	28 2f       	mov	r18, r24
     2d6:	2f 73       	andi	r18, 0x3F	; 63
     2d8:	92 2b       	or	r25, r18
     2da:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
     2dc:	9b b1       	in	r25, 0x0b	; 11
     2de:	93 7f       	andi	r25, 0xF3	; 243
     2e0:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((command >> 4) & 0x0C);
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	82 95       	swap	r24
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	8c 70       	andi	r24, 0x0C	; 12
     2ea:	89 2b       	or	r24, r25
     2ec:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << RS_LCD); //Colocamos RS_LCD en 0
     2ee:	88 b1       	in	r24, 0x08	; 8
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
     2f4:	88 b1       	in	r24, 0x08	; 8
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	85 e3       	ldi	r24, 0x35	; 53
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Command+0x30>
     300:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
     302:	88 b1       	in	r24, 0x08	; 8
     304:	82 60       	ori	r24, 0x02	; 2
     306:	88 b9       	out	0x08, r24	; 8
     308:	8f e8       	ldi	r24, 0x8F	; 143
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_Command+0x40>
     310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_Command+0x46>
     312:	00 00       	nop
     314:	08 95       	ret

00000316 <LCD_Init>:
 */ 
#include "LCD_Module.h"

void LCD_Init()
{
	DDRB |= 0x3F; 
     316:	84 b1       	in	r24, 0x04	; 4
     318:	8f 63       	ori	r24, 0x3F	; 63
     31a:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0x0C;
     31c:	8a b1       	in	r24, 0x0a	; 10
     31e:	8c 60       	ori	r24, 0x0C	; 12
     320:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<RS_LCD) | (1 << EN_LCD);
     322:	87 b1       	in	r24, 0x07	; 7
     324:	83 60       	ori	r24, 0x03	; 3
     326:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     328:	8f e5       	ldi	r24, 0x5F	; 95
     32a:	9a ee       	ldi	r25, 0xEA	; 234
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_Init+0x16>
     330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_Init+0x1c>
     332:	00 00       	nop
	
	//Comandos Iniciales al encender EL LCD
	_delay_ms(15);
	LCD_Command(0x30);
     334:	80 e3       	ldi	r24, 0x30	; 48
     336:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	90 e4       	ldi	r25, 0x40	; 64
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <LCD_Init+0x28>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_Init+0x2e>
     344:	00 00       	nop
	_delay_ms(4.1);
	LCD_Command(0x30);
     346:	80 e3       	ldi	r24, 0x30	; 48
     348:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	8f e8       	ldi	r24, 0x8F	; 143
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <LCD_Init+0x3a>
     354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Init+0x40>
     356:	00 00       	nop
	_delay_us(100);
	LCD_Command(0x30);
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	
	//Comandos para configurar EL LCD
	LCD_Command(LCD_INTERFACE_DATA1);
     35e:	88 e3       	ldi	r24, 0x38	; 56
     360:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	LCD_Command(LCD_DISPLAY_ON_CURSOR_OF);
     364:	8c e0       	ldi	r24, 0x0C	; 12
     366:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	LCD_Command(LCD_CLEAR);
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
     370:	08 95       	ret

00000372 <LCD_Write_Char>:
	_delay_us(100);
}

void LCD_Write_Char(unsigned char character)
{
	PORTC |= (1 << RS_LCD);
     372:	98 b1       	in	r25, 0x08	; 8
     374:	91 60       	ori	r25, 0x01	; 1
     376:	98 b9       	out	0x08, r25	; 8
	PORTB &= ~(0x3F);
     378:	95 b1       	in	r25, 0x05	; 5
     37a:	90 7c       	andi	r25, 0xC0	; 192
     37c:	95 b9       	out	0x05, r25	; 5
	PORTB |= (character & 0x3F);
     37e:	95 b1       	in	r25, 0x05	; 5
     380:	28 2f       	mov	r18, r24
     382:	2f 73       	andi	r18, 0x3F	; 63
     384:	92 2b       	or	r25, r18
     386:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
     388:	9b b1       	in	r25, 0x0b	; 11
     38a:	93 7f       	andi	r25, 0xF3	; 243
     38c:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((character >> 4) & 0x0C);
     38e:	9b b1       	in	r25, 0x0b	; 11
     390:	82 95       	swap	r24
     392:	8f 70       	andi	r24, 0x0F	; 15
     394:	8c 70       	andi	r24, 0x0C	; 12
     396:	89 2b       	or	r24, r25
     398:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
     39a:	88 b1       	in	r24, 0x08	; 8
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	88 b9       	out	0x08, r24	; 8
     3a0:	85 e3       	ldi	r24, 0x35	; 53
     3a2:	8a 95       	dec	r24
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_Write_Char+0x30>
     3a6:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
     3a8:	88 b1       	in	r24, 0x08	; 8
     3aa:	82 60       	ori	r24, 0x02	; 2
     3ac:	88 b9       	out	0x08, r24	; 8
     3ae:	8f e8       	ldi	r24, 0x8F	; 143
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_Write_Char+0x40>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_Write_Char+0x46>
     3b8:	00 00       	nop
     3ba:	08 95       	ret

000003bc <LCD_Write_String>:
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
	while(*str)
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <LCD_Write_String+0xe>
	{
		LCD_Write_Char(*str++);
     3c4:	21 96       	adiw	r28, 0x01	; 1
     3c6:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_Write_Char>
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
	while(*str)
     3ca:	88 81       	ld	r24, Y
     3cc:	81 11       	cpse	r24, r1
     3ce:	fa cf       	rjmp	.-12     	; 0x3c4 <LCD_Write_String+0x8>
	{
		LCD_Write_Char(*str++);
	}
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <LCD_SetCursor>:
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <LCD_SetCursor+0x10>
     3da:	63 30       	cpi	r22, 0x03	; 3
     3dc:	31 f0       	breq	.+12     	; 0x3ea <LCD_SetCursor+0x14>
     3de:	61 30       	cpi	r22, 0x01	; 1
     3e0:	31 f0       	breq	.+12     	; 0x3ee <LCD_SetCursor+0x18>
		case 0: address = 0x00; break;  // Primera fila
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <LCD_SetCursor+0x1a>
		case 1: address = 0x40; break;  // Segunda fila
		case 2: address = 0x14; break;  // Tercera fila 
     3e6:	94 e1       	ldi	r25, 0x14	; 20
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_SetCursor+0x1a>
		case 3: address = 0x54; break;  // Cuarta fila 
     3ea:	94 e5       	ldi	r25, 0x54	; 84
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <LCD_SetCursor+0x1a>
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
		case 0: address = 0x00; break;  // Primera fila
		case 1: address = 0x40; break;  // Segunda fila
     3ee:	90 e4       	ldi	r25, 0x40	; 64
		case 2: address = 0x14; break;  // Tercera fila 
		case 3: address = 0x54; break;  // Cuarta fila 
		default: address = 0x00;
	}
	LCD_Command(LCD_CHANGE_LINE | (address + col));  // Comando "Set DDRAM Address"
     3f0:	89 0f       	add	r24, r25
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
     3f8:	08 95       	ret

000003fa <main>:
#include "Timer2.h"
#include "Timer0.h"

#define ONE_SECOND 1000000UL
int main(void)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	64 97       	sbiw	r28, 0x14	; 20
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	DDRC |= 0x30; //I2C PORTS
     40e:	87 b1       	in	r24, 0x07	; 7
     410:	80 63       	ori	r24, 0x30	; 48
     412:	87 b9       	out	0x07, r24	; 7
	twi_init();
     414:	0e 94 e7 00 	call	0x1ce	; 0x1ce <twi_init>
	LCD_Init();
     418:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Init>
	UltraSonicInit();
     41c:	0e 94 30 04 	call	0x860	; 0x860 <UltraSonicInit>
	Timer1_Init();
     420:	0e 94 b0 03 	call	0x760	; 0x760 <Timer1_Init>
	DHT22_init();
     424:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DHT22_init>
	Roll_Init();
     428:	0e 94 6f 02 	call	0x4de	; 0x4de <Roll_Init>
	Timer2_Init();
     42c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Timer2_Init>
	Timer0_Init();
     430:	0e 94 a4 03 	call	0x748	; 0x748 <Timer0_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	81 ee       	ldi	r24, 0xE1	; 225
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	80 40       	sbci	r24, 0x00	; 0
     43e:	90 40       	sbci	r25, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     444:	00 00       	nop
		unsigned char counter = 0;
		float AverageUltraSonic  = 0;
		unsigned char buffer[20];
		
		
		Timer1_reset();
     446:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Timer1_reset>
	
	while (1)
	{
		unsigned char flag_check = 0;
		unsigned char counter = 0;
		float AverageUltraSonic  = 0;
     44a:	c1 2c       	mov	r12, r1
     44c:	d1 2c       	mov	r13, r1
     44e:	76 01       	movw	r14, r12
	_delay_ms(100);
	
	while (1)
	{
		unsigned char flag_check = 0;
		unsigned char counter = 0;
     450:	b1 2c       	mov	r11, r1
	//RTC_updateDate("10/04/2025-5");
	_delay_ms(100);
	
	while (1)
	{
		unsigned char flag_check = 0;
     452:	a1 2c       	mov	r10, r1
		float AverageUltraSonic  = 0;
		unsigned char buffer[20];
		
		
		Timer1_reset();
		while(flag_check == 0)
     454:	40 c0       	rjmp	.+128    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{
			RTC_display_data();
     456:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <RTC_display_data>
			if(Timer1_getTime() >= ONE_SECOND)
     45a:	0e 94 ca 03 	call	0x794	; 0x794 <Timer1_getTime>
     45e:	60 34       	cpi	r22, 0x40	; 64
     460:	72 44       	sbci	r23, 0x42	; 66
     462:	8f 40       	sbci	r24, 0x0F	; 15
     464:	91 05       	cpc	r25, r1
     466:	40 f0       	brcs	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			{
				counter++;
     468:	b3 94       	inc	r11
				AverageUltraSonic = UltraSonic_AvarageData(counter);
     46a:	8b 2d       	mov	r24, r11
     46c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <UltraSonic_AvarageData>
     470:	6b 01       	movw	r12, r22
     472:	7c 01       	movw	r14, r24
				Timer1_reset();
     474:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Timer1_reset>
			}
			if(counter >= 10)
     478:	89 e0       	ldi	r24, 0x09	; 9
     47a:	8b 15       	cp	r24, r11
     47c:	30 f4       	brcc	.+12     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			{
				UltraSonic_Display_Data(AverageUltraSonic);
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	0e 94 97 04 	call	0x92e	; 0x92e <UltraSonic_Display_Data>
				flag_check = 1;
     486:	aa 24       	eor	r10, r10
     488:	a3 94       	inc	r10
			}
			LCD_SetCursor(0,2);
     48a:	62 e0       	ldi	r22, 0x02	; 2
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
			sprintf(buffer,"time: %ul",Timer1_getTime());
     492:	0e 94 ca 03 	call	0x794	; 0x794 <Timer1_getTime>
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	7f 93       	push	r23
     49c:	6f 93       	push	r22
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	8e 01       	movw	r16, r28
     4a8:	0f 5f       	subi	r16, 0xFF	; 255
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     4ac:	1f 93       	push	r17
     4ae:	0f 93       	push	r16
     4b0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <sprintf>
			LCD_Write_String(buffer);
     4b4:	c8 01       	movw	r24, r16
     4b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	21 ee       	ldi	r18, 0xE1	; 225
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	91 50       	subi	r25, 0x01	; 1
     4c2:	20 40       	sbci	r18, 0x00	; 0
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     4ca:	00 00       	nop
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
		float AverageUltraSonic  = 0;
		unsigned char buffer[20];
		
		
		Timer1_reset();
		while(flag_check == 0)
     4d6:	aa 20       	and	r10, r10
     4d8:	09 f4       	brne	.+2      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4da:	bd cf       	rjmp	.-134    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     4dc:	b4 cf       	rjmp	.-152    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>

000004de <Roll_Init>:
	}
	return 0;
}
void Roll_Init()
{
	DDRD &= ~(1 << ROLL_PIN);
     4de:	8a b1       	in	r24, 0x0a	; 10
     4e0:	8f 7b       	andi	r24, 0xBF	; 191
     4e2:	8a b9       	out	0x0a, r24	; 10
     4e4:	08 95       	ret

000004e6 <RTC_read>:

//******************************************************************
//Function to read RTC data.
//******************************************************************    
void RTC_read(void)
{
     4e6:	cf 93       	push	r28

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     4e8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2c_start>
   if(errorStatus == 1)
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <RTC_read+0x10>
   {
   	 i2c_stop();
     4f0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	 return;
     4f4:	37 c0       	rjmp	.+110    	; 0x564 <RTC_read+0x7e>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     4f6:	80 ed       	ldi	r24, 0xD0	; 208
     4f8:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_sendAddress>
   
   if(errorStatus == 1)
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	19 f4       	brne	.+6      	; 0x506 <RTC_read+0x20>
   {
	 i2c_stop();
     500:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	 return;
     504:	2f c0       	rjmp	.+94     	; 0x564 <RTC_read+0x7e>
   } 
   
   errorStatus = i2c_sendData(0x00);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 2e 01 	call	0x25c	; 0x25c <i2c_sendData>
   if(errorStatus == 1)
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	19 f4       	brne	.+6      	; 0x516 <RTC_read+0x30>
   {
	 i2c_stop();
     510:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	 return;
     514:	27 c0       	rjmp	.+78     	; 0x564 <RTC_read+0x7e>
   } 

    errorStatus = i2c_repeatStart();
     516:	0e 94 07 01 	call	0x20e	; 0x20e <i2c_repeatStart>
   if(errorStatus == 1)
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	19 f4       	brne	.+6      	; 0x524 <RTC_read+0x3e>
   {
   	 i2c_stop();
     51e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	 return;
     522:	20 c0       	rjmp	.+64     	; 0x564 <RTC_read+0x7e>
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
     524:	81 ed       	ldi	r24, 0xD1	; 209
     526:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_sendAddress>
   
   if(errorStatus == 1)
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	b1 f4       	brne	.+44     	; 0x55a <RTC_read+0x74>
   {
	 i2c_stop();
     52e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	 return;
     532:	18 c0       	rjmp	.+48     	; 0x564 <RTC_read+0x7e>
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
     534:	c6 30       	cpi	r28, 0x06	; 6
     536:	19 f4       	brne	.+6      	; 0x53e <RTC_read+0x58>
	   	  data = i2c_receiveData_NACK();
     538:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_receiveData_NACK>
     53c:	02 c0       	rjmp	.+4      	; 0x542 <RTC_read+0x5c>
	  else
	  	  data = i2c_receiveData_ACK();
     53e:	0e 94 40 01 	call	0x280	; 0x280 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
     542:	8e 37       	cpi	r24, 0x7E	; 126
     544:	19 f4       	brne	.+6      	; 0x54c <RTC_read+0x66>
   	  {
			i2c_stop();
     546:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
	   		return;
     54a:	0c c0       	rjmp	.+24     	; 0x564 <RTC_read+0x7e>
   	  }
	  
	  rtc_register[i] = data;
     54c:	ec 2f       	mov	r30, r28
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	e8 53       	subi	r30, 0x38	; 56
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	80 83       	st	Z, r24
   {
	 i2c_stop();
	 return;
   } 
 
    for(i=0;i<7;i++)
     556:	cf 5f       	subi	r28, 0xFF	; 255
     558:	01 c0       	rjmp	.+2      	; 0x55c <RTC_read+0x76>
     55a:	c0 e0       	ldi	r28, 0x00	; 0
     55c:	c7 30       	cpi	r28, 0x07	; 7
     55e:	50 f3       	brcs	.-44     	; 0x534 <RTC_read+0x4e>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
     560:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
}	  
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <RTC_getTime>:
//******************************************************************
//Function to read time data.
//****************************************************************** 
void RTC_getTime(void)
{
   RTC_read();
     568:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RTC_read>
   time[9] = 0x00;	  //NIL
     56c:	ef ec       	ldi	r30, 0xCF	; 207
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	11 86       	std	Z+9, r1	; 0x09
   time[8] = ' ';
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	80 87       	std	Z+8, r24	; 0x08
   time[7] = (SECONDS & 0x0f) | 0x30;		//seconds(1's)
     576:	a8 ec       	ldi	r26, 0xC8	; 200
     578:	b1 e0       	ldi	r27, 0x01	; 1
     57a:	8c 91       	ld	r24, X
     57c:	98 2f       	mov	r25, r24
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	90 63       	ori	r25, 0x30	; 48
     582:	97 83       	std	Z+7, r25	; 0x07
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30;		//seconds(10's)
     584:	80 77       	andi	r24, 0x70	; 112
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	95 95       	asr	r25
     58a:	87 95       	ror	r24
     58c:	95 95       	asr	r25
     58e:	87 95       	ror	r24
     590:	95 95       	asr	r25
     592:	87 95       	ror	r24
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	80 63       	ori	r24, 0x30	; 48
     59a:	86 83       	std	Z+6, r24	; 0x06
   time[5] = ':';
     59c:	2a e3       	ldi	r18, 0x3A	; 58
     59e:	25 83       	std	Z+5, r18	; 0x05
   
   time[4] = (MINUTES & 0x0f) | 0x30;
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	8c 91       	ld	r24, X
     5a4:	11 97       	sbiw	r26, 0x01	; 1
     5a6:	98 2f       	mov	r25, r24
     5a8:	9f 70       	andi	r25, 0x0F	; 15
     5aa:	90 63       	ori	r25, 0x30	; 48
     5ac:	94 83       	std	Z+4, r25	; 0x04
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
     5ae:	80 77       	andi	r24, 0x70	; 112
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	95 95       	asr	r25
     5b4:	87 95       	ror	r24
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	95 95       	asr	r25
     5bc:	87 95       	ror	r24
     5be:	95 95       	asr	r25
     5c0:	87 95       	ror	r24
     5c2:	80 63       	ori	r24, 0x30	; 48
     5c4:	83 83       	std	Z+3, r24	; 0x03
   time[2] = ':'; 
     5c6:	22 83       	std	Z+2, r18	; 0x02
   
   time[1] = (HOURS & 0x0f) | 0x30;	
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	8c 91       	ld	r24, X
     5cc:	98 2f       	mov	r25, r24
     5ce:	9f 70       	andi	r25, 0x0F	; 15
     5d0:	90 63       	ori	r25, 0x30	; 48
     5d2:	91 83       	std	Z+1, r25	; 0x01
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
     5d4:	80 73       	andi	r24, 0x30	; 48
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	95 95       	asr	r25
     5da:	87 95       	ror	r24
     5dc:	95 95       	asr	r25
     5de:	87 95       	ror	r24
     5e0:	95 95       	asr	r25
     5e2:	87 95       	ror	r24
     5e4:	95 95       	asr	r25
     5e6:	87 95       	ror	r24
     5e8:	80 63       	ori	r24, 0x30	; 48
     5ea:	80 83       	st	Z, r24
     5ec:	08 95       	ret

000005ee <RTC_getDate>:
//******************************************************************
//Function to read date data
//****************************************************************** 
void RTC_getDate(void)
{
  RTC_read();
     5ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RTC_read>
  date[11] = 0x00;  //NIL
     5f2:	ea ed       	ldi	r30, 0xDA	; 218
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
  date[11] = ' ';
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	83 87       	std	Z+11, r24	; 0x0b
  date[9] = (YEAR & 0x0f) | 0x30;
     5fa:	a8 ec       	ldi	r26, 0xC8	; 200
     5fc:	b1 e0       	ldi	r27, 0x01	; 1
     5fe:	16 96       	adiw	r26, 0x06	; 6
     600:	8c 91       	ld	r24, X
     602:	16 97       	sbiw	r26, 0x06	; 6
     604:	98 2f       	mov	r25, r24
     606:	9f 70       	andi	r25, 0x0F	; 15
     608:	90 63       	ori	r25, 0x30	; 48
     60a:	91 87       	std	Z+9, r25	; 0x09
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
     60c:	82 95       	swap	r24
     60e:	8f 70       	andi	r24, 0x0F	; 15
     610:	80 63       	ori	r24, 0x30	; 48
     612:	80 87       	std	Z+8, r24	; 0x08
  date[7] = '0';
     614:	80 e3       	ldi	r24, 0x30	; 48
     616:	87 83       	std	Z+7, r24	; 0x07
  date[6] = '2';
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	86 83       	std	Z+6, r24	; 0x06
  date[5] = '/';
     61c:	2f e2       	ldi	r18, 0x2F	; 47
     61e:	25 83       	std	Z+5, r18	; 0x05
  date[4] = (MONTH & 0x0f) | 0x30;
     620:	15 96       	adiw	r26, 0x05	; 5
     622:	8c 91       	ld	r24, X
     624:	15 97       	sbiw	r26, 0x05	; 5
     626:	98 2f       	mov	r25, r24
     628:	9f 70       	andi	r25, 0x0F	; 15
     62a:	90 63       	ori	r25, 0x30	; 48
     62c:	94 83       	std	Z+4, r25	; 0x04
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
     62e:	80 71       	andi	r24, 0x10	; 16
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	95 95       	asr	r25
     634:	87 95       	ror	r24
     636:	95 95       	asr	r25
     638:	87 95       	ror	r24
     63a:	95 95       	asr	r25
     63c:	87 95       	ror	r24
     63e:	95 95       	asr	r25
     640:	87 95       	ror	r24
     642:	80 63       	ori	r24, 0x30	; 48
     644:	83 83       	std	Z+3, r24	; 0x03
  date[2] = '/';
     646:	22 83       	std	Z+2, r18	; 0x02
  date[1] = (DATE & 0x0f) | 0x30;
     648:	14 96       	adiw	r26, 0x04	; 4
     64a:	8c 91       	ld	r24, X
     64c:	98 2f       	mov	r25, r24
     64e:	9f 70       	andi	r25, 0x0F	; 15
     650:	90 63       	ori	r25, 0x30	; 48
     652:	91 83       	std	Z+1, r25	; 0x01
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
     654:	80 73       	andi	r24, 0x30	; 48
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	95 95       	asr	r25
     65a:	87 95       	ror	r24
     65c:	95 95       	asr	r25
     65e:	87 95       	ror	r24
     660:	95 95       	asr	r25
     662:	87 95       	ror	r24
     664:	95 95       	asr	r25
     666:	87 95       	ror	r24
     668:	80 63       	ori	r24, 0x30	; 48
     66a:	80 83       	st	Z, r24
     66c:	08 95       	ret

0000066e <RTC_displayTime>:
//******************************************************************
//Function to display time. 
//****************************************************************** 
void RTC_displayTime(void)
{
  RTC_getTime();
     66e:	0e 94 b4 02 	call	0x568	; 0x568 <RTC_getTime>
  
  LCD_Write_String(time);
     672:	8f ec       	ldi	r24, 0xCF	; 207
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
     67a:	08 95       	ret

0000067c <RTC_displayDate>:
//******************************************************************
//Function to display date
//****************************************************************** 
void RTC_displayDate(void)
{
	RTC_getDate();
     67c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RTC_getDate>
	LCD_Write_String(date);
     680:	8a ed       	ldi	r24, 0xDA	; 218
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
     688:	08 95       	ret

0000068a <RTC_displayDay>:
}

void RTC_displayDay(void)
{
  switch(DAY)
     68a:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <rtc_register+0x3>
     68e:	8e 2f       	mov	r24, r30
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	e7 30       	cpi	r30, 0x07	; 7
     698:	f1 05       	cpc	r31, r1
     69a:	38 f5       	brcc	.+78     	; 0x6ea <RTC_displayDay+0x60>
     69c:	ec 5c       	subi	r30, 0xCC	; 204
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__tablejump2__>
  {
   case 1:
		  LCD_Write_String("Sunday ");
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 
     6ac:	08 95       	ret
   case 2:
		  LCD_Write_String("Monday ");
     6ae:	82 e1       	ldi	r24, 0x12	; 18
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 
     6b6:	08 95       	ret
   case 3:
		  LCD_Write_String("Tuesday ");
     6b8:	8a e1       	ldi	r24, 0x1A	; 26
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 
     6c0:	08 95       	ret
   case 4:
		  LCD_Write_String("Wednesday ");
     6c2:	83 e2       	ldi	r24, 0x23	; 35
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 
     6ca:	08 95       	ret
   case 5:
		  LCD_Write_String("Thursday ");
     6cc:	8e e2       	ldi	r24, 0x2E	; 46
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 		  
     6d4:	08 95       	ret
   case 6:
		  LCD_Write_String("Friday  ");
     6d6:	88 e3       	ldi	r24, 0x38	; 56
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 		  
     6de:	08 95       	ret
   case 7:
		  LCD_Write_String("Saturday ");
     6e0:	81 e4       	ldi	r24, 0x41	; 65
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
          break; 
     6e8:	08 95       	ret
   default:
		  LCD_Write_String("Unknown ");
     6ea:	8b e4       	ldi	r24, 0x4B	; 75
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
     6f2:	08 95       	ret

000006f4 <RTC_display_data>:
  }
}	
void RTC_display_data(void)
{
	LCD_Command(LCD_CLEAR);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	LCD_SetCursor(0,0);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String(" --------------------------------------");
     702:	84 e5       	ldi	r24, 0x54	; 84
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	LCD_SetCursor(0,1);
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	RTC_displayDate();
     712:	0e 94 3e 03 	call	0x67c	; 0x67c <RTC_displayDate>
	LCD_SetCursor(10,1);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String("  ");
     71e:	8e eb       	ldi	r24, 0xBE	; 190
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	RTC_displayDay();
     726:	0e 94 45 03 	call	0x68a	; 0x68a <RTC_displayDay>
	LCD_SetCursor(0,2);
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	RTC_displayTime();
     732:	0e 94 37 03 	call	0x66e	; 0x66e <RTC_displayTime>
	LCD_SetCursor(0,3);
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String("--------------------");	
     73e:	87 e6       	ldi	r24, 0x67	; 103
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
     746:	08 95       	ret

00000748 <Timer0_Init>:

volatile unsigned int overflow_count0 = 0;

void Timer0_Init()
{
	TCCR0A = 0; //Modo normal
     748:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (0 << CS01) | (1<< CS00); //preescaler 1024 Cada TICK 64us
     74a:	85 b5       	in	r24, 0x25	; 37
     74c:	85 60       	ori	r24, 0x05	; 5
     74e:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << WGM02);
     750:	85 b5       	in	r24, 0x25	; 37
     752:	87 7f       	andi	r24, 0xF7	; 247
     754:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //Reiniciar Contador
     756:	16 bc       	out	0x26, r1	; 38
	TIFR0 |= (1 << TOV0); //Reiniciar OVERFLOW FLAG
     758:	85 b3       	in	r24, 0x15	; 21
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	85 bb       	out	0x15, r24	; 21
     75e:	08 95       	ret

00000760 <Timer1_Init>:

#include <avr/io.h>

// Función para configurar Timer1
void Timer1_Init() {
	TCCR1A = 0;             // Modo normal
     760:	a0 e8       	ldi	r26, 0x80	; 128
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	1c 92       	st	X, r1
	TCCR1B |= (1 << CS12) | (0 << CS11) | (1 << CS10);   // Prescaler 1024
     766:	e1 e8       	ldi	r30, 0x81	; 129
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	85 60       	ori	r24, 0x05	; 5
     76e:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << WGM13);
     770:	80 81       	ld	r24, Z
     772:	8f 7e       	andi	r24, 0xEF	; 239
     774:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << WGM12);
     776:	80 81       	ld	r24, Z
     778:	87 7f       	andi	r24, 0xF7	; 247
     77a:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << WGM11);
     77c:	8c 91       	ld	r24, X
     77e:	8d 7f       	andi	r24, 0xFD	; 253
     780:	8c 93       	st	X, r24
	TCCR1A &= ~(1 << WGM10);
     782:	8c 91       	ld	r24, X
     784:	8e 7f       	andi	r24, 0xFE	; 254
     786:	8c 93       	st	X, r24
     788:	08 95       	ret

0000078a <Timer1_getCount>:
	return tiempo_us;
}

unsigned char Timer1_getCount()
{
	return TCNT1;
     78a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     78e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
}
     792:	08 95       	ret

00000794 <Timer1_getTime>:
	TCCR1A &= ~(1 << WGM10);
}

unsigned long int  Timer1_getTime()
{
	unsigned long int tiempo_us = Timer1_getCount() * 64;
     794:	0e 94 c5 03 	call	0x78a	; 0x78a <Timer1_getCount>
     798:	20 e4       	ldi	r18, 0x40	; 64
     79a:	82 9f       	mul	r24, r18
     79c:	c0 01       	movw	r24, r0
     79e:	11 24       	eor	r1, r1
     7a0:	bc 01       	movw	r22, r24
     7a2:	99 0f       	add	r25, r25
     7a4:	88 0b       	sbc	r24, r24
     7a6:	99 0b       	sbc	r25, r25
	return tiempo_us;
}
     7a8:	08 95       	ret

000007aa <Timer1_reset>:
	return TCNT1;
}

void Timer1_reset()
{
	TCNT1 = 0;
     7aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     7ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     7b2:	08 95       	ret

000007b4 <Timer2_Init>:

volatile unsigned int overflow_count2 = 0;

void Timer2_Init()
{
	TCCR2A = 0; //Modo normal
     7b4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (0 << CS22) | (1 << CS21) | (0<< CS20); //preescaler 8 Cada TICK 0.5us
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 0; //Reiniciar Contador
     7be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TIFR2 |= (1 << TOV2); //Reiniciar OVERFLOW FLAG
     7c2:	87 b3       	in	r24, 0x17	; 23
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	87 bb       	out	0x17, r24	; 23
     7c8:	08 95       	ret

000007ca <Timer2_getCount>:
	return tiempo_us;
}

unsigned char Timer2_getCount()
{
	return TCNT2;
     7ca:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
}
     7ce:	08 95       	ret

000007d0 <Timer2_getTime>:
	TCNT2 = 0; //Reiniciar Contador
	TIFR2 |= (1 << TOV2); //Reiniciar OVERFLOW FLAG
}

unsigned int Timer2_getTime()
{
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
	if(TIFR2 & (1 << TOV2))
     7dc:	b8 9b       	sbis	0x17, 0	; 23
     7de:	0c c0       	rjmp	.+24     	; 0x7f8 <Timer2_getTime+0x28>
	{
		overflow_count2++;
     7e0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
     7e4:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x1>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <__data_end+0x1>
     7ee:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
		TIFR2 |= (1 << TOV2);
     7f2:	87 b3       	in	r24, 0x17	; 23
     7f4:	81 60       	ori	r24, 0x01	; 1
     7f6:	87 bb       	out	0x17, r24	; 23
	}
	unsigned long int tiempo_us = (overflow_count2 * 128) + (Timer2_getCount() * 0.5);
     7f8:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <__data_end>
     7fc:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <__data_end+0x1>
     800:	eb 01       	movw	r28, r22
     802:	d6 95       	lsr	r29
     804:	dc 2f       	mov	r29, r28
     806:	cc 27       	eor	r28, r28
     808:	d7 95       	ror	r29
     80a:	c7 95       	ror	r28
     80c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Timer2_getCount>
     810:	68 2f       	mov	r22, r24
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatsisf>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	0e 94 9a 06 	call	0xd34	; 0xd34 <__mulsf3>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24
     82c:	be 01       	movw	r22, r28
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatunsisf>
     836:	a7 01       	movw	r20, r14
     838:	96 01       	movw	r18, r12
     83a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__addsf3>
     83e:	0e 94 dd 05 	call	0xbba	; 0xbba <__fixunssfsi>
	return tiempo_us;
}
     842:	cb 01       	movw	r24, r22
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <Timer2_reset>:
	return TCNT2;
}

void Timer2_reset()
{
	TCNT2 = 0;
     852:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	overflow_count2 = 0;
     856:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <__data_end+0x1>
     85a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
     85e:	08 95       	ret

00000860 <UltraSonicInit>:
#include <stdio.h>

volatile float dataCounter = 0;
void UltraSonicInit()
{
	DDRC |= (1 << TRIGGER);
     860:	87 b1       	in	r24, 0x07	; 7
     862:	84 60       	ori	r24, 0x04	; 4
     864:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << ECHO);
     866:	87 b1       	in	r24, 0x07	; 7
     868:	87 7f       	andi	r24, 0xF7	; 247
     86a:	87 b9       	out	0x07, r24	; 7
     86c:	08 95       	ret

0000086e <measure_pulse_width>:
	distance = ((float)counter) / 58.0f;  // Formula: (us / 58) = cm
	
	return distance;
}
unsigned int measure_pulse_width() 
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
	unsigned int start_time, end_time;
	// Esperar flanco bajo (estado inicial alto)
	while (!(PINC & (1 << ECHO)));
     872:	33 9b       	sbis	0x06, 3	; 6
     874:	fe cf       	rjmp	.-4      	; 0x872 <measure_pulse_width+0x4>
	
	// Guardar tiempo de inicio
	Timer2_reset();              // Reiniciar contador
     876:	0e 94 29 04 	call	0x852	; 0x852 <Timer2_reset>
	start_time = Timer2_getTime();     // Leer timer (casi cero)
     87a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer2_getTime>
     87e:	ec 01       	movw	r28, r24
		
	while (PINC & (1 << ECHO)) //PIND & (1 << ECHO)
     880:	02 c0       	rjmp	.+4      	; 0x886 <measure_pulse_width+0x18>
	{
		end_time = Timer2_getTime();
     882:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer2_getTime>
	
	// Guardar tiempo de inicio
	Timer2_reset();              // Reiniciar contador
	start_time = Timer2_getTime();     // Leer timer (casi cero)
		
	while (PINC & (1 << ECHO)) //PIND & (1 << ECHO)
     886:	33 99       	sbic	0x06, 3	; 6
     888:	fc cf       	rjmp	.-8      	; 0x882 <measure_pulse_width+0x14>
	{
		end_time = Timer2_getTime();
	}
	end_time = Timer2_getTime();
     88a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer2_getTime>
	// Guardar tiempo de finalizaci?n
	
	// Calcular ancho del pulso
	return end_time - start_time;
}
     88e:	8c 1b       	sub	r24, r28
     890:	9d 0b       	sbc	r25, r29
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <GetDistance>:
float GetDistance()
{
	unsigned short int counter = 0;
	
	float distance = 0;
	PORTC |= (1 << TRIGGER);
     898:	88 b1       	in	r24, 0x08	; 8
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89e:	80 e5       	ldi	r24, 0x50	; 80
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <GetDistance+0x8>
	_delay_us(15);
	PORTC &= ~(1 << TRIGGER);
     8a4:	88 b1       	in	r24, 0x08	; 8
     8a6:	8b 7f       	andi	r24, 0xFB	; 251
     8a8:	88 b9       	out	0x08, r24	; 8

	counter = measure_pulse_width();
     8aa:	0e 94 37 04 	call	0x86e	; 0x86e <measure_pulse_width>
	// Calcular distancia (en cm)
	distance = ((float)counter) / 58.0f;  // Formula: (us / 58) = cm
     8ae:	bc 01       	movw	r22, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatunsisf>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	48 e6       	ldi	r20, 0x68	; 104
     8be:	52 e4       	ldi	r21, 0x42	; 66
     8c0:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
	
	return distance;
}
     8c4:	08 95       	ret

000008c6 <UltraSonic_AvarageData>:
	// Calcular ancho del pulso
	return end_time - start_time;
}

float UltraSonic_AvarageData(unsigned char counter)
{
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	cf 93       	push	r28
     8d0:	c8 2f       	mov	r28, r24
	dataCounter+= GetDistance();
     8d2:	0e 94 4c 04 	call	0x898	; 0x898 <GetDistance>
     8d6:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <dataCounter>
     8da:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <dataCounter+0x1>
     8de:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <dataCounter+0x2>
     8e2:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <dataCounter+0x3>
     8e6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__addsf3>
     8ea:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <dataCounter>
     8ee:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <dataCounter+0x1>
     8f2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <dataCounter+0x2>
     8f6:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <dataCounter+0x3>
	float AvarageData = dataCounter / counter;
     8fa:	c0 90 c4 01 	lds	r12, 0x01C4	; 0x8001c4 <dataCounter>
     8fe:	d0 90 c5 01 	lds	r13, 0x01C5	; 0x8001c5 <dataCounter+0x1>
     902:	e0 90 c6 01 	lds	r14, 0x01C6	; 0x8001c6 <dataCounter+0x2>
     906:	f0 90 c7 01 	lds	r15, 0x01C7	; 0x8001c7 <dataCounter+0x3>
     90a:	6c 2f       	mov	r22, r28
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatsisf>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	c7 01       	movw	r24, r14
     91c:	b6 01       	movw	r22, r12
     91e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
	return AvarageData;
}
     922:	cf 91       	pop	r28
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <UltraSonic_Display_Data>:

void UltraSonic_Display_Data(float average)
{
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	64 97       	sbiw	r28, 0x14	; 20
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	6b 01       	movw	r12, r22
     950:	7c 01       	movw	r14, r24
	float distancia_basura = 0;
	unsigned char buffer[20];
	
	distancia_basura = average;
	 
	LCD_Command(LCD_CLEAR);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Command>
	LCD_SetCursor(0,0);
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String("---------------------------------------");
     960:	8c e7       	ldi	r24, 0x7C	; 124
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	dtostrf(distancia_basura, 5, 2, buffer);
     968:	8e 01       	movw	r16, r28
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	45 e0       	ldi	r20, 0x05	; 5
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <dtostrf>
	LCD_SetCursor(0,1);
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String(" Distance: ");
     986:	84 ea       	ldi	r24, 0xA4	; 164
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	LCD_Write_String(buffer);
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	LCD_Write_String(" cm");
     994:	80 eb       	ldi	r24, 0xB0	; 176
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	LCD_SetCursor(0,2);
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String("            ");
     9a4:	84 eb       	ldi	r24, 0xB4	; 180
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	LCD_SetCursor(0,3);
     9ac:	63 e0       	ldi	r22, 0x03	; 3
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_SetCursor>
	LCD_Write_String("--------------------");
     9b4:	87 e6       	ldi	r24, 0x67	; 103
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9bc:	2f ef       	ldi	r18, 0xFF	; 255
     9be:	8f e4       	ldi	r24, 0x4F	; 79
     9c0:	93 ec       	ldi	r25, 0xC3	; 195
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	80 40       	sbci	r24, 0x00	; 0
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <UltraSonic_Display_Data+0x94>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <UltraSonic_Display_Data+0x9e>
     9cc:	00 00       	nop
	_delay_ms(4000);
	dataCounter = 0;
     9ce:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <dataCounter>
     9d2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <dataCounter+0x1>
     9d6:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <dataCounter+0x2>
     9da:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <dataCounter+0x3>
     9de:	64 96       	adiw	r28, 0x14	; 20
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	08 95       	ret

000009fc <__subsf3>:
     9fc:	50 58       	subi	r21, 0x80	; 128

000009fe <__addsf3>:
     9fe:	bb 27       	eor	r27, r27
     a00:	aa 27       	eor	r26, r26
     a02:	0e 94 16 05 	call	0xa2c	; 0xa2c <__addsf3x>
     a06:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_round>
     a0a:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscA>
     a0e:	38 f0       	brcs	.+14     	; 0xa1e <__addsf3+0x20>
     a10:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscB>
     a14:	20 f0       	brcs	.+8      	; 0xa1e <__addsf3+0x20>
     a16:	39 f4       	brne	.+14     	; 0xa26 <__addsf3+0x28>
     a18:	9f 3f       	cpi	r25, 0xFF	; 255
     a1a:	19 f4       	brne	.+6      	; 0xa22 <__addsf3+0x24>
     a1c:	26 f4       	brtc	.+8      	; 0xa26 <__addsf3+0x28>
     a1e:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_nan>
     a22:	0e f4       	brtc	.+2      	; 0xa26 <__addsf3+0x28>
     a24:	e0 95       	com	r30
     a26:	e7 fb       	bst	r30, 7
     a28:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_inf>

00000a2c <__addsf3x>:
     a2c:	e9 2f       	mov	r30, r25
     a2e:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_split3>
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__addsf3+0xc>
     a34:	ba 17       	cp	r27, r26
     a36:	62 07       	cpc	r22, r18
     a38:	73 07       	cpc	r23, r19
     a3a:	84 07       	cpc	r24, r20
     a3c:	95 07       	cpc	r25, r21
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__addsf3x+0x1c>
     a40:	79 f4       	brne	.+30     	; 0xa60 <__addsf3x+0x34>
     a42:	a6 f5       	brtc	.+104    	; 0xaac <__addsf3x+0x80>
     a44:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_zero>
     a48:	0e f4       	brtc	.+2      	; 0xa4c <__addsf3x+0x20>
     a4a:	e0 95       	com	r30
     a4c:	0b 2e       	mov	r0, r27
     a4e:	ba 2f       	mov	r27, r26
     a50:	a0 2d       	mov	r26, r0
     a52:	0b 01       	movw	r0, r22
     a54:	b9 01       	movw	r22, r18
     a56:	90 01       	movw	r18, r0
     a58:	0c 01       	movw	r0, r24
     a5a:	ca 01       	movw	r24, r20
     a5c:	a0 01       	movw	r20, r0
     a5e:	11 24       	eor	r1, r1
     a60:	ff 27       	eor	r31, r31
     a62:	59 1b       	sub	r21, r25
     a64:	99 f0       	breq	.+38     	; 0xa8c <__addsf3x+0x60>
     a66:	59 3f       	cpi	r21, 0xF9	; 249
     a68:	50 f4       	brcc	.+20     	; 0xa7e <__addsf3x+0x52>
     a6a:	50 3e       	cpi	r21, 0xE0	; 224
     a6c:	68 f1       	brcs	.+90     	; 0xac8 <__addsf3x+0x9c>
     a6e:	1a 16       	cp	r1, r26
     a70:	f0 40       	sbci	r31, 0x00	; 0
     a72:	a2 2f       	mov	r26, r18
     a74:	23 2f       	mov	r18, r19
     a76:	34 2f       	mov	r19, r20
     a78:	44 27       	eor	r20, r20
     a7a:	58 5f       	subi	r21, 0xF8	; 248
     a7c:	f3 cf       	rjmp	.-26     	; 0xa64 <__addsf3x+0x38>
     a7e:	46 95       	lsr	r20
     a80:	37 95       	ror	r19
     a82:	27 95       	ror	r18
     a84:	a7 95       	ror	r26
     a86:	f0 40       	sbci	r31, 0x00	; 0
     a88:	53 95       	inc	r21
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <__addsf3x+0x52>
     a8c:	7e f4       	brtc	.+30     	; 0xaac <__addsf3x+0x80>
     a8e:	1f 16       	cp	r1, r31
     a90:	ba 0b       	sbc	r27, r26
     a92:	62 0b       	sbc	r22, r18
     a94:	73 0b       	sbc	r23, r19
     a96:	84 0b       	sbc	r24, r20
     a98:	ba f0       	brmi	.+46     	; 0xac8 <__addsf3x+0x9c>
     a9a:	91 50       	subi	r25, 0x01	; 1
     a9c:	a1 f0       	breq	.+40     	; 0xac6 <__addsf3x+0x9a>
     a9e:	ff 0f       	add	r31, r31
     aa0:	bb 1f       	adc	r27, r27
     aa2:	66 1f       	adc	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	c2 f7       	brpl	.-16     	; 0xa9a <__addsf3x+0x6e>
     aaa:	0e c0       	rjmp	.+28     	; 0xac8 <__addsf3x+0x9c>
     aac:	ba 0f       	add	r27, r26
     aae:	62 1f       	adc	r22, r18
     ab0:	73 1f       	adc	r23, r19
     ab2:	84 1f       	adc	r24, r20
     ab4:	48 f4       	brcc	.+18     	; 0xac8 <__addsf3x+0x9c>
     ab6:	87 95       	ror	r24
     ab8:	77 95       	ror	r23
     aba:	67 95       	ror	r22
     abc:	b7 95       	ror	r27
     abe:	f7 95       	ror	r31
     ac0:	9e 3f       	cpi	r25, 0xFE	; 254
     ac2:	08 f0       	brcs	.+2      	; 0xac6 <__addsf3x+0x9a>
     ac4:	b0 cf       	rjmp	.-160    	; 0xa26 <__addsf3+0x28>
     ac6:	93 95       	inc	r25
     ac8:	88 0f       	add	r24, r24
     aca:	08 f0       	brcs	.+2      	; 0xace <__addsf3x+0xa2>
     acc:	99 27       	eor	r25, r25
     ace:	ee 0f       	add	r30, r30
     ad0:	97 95       	ror	r25
     ad2:	87 95       	ror	r24
     ad4:	08 95       	ret

00000ad6 <__divsf3>:
     ad6:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3x>
     ada:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_round>
     ade:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscB>
     ae2:	58 f0       	brcs	.+22     	; 0xafa <__divsf3+0x24>
     ae4:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscA>
     ae8:	40 f0       	brcs	.+16     	; 0xafa <__divsf3+0x24>
     aea:	29 f4       	brne	.+10     	; 0xaf6 <__divsf3+0x20>
     aec:	5f 3f       	cpi	r21, 0xFF	; 255
     aee:	29 f0       	breq	.+10     	; 0xafa <__divsf3+0x24>
     af0:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_inf>
     af4:	51 11       	cpse	r21, r1
     af6:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_szero>
     afa:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_nan>

00000afe <__divsf3x>:
     afe:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_split3>
     b02:	68 f3       	brcs	.-38     	; 0xade <__divsf3+0x8>

00000b04 <__divsf3_pse>:
     b04:	99 23       	and	r25, r25
     b06:	b1 f3       	breq	.-20     	; 0xaf4 <__divsf3+0x1e>
     b08:	55 23       	and	r21, r21
     b0a:	91 f3       	breq	.-28     	; 0xaf0 <__divsf3+0x1a>
     b0c:	95 1b       	sub	r25, r21
     b0e:	55 0b       	sbc	r21, r21
     b10:	bb 27       	eor	r27, r27
     b12:	aa 27       	eor	r26, r26
     b14:	62 17       	cp	r22, r18
     b16:	73 07       	cpc	r23, r19
     b18:	84 07       	cpc	r24, r20
     b1a:	38 f0       	brcs	.+14     	; 0xb2a <__divsf3_pse+0x26>
     b1c:	9f 5f       	subi	r25, 0xFF	; 255
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	44 1f       	adc	r20, r20
     b26:	aa 1f       	adc	r26, r26
     b28:	a9 f3       	breq	.-22     	; 0xb14 <__divsf3_pse+0x10>
     b2a:	35 d0       	rcall	.+106    	; 0xb96 <__divsf3_pse+0x92>
     b2c:	0e 2e       	mov	r0, r30
     b2e:	3a f0       	brmi	.+14     	; 0xb3e <__divsf3_pse+0x3a>
     b30:	e0 e8       	ldi	r30, 0x80	; 128
     b32:	32 d0       	rcall	.+100    	; 0xb98 <__divsf3_pse+0x94>
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	50 40       	sbci	r21, 0x00	; 0
     b38:	e6 95       	lsr	r30
     b3a:	00 1c       	adc	r0, r0
     b3c:	ca f7       	brpl	.-14     	; 0xb30 <__divsf3_pse+0x2c>
     b3e:	2b d0       	rcall	.+86     	; 0xb96 <__divsf3_pse+0x92>
     b40:	fe 2f       	mov	r31, r30
     b42:	29 d0       	rcall	.+82     	; 0xb96 <__divsf3_pse+0x92>
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	88 1f       	adc	r24, r24
     b4a:	bb 1f       	adc	r27, r27
     b4c:	26 17       	cp	r18, r22
     b4e:	37 07       	cpc	r19, r23
     b50:	48 07       	cpc	r20, r24
     b52:	ab 07       	cpc	r26, r27
     b54:	b0 e8       	ldi	r27, 0x80	; 128
     b56:	09 f0       	breq	.+2      	; 0xb5a <__divsf3_pse+0x56>
     b58:	bb 0b       	sbc	r27, r27
     b5a:	80 2d       	mov	r24, r0
     b5c:	bf 01       	movw	r22, r30
     b5e:	ff 27       	eor	r31, r31
     b60:	93 58       	subi	r25, 0x83	; 131
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	3a f0       	brmi	.+14     	; 0xb74 <__divsf3_pse+0x70>
     b66:	9e 3f       	cpi	r25, 0xFE	; 254
     b68:	51 05       	cpc	r21, r1
     b6a:	78 f0       	brcs	.+30     	; 0xb8a <__divsf3_pse+0x86>
     b6c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_inf>
     b70:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_szero>
     b74:	5f 3f       	cpi	r21, 0xFF	; 255
     b76:	e4 f3       	brlt	.-8      	; 0xb70 <__divsf3_pse+0x6c>
     b78:	98 3e       	cpi	r25, 0xE8	; 232
     b7a:	d4 f3       	brlt	.-12     	; 0xb70 <__divsf3_pse+0x6c>
     b7c:	86 95       	lsr	r24
     b7e:	77 95       	ror	r23
     b80:	67 95       	ror	r22
     b82:	b7 95       	ror	r27
     b84:	f7 95       	ror	r31
     b86:	9f 5f       	subi	r25, 0xFF	; 255
     b88:	c9 f7       	brne	.-14     	; 0xb7c <__divsf3_pse+0x78>
     b8a:	88 0f       	add	r24, r24
     b8c:	91 1d       	adc	r25, r1
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	97 f9       	bld	r25, 7
     b94:	08 95       	ret
     b96:	e1 e0       	ldi	r30, 0x01	; 1
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	88 1f       	adc	r24, r24
     b9e:	bb 1f       	adc	r27, r27
     ba0:	62 17       	cp	r22, r18
     ba2:	73 07       	cpc	r23, r19
     ba4:	84 07       	cpc	r24, r20
     ba6:	ba 07       	cpc	r27, r26
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <__divsf3_pse+0xae>
     baa:	62 1b       	sub	r22, r18
     bac:	73 0b       	sbc	r23, r19
     bae:	84 0b       	sbc	r24, r20
     bb0:	ba 0b       	sbc	r27, r26
     bb2:	ee 1f       	adc	r30, r30
     bb4:	88 f7       	brcc	.-30     	; 0xb98 <__divsf3_pse+0x94>
     bb6:	e0 95       	com	r30
     bb8:	08 95       	ret

00000bba <__fixunssfsi>:
     bba:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_splitA>
     bbe:	88 f0       	brcs	.+34     	; 0xbe2 <__fixunssfsi+0x28>
     bc0:	9f 57       	subi	r25, 0x7F	; 127
     bc2:	98 f0       	brcs	.+38     	; 0xbea <__fixunssfsi+0x30>
     bc4:	b9 2f       	mov	r27, r25
     bc6:	99 27       	eor	r25, r25
     bc8:	b7 51       	subi	r27, 0x17	; 23
     bca:	b0 f0       	brcs	.+44     	; 0xbf8 <__fixunssfsi+0x3e>
     bcc:	e1 f0       	breq	.+56     	; 0xc06 <__fixunssfsi+0x4c>
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	88 1f       	adc	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	1a f0       	brmi	.+6      	; 0xbde <__fixunssfsi+0x24>
     bd8:	ba 95       	dec	r27
     bda:	c9 f7       	brne	.-14     	; 0xbce <__fixunssfsi+0x14>
     bdc:	14 c0       	rjmp	.+40     	; 0xc06 <__fixunssfsi+0x4c>
     bde:	b1 30       	cpi	r27, 0x01	; 1
     be0:	91 f0       	breq	.+36     	; 0xc06 <__fixunssfsi+0x4c>
     be2:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_zero>
     be6:	b1 e0       	ldi	r27, 0x01	; 1
     be8:	08 95       	ret
     bea:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_zero>
     bee:	67 2f       	mov	r22, r23
     bf0:	78 2f       	mov	r23, r24
     bf2:	88 27       	eor	r24, r24
     bf4:	b8 5f       	subi	r27, 0xF8	; 248
     bf6:	39 f0       	breq	.+14     	; 0xc06 <__fixunssfsi+0x4c>
     bf8:	b9 3f       	cpi	r27, 0xF9	; 249
     bfa:	cc f3       	brlt	.-14     	; 0xbee <__fixunssfsi+0x34>
     bfc:	86 95       	lsr	r24
     bfe:	77 95       	ror	r23
     c00:	67 95       	ror	r22
     c02:	b3 95       	inc	r27
     c04:	d9 f7       	brne	.-10     	; 0xbfc <__fixunssfsi+0x42>
     c06:	3e f4       	brtc	.+14     	; 0xc16 <__fixunssfsi+0x5c>
     c08:	90 95       	com	r25
     c0a:	80 95       	com	r24
     c0c:	70 95       	com	r23
     c0e:	61 95       	neg	r22
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	8f 4f       	sbci	r24, 0xFF	; 255
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	08 95       	ret

00000c18 <__floatunsisf>:
     c18:	e8 94       	clt
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <__floatsisf+0x12>

00000c1c <__floatsisf>:
     c1c:	97 fb       	bst	r25, 7
     c1e:	3e f4       	brtc	.+14     	; 0xc2e <__floatsisf+0x12>
     c20:	90 95       	com	r25
     c22:	80 95       	com	r24
     c24:	70 95       	com	r23
     c26:	61 95       	neg	r22
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	8f 4f       	sbci	r24, 0xFF	; 255
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	99 23       	and	r25, r25
     c30:	a9 f0       	breq	.+42     	; 0xc5c <__floatsisf+0x40>
     c32:	f9 2f       	mov	r31, r25
     c34:	96 e9       	ldi	r25, 0x96	; 150
     c36:	bb 27       	eor	r27, r27
     c38:	93 95       	inc	r25
     c3a:	f6 95       	lsr	r31
     c3c:	87 95       	ror	r24
     c3e:	77 95       	ror	r23
     c40:	67 95       	ror	r22
     c42:	b7 95       	ror	r27
     c44:	f1 11       	cpse	r31, r1
     c46:	f8 cf       	rjmp	.-16     	; 0xc38 <__floatsisf+0x1c>
     c48:	fa f4       	brpl	.+62     	; 0xc88 <__floatsisf+0x6c>
     c4a:	bb 0f       	add	r27, r27
     c4c:	11 f4       	brne	.+4      	; 0xc52 <__floatsisf+0x36>
     c4e:	60 ff       	sbrs	r22, 0
     c50:	1b c0       	rjmp	.+54     	; 0xc88 <__floatsisf+0x6c>
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	8f 4f       	sbci	r24, 0xFF	; 255
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	16 c0       	rjmp	.+44     	; 0xc88 <__floatsisf+0x6c>
     c5c:	88 23       	and	r24, r24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <__floatsisf+0x48>
     c60:	96 e9       	ldi	r25, 0x96	; 150
     c62:	11 c0       	rjmp	.+34     	; 0xc86 <__floatsisf+0x6a>
     c64:	77 23       	and	r23, r23
     c66:	21 f0       	breq	.+8      	; 0xc70 <__floatsisf+0x54>
     c68:	9e e8       	ldi	r25, 0x8E	; 142
     c6a:	87 2f       	mov	r24, r23
     c6c:	76 2f       	mov	r23, r22
     c6e:	05 c0       	rjmp	.+10     	; 0xc7a <__floatsisf+0x5e>
     c70:	66 23       	and	r22, r22
     c72:	71 f0       	breq	.+28     	; 0xc90 <__floatsisf+0x74>
     c74:	96 e8       	ldi	r25, 0x86	; 134
     c76:	86 2f       	mov	r24, r22
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	2a f0       	brmi	.+10     	; 0xc88 <__floatsisf+0x6c>
     c7e:	9a 95       	dec	r25
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	da f7       	brpl	.-10     	; 0xc7e <__floatsisf+0x62>
     c88:	88 0f       	add	r24, r24
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	97 f9       	bld	r25, 7
     c90:	08 95       	ret

00000c92 <__fp_inf>:
     c92:	97 f9       	bld	r25, 7
     c94:	9f 67       	ori	r25, 0x7F	; 127
     c96:	80 e8       	ldi	r24, 0x80	; 128
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <__fp_nan>:
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	80 ec       	ldi	r24, 0xC0	; 192
     ca2:	08 95       	ret

00000ca4 <__fp_pscA>:
     ca4:	00 24       	eor	r0, r0
     ca6:	0a 94       	dec	r0
     ca8:	16 16       	cp	r1, r22
     caa:	17 06       	cpc	r1, r23
     cac:	18 06       	cpc	r1, r24
     cae:	09 06       	cpc	r0, r25
     cb0:	08 95       	ret

00000cb2 <__fp_pscB>:
     cb2:	00 24       	eor	r0, r0
     cb4:	0a 94       	dec	r0
     cb6:	12 16       	cp	r1, r18
     cb8:	13 06       	cpc	r1, r19
     cba:	14 06       	cpc	r1, r20
     cbc:	05 06       	cpc	r0, r21
     cbe:	08 95       	ret

00000cc0 <__fp_round>:
     cc0:	09 2e       	mov	r0, r25
     cc2:	03 94       	inc	r0
     cc4:	00 0c       	add	r0, r0
     cc6:	11 f4       	brne	.+4      	; 0xccc <__fp_round+0xc>
     cc8:	88 23       	and	r24, r24
     cca:	52 f0       	brmi	.+20     	; 0xce0 <__fp_round+0x20>
     ccc:	bb 0f       	add	r27, r27
     cce:	40 f4       	brcc	.+16     	; 0xce0 <__fp_round+0x20>
     cd0:	bf 2b       	or	r27, r31
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0x18>
     cd4:	60 ff       	sbrs	r22, 0
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <__fp_round+0x20>
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8f 4f       	sbci	r24, 0xFF	; 255
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	08 95       	ret

00000ce2 <__fp_split3>:
     ce2:	57 fd       	sbrc	r21, 7
     ce4:	90 58       	subi	r25, 0x80	; 128
     ce6:	44 0f       	add	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	59 f0       	breq	.+22     	; 0xd02 <__fp_splitA+0x10>
     cec:	5f 3f       	cpi	r21, 0xFF	; 255
     cee:	71 f0       	breq	.+28     	; 0xd0c <__fp_splitA+0x1a>
     cf0:	47 95       	ror	r20

00000cf2 <__fp_splitA>:
     cf2:	88 0f       	add	r24, r24
     cf4:	97 fb       	bst	r25, 7
     cf6:	99 1f       	adc	r25, r25
     cf8:	61 f0       	breq	.+24     	; 0xd12 <__fp_splitA+0x20>
     cfa:	9f 3f       	cpi	r25, 0xFF	; 255
     cfc:	79 f0       	breq	.+30     	; 0xd1c <__fp_splitA+0x2a>
     cfe:	87 95       	ror	r24
     d00:	08 95       	ret
     d02:	12 16       	cp	r1, r18
     d04:	13 06       	cpc	r1, r19
     d06:	14 06       	cpc	r1, r20
     d08:	55 1f       	adc	r21, r21
     d0a:	f2 cf       	rjmp	.-28     	; 0xcf0 <__fp_split3+0xe>
     d0c:	46 95       	lsr	r20
     d0e:	f1 df       	rcall	.-30     	; 0xcf2 <__fp_splitA>
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <__fp_splitA+0x30>
     d12:	16 16       	cp	r1, r22
     d14:	17 06       	cpc	r1, r23
     d16:	18 06       	cpc	r1, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	f1 cf       	rjmp	.-30     	; 0xcfe <__fp_splitA+0xc>
     d1c:	86 95       	lsr	r24
     d1e:	71 05       	cpc	r23, r1
     d20:	61 05       	cpc	r22, r1
     d22:	08 94       	sec
     d24:	08 95       	ret

00000d26 <__fp_zero>:
     d26:	e8 94       	clt

00000d28 <__fp_szero>:
     d28:	bb 27       	eor	r27, r27
     d2a:	66 27       	eor	r22, r22
     d2c:	77 27       	eor	r23, r23
     d2e:	cb 01       	movw	r24, r22
     d30:	97 f9       	bld	r25, 7
     d32:	08 95       	ret

00000d34 <__mulsf3>:
     d34:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3x>
     d38:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_round>
     d3c:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscA>
     d40:	38 f0       	brcs	.+14     	; 0xd50 <__mulsf3+0x1c>
     d42:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscB>
     d46:	20 f0       	brcs	.+8      	; 0xd50 <__mulsf3+0x1c>
     d48:	95 23       	and	r25, r21
     d4a:	11 f0       	breq	.+4      	; 0xd50 <__mulsf3+0x1c>
     d4c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_inf>
     d50:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_nan>
     d54:	11 24       	eor	r1, r1
     d56:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_szero>

00000d5a <__mulsf3x>:
     d5a:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_split3>
     d5e:	70 f3       	brcs	.-36     	; 0xd3c <__mulsf3+0x8>

00000d60 <__mulsf3_pse>:
     d60:	95 9f       	mul	r25, r21
     d62:	c1 f3       	breq	.-16     	; 0xd54 <__mulsf3+0x20>
     d64:	95 0f       	add	r25, r21
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	55 1f       	adc	r21, r21
     d6a:	62 9f       	mul	r22, r18
     d6c:	f0 01       	movw	r30, r0
     d6e:	72 9f       	mul	r23, r18
     d70:	bb 27       	eor	r27, r27
     d72:	f0 0d       	add	r31, r0
     d74:	b1 1d       	adc	r27, r1
     d76:	63 9f       	mul	r22, r19
     d78:	aa 27       	eor	r26, r26
     d7a:	f0 0d       	add	r31, r0
     d7c:	b1 1d       	adc	r27, r1
     d7e:	aa 1f       	adc	r26, r26
     d80:	64 9f       	mul	r22, r20
     d82:	66 27       	eor	r22, r22
     d84:	b0 0d       	add	r27, r0
     d86:	a1 1d       	adc	r26, r1
     d88:	66 1f       	adc	r22, r22
     d8a:	82 9f       	mul	r24, r18
     d8c:	22 27       	eor	r18, r18
     d8e:	b0 0d       	add	r27, r0
     d90:	a1 1d       	adc	r26, r1
     d92:	62 1f       	adc	r22, r18
     d94:	73 9f       	mul	r23, r19
     d96:	b0 0d       	add	r27, r0
     d98:	a1 1d       	adc	r26, r1
     d9a:	62 1f       	adc	r22, r18
     d9c:	83 9f       	mul	r24, r19
     d9e:	a0 0d       	add	r26, r0
     da0:	61 1d       	adc	r22, r1
     da2:	22 1f       	adc	r18, r18
     da4:	74 9f       	mul	r23, r20
     da6:	33 27       	eor	r19, r19
     da8:	a0 0d       	add	r26, r0
     daa:	61 1d       	adc	r22, r1
     dac:	23 1f       	adc	r18, r19
     dae:	84 9f       	mul	r24, r20
     db0:	60 0d       	add	r22, r0
     db2:	21 1d       	adc	r18, r1
     db4:	82 2f       	mov	r24, r18
     db6:	76 2f       	mov	r23, r22
     db8:	6a 2f       	mov	r22, r26
     dba:	11 24       	eor	r1, r1
     dbc:	9f 57       	subi	r25, 0x7F	; 127
     dbe:	50 40       	sbci	r21, 0x00	; 0
     dc0:	9a f0       	brmi	.+38     	; 0xde8 <__mulsf3_pse+0x88>
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__mulsf3_pse+0xa0>
     dc4:	88 23       	and	r24, r24
     dc6:	4a f0       	brmi	.+18     	; 0xdda <__mulsf3_pse+0x7a>
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	bb 1f       	adc	r27, r27
     dce:	66 1f       	adc	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	91 50       	subi	r25, 0x01	; 1
     dd6:	50 40       	sbci	r21, 0x00	; 0
     dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__mulsf3_pse+0x64>
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	51 05       	cpc	r21, r1
     dde:	80 f0       	brcs	.+32     	; 0xe00 <__mulsf3_pse+0xa0>
     de0:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_inf>
     de4:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_szero>
     de8:	5f 3f       	cpi	r21, 0xFF	; 255
     dea:	e4 f3       	brlt	.-8      	; 0xde4 <__mulsf3_pse+0x84>
     dec:	98 3e       	cpi	r25, 0xE8	; 232
     dee:	d4 f3       	brlt	.-12     	; 0xde4 <__mulsf3_pse+0x84>
     df0:	86 95       	lsr	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f7 95       	ror	r31
     dfa:	e7 95       	ror	r30
     dfc:	9f 5f       	subi	r25, 0xFF	; 255
     dfe:	c1 f7       	brne	.-16     	; 0xdf0 <__mulsf3_pse+0x90>
     e00:	fe 2b       	or	r31, r30
     e02:	88 0f       	add	r24, r24
     e04:	91 1d       	adc	r25, r1
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret

00000e0e <__tablejump2__>:
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	05 90       	lpm	r0, Z+
     e14:	f4 91       	lpm	r31, Z
     e16:	e0 2d       	mov	r30, r0
     e18:	09 94       	ijmp

00000e1a <dtostrf>:
     e1a:	ef 92       	push	r14
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	e8 01       	movw	r28, r16
     e26:	47 fd       	sbrc	r20, 7
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <dtostrf+0x14>
     e2a:	34 e0       	ldi	r19, 0x04	; 4
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <dtostrf+0x16>
     e2e:	34 e1       	ldi	r19, 0x14	; 20
     e30:	04 2e       	mov	r0, r20
     e32:	00 0c       	add	r0, r0
     e34:	55 0b       	sbc	r21, r21
     e36:	57 ff       	sbrs	r21, 7
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <dtostrf+0x26>
     e3a:	51 95       	neg	r21
     e3c:	41 95       	neg	r20
     e3e:	51 09       	sbc	r21, r1
     e40:	e3 2e       	mov	r14, r19
     e42:	02 2f       	mov	r16, r18
     e44:	24 2f       	mov	r18, r20
     e46:	ae 01       	movw	r20, r28
     e48:	0e 94 30 09 	call	0x1260	; 0x1260 <dtoa_prf>
     e4c:	ce 01       	movw	r24, r28
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ef 90       	pop	r14
     e58:	08 95       	ret

00000e5a <sprintf>:
     e5a:	ae e0       	ldi	r26, 0x0E	; 14
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e3       	ldi	r30, 0x33	; 51
     e60:	f7 e0       	ldi	r31, 0x07	; 7
     e62:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__prologue_saves__+0x1c>
     e66:	0d 89       	ldd	r16, Y+21	; 0x15
     e68:	1e 89       	ldd	r17, Y+22	; 0x16
     e6a:	86 e0       	ldi	r24, 0x06	; 6
     e6c:	8c 83       	std	Y+4, r24	; 0x04
     e6e:	1a 83       	std	Y+2, r17	; 0x02
     e70:	09 83       	std	Y+1, r16	; 0x01
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f e7       	ldi	r25, 0x7F	; 127
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	ae 01       	movw	r20, r28
     e7c:	47 5e       	subi	r20, 0xE7	; 231
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	6f 89       	ldd	r22, Y+23	; 0x17
     e82:	78 8d       	ldd	r23, Y+24	; 0x18
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	0e 94 4f 07 	call	0xe9e	; 0xe9e <vfprintf>
     e8c:	ef 81       	ldd	r30, Y+7	; 0x07
     e8e:	f8 85       	ldd	r31, Y+8	; 0x08
     e90:	e0 0f       	add	r30, r16
     e92:	f1 1f       	adc	r31, r17
     e94:	10 82       	st	Z, r1
     e96:	2e 96       	adiw	r28, 0x0e	; 14
     e98:	e4 e0       	ldi	r30, 0x04	; 4
     e9a:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__epilogue_restores__+0x1c>

00000e9e <vfprintf>:
     e9e:	ab e0       	ldi	r26, 0x0B	; 11
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f7 e0       	ldi	r31, 0x07	; 7
     ea6:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__prologue_saves__>
     eaa:	6c 01       	movw	r12, r24
     eac:	7b 01       	movw	r14, r22
     eae:	8a 01       	movw	r16, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	17 82       	std	Z+7, r1	; 0x07
     eb4:	16 82       	std	Z+6, r1	; 0x06
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	81 ff       	sbrs	r24, 1
     eba:	cc c1       	rjmp	.+920    	; 0x1254 <vfprintf+0x3b6>
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	3c 01       	movw	r6, r24
     ec2:	f6 01       	movw	r30, r12
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	f7 01       	movw	r30, r14
     ec8:	93 fd       	sbrc	r25, 3
     eca:	85 91       	lpm	r24, Z+
     ecc:	93 ff       	sbrs	r25, 3
     ece:	81 91       	ld	r24, Z+
     ed0:	7f 01       	movw	r14, r30
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <vfprintf+0x3a>
     ed6:	ba c1       	rjmp	.+884    	; 0x124c <vfprintf+0x3ae>
     ed8:	85 32       	cpi	r24, 0x25	; 37
     eda:	39 f4       	brne	.+14     	; 0xeea <vfprintf+0x4c>
     edc:	93 fd       	sbrc	r25, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	93 ff       	sbrs	r25, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	7f 01       	movw	r14, r30
     ee6:	85 32       	cpi	r24, 0x25	; 37
     ee8:	29 f4       	brne	.+10     	; 0xef4 <vfprintf+0x56>
     eea:	b6 01       	movw	r22, r12
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
     ef2:	e7 cf       	rjmp	.-50     	; 0xec2 <vfprintf+0x24>
     ef4:	91 2c       	mov	r9, r1
     ef6:	21 2c       	mov	r2, r1
     ef8:	31 2c       	mov	r3, r1
     efa:	ff e1       	ldi	r31, 0x1F	; 31
     efc:	f3 15       	cp	r31, r3
     efe:	d8 f0       	brcs	.+54     	; 0xf36 <vfprintf+0x98>
     f00:	8b 32       	cpi	r24, 0x2B	; 43
     f02:	79 f0       	breq	.+30     	; 0xf22 <vfprintf+0x84>
     f04:	38 f4       	brcc	.+14     	; 0xf14 <vfprintf+0x76>
     f06:	80 32       	cpi	r24, 0x20	; 32
     f08:	79 f0       	breq	.+30     	; 0xf28 <vfprintf+0x8a>
     f0a:	83 32       	cpi	r24, 0x23	; 35
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <vfprintf+0x98>
     f0e:	23 2d       	mov	r18, r3
     f10:	20 61       	ori	r18, 0x10	; 16
     f12:	1d c0       	rjmp	.+58     	; 0xf4e <vfprintf+0xb0>
     f14:	8d 32       	cpi	r24, 0x2D	; 45
     f16:	61 f0       	breq	.+24     	; 0xf30 <vfprintf+0x92>
     f18:	80 33       	cpi	r24, 0x30	; 48
     f1a:	69 f4       	brne	.+26     	; 0xf36 <vfprintf+0x98>
     f1c:	23 2d       	mov	r18, r3
     f1e:	21 60       	ori	r18, 0x01	; 1
     f20:	16 c0       	rjmp	.+44     	; 0xf4e <vfprintf+0xb0>
     f22:	83 2d       	mov	r24, r3
     f24:	82 60       	ori	r24, 0x02	; 2
     f26:	38 2e       	mov	r3, r24
     f28:	e3 2d       	mov	r30, r3
     f2a:	e4 60       	ori	r30, 0x04	; 4
     f2c:	3e 2e       	mov	r3, r30
     f2e:	2a c0       	rjmp	.+84     	; 0xf84 <vfprintf+0xe6>
     f30:	f3 2d       	mov	r31, r3
     f32:	f8 60       	ori	r31, 0x08	; 8
     f34:	1d c0       	rjmp	.+58     	; 0xf70 <vfprintf+0xd2>
     f36:	37 fc       	sbrc	r3, 7
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <vfprintf+0xf6>
     f3a:	20 ed       	ldi	r18, 0xD0	; 208
     f3c:	28 0f       	add	r18, r24
     f3e:	2a 30       	cpi	r18, 0x0A	; 10
     f40:	40 f0       	brcs	.+16     	; 0xf52 <vfprintf+0xb4>
     f42:	8e 32       	cpi	r24, 0x2E	; 46
     f44:	b9 f4       	brne	.+46     	; 0xf74 <vfprintf+0xd6>
     f46:	36 fc       	sbrc	r3, 6
     f48:	81 c1       	rjmp	.+770    	; 0x124c <vfprintf+0x3ae>
     f4a:	23 2d       	mov	r18, r3
     f4c:	20 64       	ori	r18, 0x40	; 64
     f4e:	32 2e       	mov	r3, r18
     f50:	19 c0       	rjmp	.+50     	; 0xf84 <vfprintf+0xe6>
     f52:	36 fe       	sbrs	r3, 6
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <vfprintf+0xc4>
     f56:	8a e0       	ldi	r24, 0x0A	; 10
     f58:	98 9e       	mul	r9, r24
     f5a:	20 0d       	add	r18, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	92 2e       	mov	r9, r18
     f60:	11 c0       	rjmp	.+34     	; 0xf84 <vfprintf+0xe6>
     f62:	ea e0       	ldi	r30, 0x0A	; 10
     f64:	2e 9e       	mul	r2, r30
     f66:	20 0d       	add	r18, r0
     f68:	11 24       	eor	r1, r1
     f6a:	22 2e       	mov	r2, r18
     f6c:	f3 2d       	mov	r31, r3
     f6e:	f0 62       	ori	r31, 0x20	; 32
     f70:	3f 2e       	mov	r3, r31
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <vfprintf+0xe6>
     f74:	8c 36       	cpi	r24, 0x6C	; 108
     f76:	21 f4       	brne	.+8      	; 0xf80 <vfprintf+0xe2>
     f78:	83 2d       	mov	r24, r3
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	38 2e       	mov	r3, r24
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0xe6>
     f80:	88 36       	cpi	r24, 0x68	; 104
     f82:	41 f4       	brne	.+16     	; 0xf94 <vfprintf+0xf6>
     f84:	f7 01       	movw	r30, r14
     f86:	93 fd       	sbrc	r25, 3
     f88:	85 91       	lpm	r24, Z+
     f8a:	93 ff       	sbrs	r25, 3
     f8c:	81 91       	ld	r24, Z+
     f8e:	7f 01       	movw	r14, r30
     f90:	81 11       	cpse	r24, r1
     f92:	b3 cf       	rjmp	.-154    	; 0xefa <vfprintf+0x5c>
     f94:	98 2f       	mov	r25, r24
     f96:	9f 7d       	andi	r25, 0xDF	; 223
     f98:	95 54       	subi	r25, 0x45	; 69
     f9a:	93 30       	cpi	r25, 0x03	; 3
     f9c:	28 f4       	brcc	.+10     	; 0xfa8 <vfprintf+0x10a>
     f9e:	0c 5f       	subi	r16, 0xFC	; 252
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	9f e3       	ldi	r25, 0x3F	; 63
     fa4:	99 83       	std	Y+1, r25	; 0x01
     fa6:	0d c0       	rjmp	.+26     	; 0xfc2 <vfprintf+0x124>
     fa8:	83 36       	cpi	r24, 0x63	; 99
     faa:	31 f0       	breq	.+12     	; 0xfb8 <vfprintf+0x11a>
     fac:	83 37       	cpi	r24, 0x73	; 115
     fae:	71 f0       	breq	.+28     	; 0xfcc <vfprintf+0x12e>
     fb0:	83 35       	cpi	r24, 0x53	; 83
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <vfprintf+0x118>
     fb4:	59 c0       	rjmp	.+178    	; 0x1068 <vfprintf+0x1ca>
     fb6:	21 c0       	rjmp	.+66     	; 0xffa <vfprintf+0x15c>
     fb8:	f8 01       	movw	r30, r16
     fba:	80 81       	ld	r24, Z
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	0e 5f       	subi	r16, 0xFE	; 254
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	88 24       	eor	r8, r8
     fc4:	83 94       	inc	r8
     fc6:	91 2c       	mov	r9, r1
     fc8:	53 01       	movw	r10, r6
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <vfprintf+0x154>
     fcc:	28 01       	movw	r4, r16
     fce:	f2 e0       	ldi	r31, 0x02	; 2
     fd0:	4f 0e       	add	r4, r31
     fd2:	51 1c       	adc	r5, r1
     fd4:	f8 01       	movw	r30, r16
     fd6:	a0 80       	ld	r10, Z
     fd8:	b1 80       	ldd	r11, Z+1	; 0x01
     fda:	36 fe       	sbrs	r3, 6
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <vfprintf+0x146>
     fde:	69 2d       	mov	r22, r9
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfprintf+0x14a>
     fe4:	6f ef       	ldi	r22, 0xFF	; 255
     fe6:	7f ef       	ldi	r23, 0xFF	; 255
     fe8:	c5 01       	movw	r24, r10
     fea:	0e 94 6d 0b 	call	0x16da	; 0x16da <strnlen>
     fee:	4c 01       	movw	r8, r24
     ff0:	82 01       	movw	r16, r4
     ff2:	f3 2d       	mov	r31, r3
     ff4:	ff 77       	andi	r31, 0x7F	; 127
     ff6:	3f 2e       	mov	r3, r31
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <vfprintf+0x188>
     ffa:	28 01       	movw	r4, r16
     ffc:	22 e0       	ldi	r18, 0x02	; 2
     ffe:	42 0e       	add	r4, r18
    1000:	51 1c       	adc	r5, r1
    1002:	f8 01       	movw	r30, r16
    1004:	a0 80       	ld	r10, Z
    1006:	b1 80       	ldd	r11, Z+1	; 0x01
    1008:	36 fe       	sbrs	r3, 6
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <vfprintf+0x174>
    100c:	69 2d       	mov	r22, r9
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x178>
    1012:	6f ef       	ldi	r22, 0xFF	; 255
    1014:	7f ef       	ldi	r23, 0xFF	; 255
    1016:	c5 01       	movw	r24, r10
    1018:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <strnlen_P>
    101c:	4c 01       	movw	r8, r24
    101e:	f3 2d       	mov	r31, r3
    1020:	f0 68       	ori	r31, 0x80	; 128
    1022:	3f 2e       	mov	r3, r31
    1024:	82 01       	movw	r16, r4
    1026:	33 fc       	sbrc	r3, 3
    1028:	1b c0       	rjmp	.+54     	; 0x1060 <vfprintf+0x1c2>
    102a:	82 2d       	mov	r24, r2
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 16       	cp	r8, r24
    1030:	99 06       	cpc	r9, r25
    1032:	b0 f4       	brcc	.+44     	; 0x1060 <vfprintf+0x1c2>
    1034:	b6 01       	movw	r22, r12
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    103e:	2a 94       	dec	r2
    1040:	f4 cf       	rjmp	.-24     	; 0x102a <vfprintf+0x18c>
    1042:	f5 01       	movw	r30, r10
    1044:	37 fc       	sbrc	r3, 7
    1046:	85 91       	lpm	r24, Z+
    1048:	37 fe       	sbrs	r3, 7
    104a:	81 91       	ld	r24, Z+
    104c:	5f 01       	movw	r10, r30
    104e:	b6 01       	movw	r22, r12
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    1056:	21 10       	cpse	r2, r1
    1058:	2a 94       	dec	r2
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	82 1a       	sub	r8, r18
    105e:	91 08       	sbc	r9, r1
    1060:	81 14       	cp	r8, r1
    1062:	91 04       	cpc	r9, r1
    1064:	71 f7       	brne	.-36     	; 0x1042 <vfprintf+0x1a4>
    1066:	e8 c0       	rjmp	.+464    	; 0x1238 <vfprintf+0x39a>
    1068:	84 36       	cpi	r24, 0x64	; 100
    106a:	11 f0       	breq	.+4      	; 0x1070 <vfprintf+0x1d2>
    106c:	89 36       	cpi	r24, 0x69	; 105
    106e:	41 f5       	brne	.+80     	; 0x10c0 <vfprintf+0x222>
    1070:	f8 01       	movw	r30, r16
    1072:	37 fe       	sbrs	r3, 7
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <vfprintf+0x1e6>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	0c 5f       	subi	r16, 0xFC	; 252
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <vfprintf+0x1f6>
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	07 2e       	mov	r0, r23
    108a:	00 0c       	add	r0, r0
    108c:	88 0b       	sbc	r24, r24
    108e:	99 0b       	sbc	r25, r25
    1090:	0e 5f       	subi	r16, 0xFE	; 254
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	f3 2d       	mov	r31, r3
    1096:	ff 76       	andi	r31, 0x6F	; 111
    1098:	3f 2e       	mov	r3, r31
    109a:	97 ff       	sbrs	r25, 7
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <vfprintf+0x212>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	f0 68       	ori	r31, 0x80	; 128
    10ae:	3f 2e       	mov	r3, r31
    10b0:	2a e0       	ldi	r18, 0x0A	; 10
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a3 01       	movw	r20, r6
    10b6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__ultoa_invert>
    10ba:	88 2e       	mov	r8, r24
    10bc:	86 18       	sub	r8, r6
    10be:	45 c0       	rjmp	.+138    	; 0x114a <vfprintf+0x2ac>
    10c0:	85 37       	cpi	r24, 0x75	; 117
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <vfprintf+0x232>
    10c4:	23 2d       	mov	r18, r3
    10c6:	2f 7e       	andi	r18, 0xEF	; 239
    10c8:	b2 2e       	mov	r11, r18
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	25 c0       	rjmp	.+74     	; 0x111a <vfprintf+0x27c>
    10d0:	93 2d       	mov	r25, r3
    10d2:	99 7f       	andi	r25, 0xF9	; 249
    10d4:	b9 2e       	mov	r11, r25
    10d6:	8f 36       	cpi	r24, 0x6F	; 111
    10d8:	c1 f0       	breq	.+48     	; 0x110a <vfprintf+0x26c>
    10da:	18 f4       	brcc	.+6      	; 0x10e2 <vfprintf+0x244>
    10dc:	88 35       	cpi	r24, 0x58	; 88
    10de:	79 f0       	breq	.+30     	; 0x10fe <vfprintf+0x260>
    10e0:	b5 c0       	rjmp	.+362    	; 0x124c <vfprintf+0x3ae>
    10e2:	80 37       	cpi	r24, 0x70	; 112
    10e4:	19 f0       	breq	.+6      	; 0x10ec <vfprintf+0x24e>
    10e6:	88 37       	cpi	r24, 0x78	; 120
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <vfprintf+0x254>
    10ea:	b0 c0       	rjmp	.+352    	; 0x124c <vfprintf+0x3ae>
    10ec:	e9 2f       	mov	r30, r25
    10ee:	e0 61       	ori	r30, 0x10	; 16
    10f0:	be 2e       	mov	r11, r30
    10f2:	b4 fe       	sbrs	r11, 4
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <vfprintf+0x272>
    10f6:	fb 2d       	mov	r31, r11
    10f8:	f4 60       	ori	r31, 0x04	; 4
    10fa:	bf 2e       	mov	r11, r31
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <vfprintf+0x272>
    10fe:	34 fe       	sbrs	r3, 4
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <vfprintf+0x278>
    1102:	29 2f       	mov	r18, r25
    1104:	26 60       	ori	r18, 0x06	; 6
    1106:	b2 2e       	mov	r11, r18
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x278>
    110a:	28 e0       	ldi	r18, 0x08	; 8
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	05 c0       	rjmp	.+10     	; 0x111a <vfprintf+0x27c>
    1110:	20 e1       	ldi	r18, 0x10	; 16
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x27c>
    1116:	20 e1       	ldi	r18, 0x10	; 16
    1118:	32 e0       	ldi	r19, 0x02	; 2
    111a:	f8 01       	movw	r30, r16
    111c:	b7 fe       	sbrs	r11, 7
    111e:	07 c0       	rjmp	.+14     	; 0x112e <vfprintf+0x290>
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	0c 5f       	subi	r16, 0xFC	; 252
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x29c>
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 5f       	subi	r16, 0xFE	; 254
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	a3 01       	movw	r20, r6
    113c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__ultoa_invert>
    1140:	88 2e       	mov	r8, r24
    1142:	86 18       	sub	r8, r6
    1144:	fb 2d       	mov	r31, r11
    1146:	ff 77       	andi	r31, 0x7F	; 127
    1148:	3f 2e       	mov	r3, r31
    114a:	36 fe       	sbrs	r3, 6
    114c:	0d c0       	rjmp	.+26     	; 0x1168 <vfprintf+0x2ca>
    114e:	23 2d       	mov	r18, r3
    1150:	2e 7f       	andi	r18, 0xFE	; 254
    1152:	a2 2e       	mov	r10, r18
    1154:	89 14       	cp	r8, r9
    1156:	58 f4       	brcc	.+22     	; 0x116e <vfprintf+0x2d0>
    1158:	34 fe       	sbrs	r3, 4
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <vfprintf+0x2d4>
    115c:	32 fc       	sbrc	r3, 2
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x2d4>
    1160:	83 2d       	mov	r24, r3
    1162:	8e 7e       	andi	r24, 0xEE	; 238
    1164:	a8 2e       	mov	r10, r24
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <vfprintf+0x2d4>
    1168:	b8 2c       	mov	r11, r8
    116a:	a3 2c       	mov	r10, r3
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <vfprintf+0x2d6>
    116e:	b8 2c       	mov	r11, r8
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <vfprintf+0x2d6>
    1172:	b9 2c       	mov	r11, r9
    1174:	a4 fe       	sbrs	r10, 4
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <vfprintf+0x2f8>
    1178:	fe 01       	movw	r30, r28
    117a:	e8 0d       	add	r30, r8
    117c:	f1 1d       	adc	r31, r1
    117e:	80 81       	ld	r24, Z
    1180:	80 33       	cpi	r24, 0x30	; 48
    1182:	21 f4       	brne	.+8      	; 0x118c <vfprintf+0x2ee>
    1184:	9a 2d       	mov	r25, r10
    1186:	99 7e       	andi	r25, 0xE9	; 233
    1188:	a9 2e       	mov	r10, r25
    118a:	09 c0       	rjmp	.+18     	; 0x119e <vfprintf+0x300>
    118c:	a2 fe       	sbrs	r10, 2
    118e:	06 c0       	rjmp	.+12     	; 0x119c <vfprintf+0x2fe>
    1190:	b3 94       	inc	r11
    1192:	b3 94       	inc	r11
    1194:	04 c0       	rjmp	.+8      	; 0x119e <vfprintf+0x300>
    1196:	8a 2d       	mov	r24, r10
    1198:	86 78       	andi	r24, 0x86	; 134
    119a:	09 f0       	breq	.+2      	; 0x119e <vfprintf+0x300>
    119c:	b3 94       	inc	r11
    119e:	a3 fc       	sbrc	r10, 3
    11a0:	11 c0       	rjmp	.+34     	; 0x11c4 <vfprintf+0x326>
    11a2:	a0 fe       	sbrs	r10, 0
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0x314>
    11a6:	b2 14       	cp	r11, r2
    11a8:	88 f4       	brcc	.+34     	; 0x11cc <vfprintf+0x32e>
    11aa:	28 0c       	add	r2, r8
    11ac:	92 2c       	mov	r9, r2
    11ae:	9b 18       	sub	r9, r11
    11b0:	0e c0       	rjmp	.+28     	; 0x11ce <vfprintf+0x330>
    11b2:	b2 14       	cp	r11, r2
    11b4:	60 f4       	brcc	.+24     	; 0x11ce <vfprintf+0x330>
    11b6:	b6 01       	movw	r22, r12
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    11c0:	b3 94       	inc	r11
    11c2:	f7 cf       	rjmp	.-18     	; 0x11b2 <vfprintf+0x314>
    11c4:	b2 14       	cp	r11, r2
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <vfprintf+0x330>
    11c8:	2b 18       	sub	r2, r11
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <vfprintf+0x332>
    11cc:	98 2c       	mov	r9, r8
    11ce:	21 2c       	mov	r2, r1
    11d0:	a4 fe       	sbrs	r10, 4
    11d2:	10 c0       	rjmp	.+32     	; 0x11f4 <vfprintf+0x356>
    11d4:	b6 01       	movw	r22, r12
    11d6:	80 e3       	ldi	r24, 0x30	; 48
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    11de:	a2 fe       	sbrs	r10, 2
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <vfprintf+0x372>
    11e2:	a1 fc       	sbrc	r10, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x34e>
    11e6:	88 e7       	ldi	r24, 0x78	; 120
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x352>
    11ec:	88 e5       	ldi	r24, 0x58	; 88
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b6 01       	movw	r22, r12
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <vfprintf+0x36e>
    11f4:	8a 2d       	mov	r24, r10
    11f6:	86 78       	andi	r24, 0x86	; 134
    11f8:	59 f0       	breq	.+22     	; 0x1210 <vfprintf+0x372>
    11fa:	a1 fe       	sbrs	r10, 1
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x364>
    11fe:	8b e2       	ldi	r24, 0x2B	; 43
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <vfprintf+0x366>
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	a7 fc       	sbrc	r10, 7
    1206:	8d e2       	ldi	r24, 0x2D	; 45
    1208:	b6 01       	movw	r22, r12
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    1210:	89 14       	cp	r8, r9
    1212:	38 f4       	brcc	.+14     	; 0x1222 <vfprintf+0x384>
    1214:	b6 01       	movw	r22, r12
    1216:	80 e3       	ldi	r24, 0x30	; 48
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    121e:	9a 94       	dec	r9
    1220:	f7 cf       	rjmp	.-18     	; 0x1210 <vfprintf+0x372>
    1222:	8a 94       	dec	r8
    1224:	f3 01       	movw	r30, r6
    1226:	e8 0d       	add	r30, r8
    1228:	f1 1d       	adc	r31, r1
    122a:	80 81       	ld	r24, Z
    122c:	b6 01       	movw	r22, r12
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    1234:	81 10       	cpse	r8, r1
    1236:	f5 cf       	rjmp	.-22     	; 0x1222 <vfprintf+0x384>
    1238:	22 20       	and	r2, r2
    123a:	09 f4       	brne	.+2      	; 0x123e <vfprintf+0x3a0>
    123c:	42 ce       	rjmp	.-892    	; 0xec2 <vfprintf+0x24>
    123e:	b6 01       	movw	r22, r12
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <fputc>
    1248:	2a 94       	dec	r2
    124a:	f6 cf       	rjmp	.-20     	; 0x1238 <vfprintf+0x39a>
    124c:	f6 01       	movw	r30, r12
    124e:	86 81       	ldd	r24, Z+6	; 0x06
    1250:	97 81       	ldd	r25, Z+7	; 0x07
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x3ba>
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	2b 96       	adiw	r28, 0x0b	; 11
    125a:	e2 e1       	ldi	r30, 0x12	; 18
    125c:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__epilogue_restores__>

00001260 <dtoa_prf>:
    1260:	a9 e0       	ldi	r26, 0x09	; 9
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f9 e0       	ldi	r31, 0x09	; 9
    1268:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__prologue_saves__+0xc>
    126c:	6a 01       	movw	r12, r20
    126e:	12 2f       	mov	r17, r18
    1270:	b0 2e       	mov	r11, r16
    1272:	2b e3       	ldi	r18, 0x3B	; 59
    1274:	20 17       	cp	r18, r16
    1276:	20 f0       	brcs	.+8      	; 0x1280 <dtoa_prf+0x20>
    1278:	ff 24       	eor	r15, r15
    127a:	f3 94       	inc	r15
    127c:	f0 0e       	add	r15, r16
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <dtoa_prf+0x24>
    1280:	2c e3       	ldi	r18, 0x3C	; 60
    1282:	f2 2e       	mov	r15, r18
    1284:	0f 2d       	mov	r16, r15
    1286:	27 e0       	ldi	r18, 0x07	; 7
    1288:	ae 01       	movw	r20, r28
    128a:	4f 5f       	subi	r20, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__ftoa_engine>
    1292:	bc 01       	movw	r22, r24
    1294:	49 81       	ldd	r20, Y+1	; 0x01
    1296:	84 2f       	mov	r24, r20
    1298:	89 70       	andi	r24, 0x09	; 9
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	31 f0       	breq	.+12     	; 0x12aa <dtoa_prf+0x4a>
    129e:	e1 fc       	sbrc	r14, 1
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <dtoa_prf+0x4e>
    12a2:	e0 fe       	sbrs	r14, 0
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <dtoa_prf+0x52>
    12a6:	90 e2       	ldi	r25, 0x20	; 32
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <dtoa_prf+0x54>
    12aa:	9d e2       	ldi	r25, 0x2D	; 45
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <dtoa_prf+0x54>
    12ae:	9b e2       	ldi	r25, 0x2B	; 43
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <dtoa_prf+0x54>
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	5e 2d       	mov	r21, r14
    12b6:	50 71       	andi	r21, 0x10	; 16
    12b8:	43 ff       	sbrs	r20, 3
    12ba:	3c c0       	rjmp	.+120    	; 0x1334 <dtoa_prf+0xd4>
    12bc:	91 11       	cpse	r25, r1
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <dtoa_prf+0x64>
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <dtoa_prf+0x66>
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	81 17       	cp	r24, r17
    12c8:	18 f4       	brcc	.+6      	; 0x12d0 <dtoa_prf+0x70>
    12ca:	21 2f       	mov	r18, r17
    12cc:	28 1b       	sub	r18, r24
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <dtoa_prf+0x72>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	51 11       	cpse	r21, r1
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <dtoa_prf+0x8c>
    12d6:	f6 01       	movw	r30, r12
    12d8:	82 2f       	mov	r24, r18
    12da:	30 e2       	ldi	r19, 0x20	; 32
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <dtoa_prf+0x86>
    12e0:	31 93       	st	Z+, r19
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	fb cf       	rjmp	.-10     	; 0x12dc <dtoa_prf+0x7c>
    12e6:	c2 0e       	add	r12, r18
    12e8:	d1 1c       	adc	r13, r1
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	99 23       	and	r25, r25
    12ee:	29 f0       	breq	.+10     	; 0x12fa <dtoa_prf+0x9a>
    12f0:	d6 01       	movw	r26, r12
    12f2:	9c 93       	st	X, r25
    12f4:	f6 01       	movw	r30, r12
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	6f 01       	movw	r12, r30
    12fa:	c6 01       	movw	r24, r12
    12fc:	03 96       	adiw	r24, 0x03	; 3
    12fe:	e2 fe       	sbrs	r14, 2
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <dtoa_prf+0xb6>
    1302:	3e e4       	ldi	r19, 0x4E	; 78
    1304:	d6 01       	movw	r26, r12
    1306:	3c 93       	st	X, r19
    1308:	41 e4       	ldi	r20, 0x41	; 65
    130a:	11 96       	adiw	r26, 0x01	; 1
    130c:	4c 93       	st	X, r20
    130e:	11 97       	sbiw	r26, 0x01	; 1
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	3c 93       	st	X, r19
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <dtoa_prf+0xc2>
    1316:	3e e6       	ldi	r19, 0x6E	; 110
    1318:	f6 01       	movw	r30, r12
    131a:	30 83       	st	Z, r19
    131c:	41 e6       	ldi	r20, 0x61	; 97
    131e:	41 83       	std	Z+1, r20	; 0x01
    1320:	32 83       	std	Z+2, r19	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	32 2f       	mov	r19, r18
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	33 23       	and	r19, r19
    132a:	09 f4       	brne	.+2      	; 0x132e <dtoa_prf+0xce>
    132c:	42 c0       	rjmp	.+132    	; 0x13b2 <dtoa_prf+0x152>
    132e:	41 93       	st	Z+, r20
    1330:	31 50       	subi	r19, 0x01	; 1
    1332:	fa cf       	rjmp	.-12     	; 0x1328 <dtoa_prf+0xc8>
    1334:	42 ff       	sbrs	r20, 2
    1336:	44 c0       	rjmp	.+136    	; 0x13c0 <dtoa_prf+0x160>
    1338:	91 11       	cpse	r25, r1
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <dtoa_prf+0xe0>
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <dtoa_prf+0xe2>
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	81 17       	cp	r24, r17
    1344:	18 f4       	brcc	.+6      	; 0x134c <dtoa_prf+0xec>
    1346:	21 2f       	mov	r18, r17
    1348:	28 1b       	sub	r18, r24
    134a:	01 c0       	rjmp	.+2      	; 0x134e <dtoa_prf+0xee>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	51 11       	cpse	r21, r1
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <dtoa_prf+0x108>
    1352:	f6 01       	movw	r30, r12
    1354:	82 2f       	mov	r24, r18
    1356:	30 e2       	ldi	r19, 0x20	; 32
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <dtoa_prf+0x102>
    135c:	31 93       	st	Z+, r19
    135e:	81 50       	subi	r24, 0x01	; 1
    1360:	fb cf       	rjmp	.-10     	; 0x1358 <dtoa_prf+0xf8>
    1362:	c2 0e       	add	r12, r18
    1364:	d1 1c       	adc	r13, r1
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	99 23       	and	r25, r25
    136a:	29 f0       	breq	.+10     	; 0x1376 <dtoa_prf+0x116>
    136c:	d6 01       	movw	r26, r12
    136e:	9c 93       	st	X, r25
    1370:	f6 01       	movw	r30, r12
    1372:	31 96       	adiw	r30, 0x01	; 1
    1374:	6f 01       	movw	r12, r30
    1376:	c6 01       	movw	r24, r12
    1378:	03 96       	adiw	r24, 0x03	; 3
    137a:	e2 fe       	sbrs	r14, 2
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <dtoa_prf+0x134>
    137e:	39 e4       	ldi	r19, 0x49	; 73
    1380:	d6 01       	movw	r26, r12
    1382:	3c 93       	st	X, r19
    1384:	3e e4       	ldi	r19, 0x4E	; 78
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	3c 93       	st	X, r19
    138a:	11 97       	sbiw	r26, 0x01	; 1
    138c:	36 e4       	ldi	r19, 0x46	; 70
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	3c 93       	st	X, r19
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <dtoa_prf+0x142>
    1394:	39 e6       	ldi	r19, 0x69	; 105
    1396:	f6 01       	movw	r30, r12
    1398:	30 83       	st	Z, r19
    139a:	3e e6       	ldi	r19, 0x6E	; 110
    139c:	31 83       	std	Z+1, r19	; 0x01
    139e:	36 e6       	ldi	r19, 0x66	; 102
    13a0:	32 83       	std	Z+2, r19	; 0x02
    13a2:	fc 01       	movw	r30, r24
    13a4:	32 2f       	mov	r19, r18
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	33 23       	and	r19, r19
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <dtoa_prf+0x152>
    13ac:	41 93       	st	Z+, r20
    13ae:	31 50       	subi	r19, 0x01	; 1
    13b0:	fb cf       	rjmp	.-10     	; 0x13a8 <dtoa_prf+0x148>
    13b2:	fc 01       	movw	r30, r24
    13b4:	e2 0f       	add	r30, r18
    13b6:	f1 1d       	adc	r31, r1
    13b8:	10 82       	st	Z, r1
    13ba:	8e ef       	ldi	r24, 0xFE	; 254
    13bc:	9f ef       	ldi	r25, 0xFF	; 255
    13be:	a6 c0       	rjmp	.+332    	; 0x150c <dtoa_prf+0x2ac>
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	91 11       	cpse	r25, r1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <dtoa_prf+0x16c>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	16 16       	cp	r1, r22
    13ce:	17 06       	cpc	r1, r23
    13d0:	1c f4       	brge	.+6      	; 0x13d8 <dtoa_prf+0x178>
    13d2:	fb 01       	movw	r30, r22
    13d4:	31 96       	adiw	r30, 0x01	; 1
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <dtoa_prf+0x17c>
    13d8:	e1 e0       	ldi	r30, 0x01	; 1
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	2e 0f       	add	r18, r30
    13de:	3f 1f       	adc	r19, r31
    13e0:	bb 20       	and	r11, r11
    13e2:	21 f0       	breq	.+8      	; 0x13ec <dtoa_prf+0x18c>
    13e4:	eb 2d       	mov	r30, r11
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	31 96       	adiw	r30, 0x01	; 1
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <dtoa_prf+0x190>
    13ec:	e0 e0       	ldi	r30, 0x00	; 0
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	2e 0f       	add	r18, r30
    13f2:	3f 1f       	adc	r19, r31
    13f4:	e1 2f       	mov	r30, r17
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	2e 17       	cp	r18, r30
    13fa:	3f 07       	cpc	r19, r31
    13fc:	1c f4       	brge	.+6      	; 0x1404 <dtoa_prf+0x1a4>
    13fe:	12 1b       	sub	r17, r18
    1400:	21 2f       	mov	r18, r17
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <dtoa_prf+0x1a6>
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	8e 2d       	mov	r24, r14
    1408:	88 71       	andi	r24, 0x18	; 24
    140a:	59 f4       	brne	.+22     	; 0x1422 <dtoa_prf+0x1c2>
    140c:	f6 01       	movw	r30, r12
    140e:	82 2f       	mov	r24, r18
    1410:	30 e2       	ldi	r19, 0x20	; 32
    1412:	88 23       	and	r24, r24
    1414:	19 f0       	breq	.+6      	; 0x141c <dtoa_prf+0x1bc>
    1416:	31 93       	st	Z+, r19
    1418:	81 50       	subi	r24, 0x01	; 1
    141a:	fb cf       	rjmp	.-10     	; 0x1412 <dtoa_prf+0x1b2>
    141c:	c2 0e       	add	r12, r18
    141e:	d1 1c       	adc	r13, r1
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	99 23       	and	r25, r25
    1424:	29 f0       	breq	.+10     	; 0x1430 <dtoa_prf+0x1d0>
    1426:	d6 01       	movw	r26, r12
    1428:	9c 93       	st	X, r25
    142a:	f6 01       	movw	r30, r12
    142c:	31 96       	adiw	r30, 0x01	; 1
    142e:	6f 01       	movw	r12, r30
    1430:	51 11       	cpse	r21, r1
    1432:	0b c0       	rjmp	.+22     	; 0x144a <dtoa_prf+0x1ea>
    1434:	f6 01       	movw	r30, r12
    1436:	82 2f       	mov	r24, r18
    1438:	90 e3       	ldi	r25, 0x30	; 48
    143a:	88 23       	and	r24, r24
    143c:	19 f0       	breq	.+6      	; 0x1444 <dtoa_prf+0x1e4>
    143e:	91 93       	st	Z+, r25
    1440:	81 50       	subi	r24, 0x01	; 1
    1442:	fb cf       	rjmp	.-10     	; 0x143a <dtoa_prf+0x1da>
    1444:	c2 0e       	add	r12, r18
    1446:	d1 1c       	adc	r13, r1
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	0f 2d       	mov	r16, r15
    144c:	06 0f       	add	r16, r22
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	34 2f       	mov	r19, r20
    1452:	30 71       	andi	r19, 0x10	; 16
    1454:	44 ff       	sbrs	r20, 4
    1456:	03 c0       	rjmp	.+6      	; 0x145e <dtoa_prf+0x1fe>
    1458:	91 33       	cpi	r25, 0x31	; 49
    145a:	09 f4       	brne	.+2      	; 0x145e <dtoa_prf+0x1fe>
    145c:	01 50       	subi	r16, 0x01	; 1
    145e:	10 16       	cp	r1, r16
    1460:	24 f4       	brge	.+8      	; 0x146a <dtoa_prf+0x20a>
    1462:	09 30       	cpi	r16, 0x09	; 9
    1464:	18 f0       	brcs	.+6      	; 0x146c <dtoa_prf+0x20c>
    1466:	08 e0       	ldi	r16, 0x08	; 8
    1468:	01 c0       	rjmp	.+2      	; 0x146c <dtoa_prf+0x20c>
    146a:	01 e0       	ldi	r16, 0x01	; 1
    146c:	ab 01       	movw	r20, r22
    146e:	77 ff       	sbrs	r23, 7
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <dtoa_prf+0x216>
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	fb 01       	movw	r30, r22
    1478:	e4 1b       	sub	r30, r20
    147a:	f5 0b       	sbc	r31, r21
    147c:	a1 e0       	ldi	r26, 0x01	; 1
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ac 0f       	add	r26, r28
    1482:	bd 1f       	adc	r27, r29
    1484:	ea 0f       	add	r30, r26
    1486:	fb 1f       	adc	r31, r27
    1488:	8e e2       	ldi	r24, 0x2E	; 46
    148a:	a8 2e       	mov	r10, r24
    148c:	4b 01       	movw	r8, r22
    148e:	80 1a       	sub	r8, r16
    1490:	91 08       	sbc	r9, r1
    1492:	0b 2d       	mov	r16, r11
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	11 95       	neg	r17
    1498:	01 95       	neg	r16
    149a:	11 09       	sbc	r17, r1
    149c:	4f 3f       	cpi	r20, 0xFF	; 255
    149e:	bf ef       	ldi	r27, 0xFF	; 255
    14a0:	5b 07       	cpc	r21, r27
    14a2:	21 f4       	brne	.+8      	; 0x14ac <dtoa_prf+0x24c>
    14a4:	d6 01       	movw	r26, r12
    14a6:	ac 92       	st	X, r10
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	6d 01       	movw	r12, r26
    14ac:	64 17       	cp	r22, r20
    14ae:	75 07       	cpc	r23, r21
    14b0:	2c f0       	brlt	.+10     	; 0x14bc <dtoa_prf+0x25c>
    14b2:	84 16       	cp	r8, r20
    14b4:	95 06       	cpc	r9, r21
    14b6:	14 f4       	brge	.+4      	; 0x14bc <dtoa_prf+0x25c>
    14b8:	81 81       	ldd	r24, Z+1	; 0x01
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <dtoa_prf+0x25e>
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	41 50       	subi	r20, 0x01	; 1
    14c0:	51 09       	sbc	r21, r1
    14c2:	31 96       	adiw	r30, 0x01	; 1
    14c4:	d6 01       	movw	r26, r12
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	7d 01       	movw	r14, r26
    14ca:	40 17       	cp	r20, r16
    14cc:	51 07       	cpc	r21, r17
    14ce:	24 f0       	brlt	.+8      	; 0x14d8 <dtoa_prf+0x278>
    14d0:	d6 01       	movw	r26, r12
    14d2:	8c 93       	st	X, r24
    14d4:	67 01       	movw	r12, r14
    14d6:	e2 cf       	rjmp	.-60     	; 0x149c <dtoa_prf+0x23c>
    14d8:	64 17       	cp	r22, r20
    14da:	75 07       	cpc	r23, r21
    14dc:	39 f4       	brne	.+14     	; 0x14ec <dtoa_prf+0x28c>
    14de:	96 33       	cpi	r25, 0x36	; 54
    14e0:	20 f4       	brcc	.+8      	; 0x14ea <dtoa_prf+0x28a>
    14e2:	95 33       	cpi	r25, 0x35	; 53
    14e4:	19 f4       	brne	.+6      	; 0x14ec <dtoa_prf+0x28c>
    14e6:	31 11       	cpse	r19, r1
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <dtoa_prf+0x28c>
    14ea:	81 e3       	ldi	r24, 0x31	; 49
    14ec:	f6 01       	movw	r30, r12
    14ee:	80 83       	st	Z, r24
    14f0:	f7 01       	movw	r30, r14
    14f2:	82 2f       	mov	r24, r18
    14f4:	90 e2       	ldi	r25, 0x20	; 32
    14f6:	88 23       	and	r24, r24
    14f8:	19 f0       	breq	.+6      	; 0x1500 <dtoa_prf+0x2a0>
    14fa:	91 93       	st	Z+, r25
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	fb cf       	rjmp	.-10     	; 0x14f6 <dtoa_prf+0x296>
    1500:	f7 01       	movw	r30, r14
    1502:	e2 0f       	add	r30, r18
    1504:	f1 1d       	adc	r31, r1
    1506:	10 82       	st	Z, r1
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	29 96       	adiw	r28, 0x09	; 9
    150e:	ec e0       	ldi	r30, 0x0C	; 12
    1510:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__epilogue_restores__+0xc>

00001514 <__ftoa_engine>:
    1514:	28 30       	cpi	r18, 0x08	; 8
    1516:	08 f0       	brcs	.+2      	; 0x151a <__ftoa_engine+0x6>
    1518:	27 e0       	ldi	r18, 0x07	; 7
    151a:	33 27       	eor	r19, r19
    151c:	da 01       	movw	r26, r20
    151e:	99 0f       	add	r25, r25
    1520:	31 1d       	adc	r19, r1
    1522:	87 fd       	sbrc	r24, 7
    1524:	91 60       	ori	r25, 0x01	; 1
    1526:	00 96       	adiw	r24, 0x00	; 0
    1528:	61 05       	cpc	r22, r1
    152a:	71 05       	cpc	r23, r1
    152c:	39 f4       	brne	.+14     	; 0x153c <__ftoa_engine+0x28>
    152e:	32 60       	ori	r19, 0x02	; 2
    1530:	2e 5f       	subi	r18, 0xFE	; 254
    1532:	3d 93       	st	X+, r19
    1534:	30 e3       	ldi	r19, 0x30	; 48
    1536:	2a 95       	dec	r18
    1538:	e1 f7       	brne	.-8      	; 0x1532 <__ftoa_engine+0x1e>
    153a:	08 95       	ret
    153c:	9f 3f       	cpi	r25, 0xFF	; 255
    153e:	30 f0       	brcs	.+12     	; 0x154c <__ftoa_engine+0x38>
    1540:	80 38       	cpi	r24, 0x80	; 128
    1542:	71 05       	cpc	r23, r1
    1544:	61 05       	cpc	r22, r1
    1546:	09 f0       	breq	.+2      	; 0x154a <__ftoa_engine+0x36>
    1548:	3c 5f       	subi	r19, 0xFC	; 252
    154a:	3c 5f       	subi	r19, 0xFC	; 252
    154c:	3d 93       	st	X+, r19
    154e:	91 30       	cpi	r25, 0x01	; 1
    1550:	08 f0       	brcs	.+2      	; 0x1554 <__ftoa_engine+0x40>
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	91 1d       	adc	r25, r1
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	1f 93       	push	r17
    155c:	0f 93       	push	r16
    155e:	ff 92       	push	r15
    1560:	ef 92       	push	r14
    1562:	19 2f       	mov	r17, r25
    1564:	98 7f       	andi	r25, 0xF8	; 248
    1566:	96 95       	lsr	r25
    1568:	e9 2f       	mov	r30, r25
    156a:	96 95       	lsr	r25
    156c:	96 95       	lsr	r25
    156e:	e9 0f       	add	r30, r25
    1570:	ff 27       	eor	r31, r31
    1572:	e0 53       	subi	r30, 0x30	; 48
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	99 27       	eor	r25, r25
    1578:	33 27       	eor	r19, r19
    157a:	ee 24       	eor	r14, r14
    157c:	ff 24       	eor	r15, r15
    157e:	a7 01       	movw	r20, r14
    1580:	e7 01       	movw	r28, r14
    1582:	05 90       	lpm	r0, Z+
    1584:	08 94       	sec
    1586:	07 94       	ror	r0
    1588:	28 f4       	brcc	.+10     	; 0x1594 <__ftoa_engine+0x80>
    158a:	36 0f       	add	r19, r22
    158c:	e7 1e       	adc	r14, r23
    158e:	f8 1e       	adc	r15, r24
    1590:	49 1f       	adc	r20, r25
    1592:	51 1d       	adc	r21, r1
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	06 94       	lsr	r0
    159e:	a1 f7       	brne	.-24     	; 0x1588 <__ftoa_engine+0x74>
    15a0:	05 90       	lpm	r0, Z+
    15a2:	07 94       	ror	r0
    15a4:	28 f4       	brcc	.+10     	; 0x15b0 <__ftoa_engine+0x9c>
    15a6:	e7 0e       	add	r14, r23
    15a8:	f8 1e       	adc	r15, r24
    15aa:	49 1f       	adc	r20, r25
    15ac:	56 1f       	adc	r21, r22
    15ae:	c1 1d       	adc	r28, r1
    15b0:	77 0f       	add	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	66 1f       	adc	r22, r22
    15b8:	06 94       	lsr	r0
    15ba:	a1 f7       	brne	.-24     	; 0x15a4 <__ftoa_engine+0x90>
    15bc:	05 90       	lpm	r0, Z+
    15be:	07 94       	ror	r0
    15c0:	28 f4       	brcc	.+10     	; 0x15cc <__ftoa_engine+0xb8>
    15c2:	f8 0e       	add	r15, r24
    15c4:	49 1f       	adc	r20, r25
    15c6:	56 1f       	adc	r21, r22
    15c8:	c7 1f       	adc	r28, r23
    15ca:	d1 1d       	adc	r29, r1
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	66 1f       	adc	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	06 94       	lsr	r0
    15d6:	a1 f7       	brne	.-24     	; 0x15c0 <__ftoa_engine+0xac>
    15d8:	05 90       	lpm	r0, Z+
    15da:	07 94       	ror	r0
    15dc:	20 f4       	brcc	.+8      	; 0x15e6 <__ftoa_engine+0xd2>
    15de:	49 0f       	add	r20, r25
    15e0:	56 1f       	adc	r21, r22
    15e2:	c7 1f       	adc	r28, r23
    15e4:	d8 1f       	adc	r29, r24
    15e6:	99 0f       	add	r25, r25
    15e8:	66 1f       	adc	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	06 94       	lsr	r0
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__ftoa_engine+0xc8>
    15f2:	84 91       	lpm	r24, Z
    15f4:	10 95       	com	r17
    15f6:	17 70       	andi	r17, 0x07	; 7
    15f8:	41 f0       	breq	.+16     	; 0x160a <__ftoa_engine+0xf6>
    15fa:	d6 95       	lsr	r29
    15fc:	c7 95       	ror	r28
    15fe:	57 95       	ror	r21
    1600:	47 95       	ror	r20
    1602:	f7 94       	ror	r15
    1604:	e7 94       	ror	r14
    1606:	1a 95       	dec	r17
    1608:	c1 f7       	brne	.-16     	; 0x15fa <__ftoa_engine+0xe6>
    160a:	e6 e7       	ldi	r30, 0x76	; 118
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	68 94       	set
    1610:	15 90       	lpm	r1, Z+
    1612:	15 91       	lpm	r17, Z+
    1614:	35 91       	lpm	r19, Z+
    1616:	65 91       	lpm	r22, Z+
    1618:	95 91       	lpm	r25, Z+
    161a:	05 90       	lpm	r0, Z+
    161c:	7f e2       	ldi	r23, 0x2F	; 47
    161e:	73 95       	inc	r23
    1620:	e1 18       	sub	r14, r1
    1622:	f1 0a       	sbc	r15, r17
    1624:	43 0b       	sbc	r20, r19
    1626:	56 0b       	sbc	r21, r22
    1628:	c9 0b       	sbc	r28, r25
    162a:	d0 09       	sbc	r29, r0
    162c:	c0 f7       	brcc	.-16     	; 0x161e <__ftoa_engine+0x10a>
    162e:	e1 0c       	add	r14, r1
    1630:	f1 1e       	adc	r15, r17
    1632:	43 1f       	adc	r20, r19
    1634:	56 1f       	adc	r21, r22
    1636:	c9 1f       	adc	r28, r25
    1638:	d0 1d       	adc	r29, r0
    163a:	7e f4       	brtc	.+30     	; 0x165a <__ftoa_engine+0x146>
    163c:	70 33       	cpi	r23, 0x30	; 48
    163e:	11 f4       	brne	.+4      	; 0x1644 <__ftoa_engine+0x130>
    1640:	8a 95       	dec	r24
    1642:	e6 cf       	rjmp	.-52     	; 0x1610 <__ftoa_engine+0xfc>
    1644:	e8 94       	clt
    1646:	01 50       	subi	r16, 0x01	; 1
    1648:	30 f0       	brcs	.+12     	; 0x1656 <__ftoa_engine+0x142>
    164a:	08 0f       	add	r16, r24
    164c:	0a f4       	brpl	.+2      	; 0x1650 <__ftoa_engine+0x13c>
    164e:	00 27       	eor	r16, r16
    1650:	02 17       	cp	r16, r18
    1652:	08 f4       	brcc	.+2      	; 0x1656 <__ftoa_engine+0x142>
    1654:	20 2f       	mov	r18, r16
    1656:	23 95       	inc	r18
    1658:	02 2f       	mov	r16, r18
    165a:	7a 33       	cpi	r23, 0x3A	; 58
    165c:	28 f0       	brcs	.+10     	; 0x1668 <__ftoa_engine+0x154>
    165e:	79 e3       	ldi	r23, 0x39	; 57
    1660:	7d 93       	st	X+, r23
    1662:	2a 95       	dec	r18
    1664:	e9 f7       	brne	.-6      	; 0x1660 <__ftoa_engine+0x14c>
    1666:	10 c0       	rjmp	.+32     	; 0x1688 <__ftoa_engine+0x174>
    1668:	7d 93       	st	X+, r23
    166a:	2a 95       	dec	r18
    166c:	89 f6       	brne	.-94     	; 0x1610 <__ftoa_engine+0xfc>
    166e:	06 94       	lsr	r0
    1670:	97 95       	ror	r25
    1672:	67 95       	ror	r22
    1674:	37 95       	ror	r19
    1676:	17 95       	ror	r17
    1678:	17 94       	ror	r1
    167a:	e1 18       	sub	r14, r1
    167c:	f1 0a       	sbc	r15, r17
    167e:	43 0b       	sbc	r20, r19
    1680:	56 0b       	sbc	r21, r22
    1682:	c9 0b       	sbc	r28, r25
    1684:	d0 09       	sbc	r29, r0
    1686:	98 f0       	brcs	.+38     	; 0x16ae <__ftoa_engine+0x19a>
    1688:	23 95       	inc	r18
    168a:	7e 91       	ld	r23, -X
    168c:	73 95       	inc	r23
    168e:	7a 33       	cpi	r23, 0x3A	; 58
    1690:	08 f0       	brcs	.+2      	; 0x1694 <__ftoa_engine+0x180>
    1692:	70 e3       	ldi	r23, 0x30	; 48
    1694:	7c 93       	st	X, r23
    1696:	20 13       	cpse	r18, r16
    1698:	b8 f7       	brcc	.-18     	; 0x1688 <__ftoa_engine+0x174>
    169a:	7e 91       	ld	r23, -X
    169c:	70 61       	ori	r23, 0x10	; 16
    169e:	7d 93       	st	X+, r23
    16a0:	30 f0       	brcs	.+12     	; 0x16ae <__ftoa_engine+0x19a>
    16a2:	83 95       	inc	r24
    16a4:	71 e3       	ldi	r23, 0x31	; 49
    16a6:	7d 93       	st	X+, r23
    16a8:	70 e3       	ldi	r23, 0x30	; 48
    16aa:	2a 95       	dec	r18
    16ac:	e1 f7       	brne	.-8      	; 0x16a6 <__ftoa_engine+0x192>
    16ae:	11 24       	eor	r1, r1
    16b0:	ef 90       	pop	r14
    16b2:	ff 90       	pop	r15
    16b4:	0f 91       	pop	r16
    16b6:	1f 91       	pop	r17
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	99 27       	eor	r25, r25
    16be:	87 fd       	sbrc	r24, 7
    16c0:	90 95       	com	r25
    16c2:	08 95       	ret

000016c4 <strnlen_P>:
    16c4:	fc 01       	movw	r30, r24
    16c6:	05 90       	lpm	r0, Z+
    16c8:	61 50       	subi	r22, 0x01	; 1
    16ca:	70 40       	sbci	r23, 0x00	; 0
    16cc:	01 10       	cpse	r0, r1
    16ce:	d8 f7       	brcc	.-10     	; 0x16c6 <strnlen_P+0x2>
    16d0:	80 95       	com	r24
    16d2:	90 95       	com	r25
    16d4:	8e 0f       	add	r24, r30
    16d6:	9f 1f       	adc	r25, r31
    16d8:	08 95       	ret

000016da <strnlen>:
    16da:	fc 01       	movw	r30, r24
    16dc:	61 50       	subi	r22, 0x01	; 1
    16de:	70 40       	sbci	r23, 0x00	; 0
    16e0:	01 90       	ld	r0, Z+
    16e2:	01 10       	cpse	r0, r1
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <strnlen+0x2>
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	8e 0f       	add	r24, r30
    16ec:	9f 1f       	adc	r25, r31
    16ee:	08 95       	ret

000016f0 <fputc>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	fb 01       	movw	r30, r22
    16fa:	23 81       	ldd	r18, Z+3	; 0x03
    16fc:	21 fd       	sbrc	r18, 1
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <fputc+0x16>
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	2c c0       	rjmp	.+88     	; 0x175e <fputc+0x6e>
    1706:	22 ff       	sbrs	r18, 2
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <fputc+0x46>
    170a:	46 81       	ldd	r20, Z+6	; 0x06
    170c:	57 81       	ldd	r21, Z+7	; 0x07
    170e:	24 81       	ldd	r18, Z+4	; 0x04
    1710:	35 81       	ldd	r19, Z+5	; 0x05
    1712:	42 17       	cp	r20, r18
    1714:	53 07       	cpc	r21, r19
    1716:	44 f4       	brge	.+16     	; 0x1728 <fputc+0x38>
    1718:	a0 81       	ld	r26, Z
    171a:	b1 81       	ldd	r27, Z+1	; 0x01
    171c:	9d 01       	movw	r18, r26
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	31 83       	std	Z+1, r19	; 0x01
    1724:	20 83       	st	Z, r18
    1726:	8c 93       	st	X, r24
    1728:	26 81       	ldd	r18, Z+6	; 0x06
    172a:	37 81       	ldd	r19, Z+7	; 0x07
    172c:	2f 5f       	subi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	37 83       	std	Z+7, r19	; 0x07
    1732:	26 83       	std	Z+6, r18	; 0x06
    1734:	14 c0       	rjmp	.+40     	; 0x175e <fputc+0x6e>
    1736:	8b 01       	movw	r16, r22
    1738:	ec 01       	movw	r28, r24
    173a:	fb 01       	movw	r30, r22
    173c:	00 84       	ldd	r0, Z+8	; 0x08
    173e:	f1 85       	ldd	r31, Z+9	; 0x09
    1740:	e0 2d       	mov	r30, r0
    1742:	09 95       	icall
    1744:	89 2b       	or	r24, r25
    1746:	e1 f6       	brne	.-72     	; 0x1700 <fputc+0x10>
    1748:	d8 01       	movw	r26, r16
    174a:	16 96       	adiw	r26, 0x06	; 6
    174c:	8d 91       	ld	r24, X+
    174e:	9c 91       	ld	r25, X
    1750:	17 97       	sbiw	r26, 0x07	; 7
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	17 96       	adiw	r26, 0x07	; 7
    1756:	9c 93       	st	X, r25
    1758:	8e 93       	st	-X, r24
    175a:	16 97       	sbiw	r26, 0x06	; 6
    175c:	ce 01       	movw	r24, r28
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <__ultoa_invert>:
    1768:	fa 01       	movw	r30, r20
    176a:	aa 27       	eor	r26, r26
    176c:	28 30       	cpi	r18, 0x08	; 8
    176e:	51 f1       	breq	.+84     	; 0x17c4 <__ultoa_invert+0x5c>
    1770:	20 31       	cpi	r18, 0x10	; 16
    1772:	81 f1       	breq	.+96     	; 0x17d4 <__ultoa_invert+0x6c>
    1774:	e8 94       	clt
    1776:	6f 93       	push	r22
    1778:	6e 7f       	andi	r22, 0xFE	; 254
    177a:	6e 5f       	subi	r22, 0xFE	; 254
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	af 4f       	sbci	r26, 0xFF	; 255
    1784:	b1 e0       	ldi	r27, 0x01	; 1
    1786:	3e d0       	rcall	.+124    	; 0x1804 <__ultoa_invert+0x9c>
    1788:	b4 e0       	ldi	r27, 0x04	; 4
    178a:	3c d0       	rcall	.+120    	; 0x1804 <__ultoa_invert+0x9c>
    178c:	67 0f       	add	r22, r23
    178e:	78 1f       	adc	r23, r24
    1790:	89 1f       	adc	r24, r25
    1792:	9a 1f       	adc	r25, r26
    1794:	a1 1d       	adc	r26, r1
    1796:	68 0f       	add	r22, r24
    1798:	79 1f       	adc	r23, r25
    179a:	8a 1f       	adc	r24, r26
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	6a 0f       	add	r22, r26
    17a2:	71 1d       	adc	r23, r1
    17a4:	81 1d       	adc	r24, r1
    17a6:	91 1d       	adc	r25, r1
    17a8:	a1 1d       	adc	r26, r1
    17aa:	20 d0       	rcall	.+64     	; 0x17ec <__ultoa_invert+0x84>
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__ultoa_invert+0x48>
    17ae:	68 94       	set
    17b0:	3f 91       	pop	r19
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	26 9f       	mul	r18, r22
    17b6:	11 24       	eor	r1, r1
    17b8:	30 19       	sub	r19, r0
    17ba:	30 5d       	subi	r19, 0xD0	; 208
    17bc:	31 93       	st	Z+, r19
    17be:	de f6       	brtc	.-74     	; 0x1776 <__ultoa_invert+0xe>
    17c0:	cf 01       	movw	r24, r30
    17c2:	08 95       	ret
    17c4:	46 2f       	mov	r20, r22
    17c6:	47 70       	andi	r20, 0x07	; 7
    17c8:	40 5d       	subi	r20, 0xD0	; 208
    17ca:	41 93       	st	Z+, r20
    17cc:	b3 e0       	ldi	r27, 0x03	; 3
    17ce:	0f d0       	rcall	.+30     	; 0x17ee <__ultoa_invert+0x86>
    17d0:	c9 f7       	brne	.-14     	; 0x17c4 <__ultoa_invert+0x5c>
    17d2:	f6 cf       	rjmp	.-20     	; 0x17c0 <__ultoa_invert+0x58>
    17d4:	46 2f       	mov	r20, r22
    17d6:	4f 70       	andi	r20, 0x0F	; 15
    17d8:	40 5d       	subi	r20, 0xD0	; 208
    17da:	4a 33       	cpi	r20, 0x3A	; 58
    17dc:	18 f0       	brcs	.+6      	; 0x17e4 <__ultoa_invert+0x7c>
    17de:	49 5d       	subi	r20, 0xD9	; 217
    17e0:	31 fd       	sbrc	r19, 1
    17e2:	40 52       	subi	r20, 0x20	; 32
    17e4:	41 93       	st	Z+, r20
    17e6:	02 d0       	rcall	.+4      	; 0x17ec <__ultoa_invert+0x84>
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__ultoa_invert+0x6c>
    17ea:	ea cf       	rjmp	.-44     	; 0x17c0 <__ultoa_invert+0x58>
    17ec:	b4 e0       	ldi	r27, 0x04	; 4
    17ee:	a6 95       	lsr	r26
    17f0:	97 95       	ror	r25
    17f2:	87 95       	ror	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	ba 95       	dec	r27
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__ultoa_invert+0x86>
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	61 05       	cpc	r22, r1
    1800:	71 05       	cpc	r23, r1
    1802:	08 95       	ret
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	0a 2e       	mov	r0, r26
    180a:	06 94       	lsr	r0
    180c:	57 95       	ror	r21
    180e:	47 95       	ror	r20
    1810:	37 95       	ror	r19
    1812:	27 95       	ror	r18
    1814:	ba 95       	dec	r27
    1816:	c9 f7       	brne	.-14     	; 0x180a <__ultoa_invert+0xa2>
    1818:	62 0f       	add	r22, r18
    181a:	73 1f       	adc	r23, r19
    181c:	84 1f       	adc	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	a0 1d       	adc	r26, r0
    1822:	08 95       	ret

00001824 <__prologue_saves__>:
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	ca 1b       	sub	r28, r26
    184e:	db 0b       	sbc	r29, r27
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	09 94       	ijmp

0000185c <__epilogue_restores__>:
    185c:	2a 88       	ldd	r2, Y+18	; 0x12
    185e:	39 88       	ldd	r3, Y+17	; 0x11
    1860:	48 88       	ldd	r4, Y+16	; 0x10
    1862:	5f 84       	ldd	r5, Y+15	; 0x0f
    1864:	6e 84       	ldd	r6, Y+14	; 0x0e
    1866:	7d 84       	ldd	r7, Y+13	; 0x0d
    1868:	8c 84       	ldd	r8, Y+12	; 0x0c
    186a:	9b 84       	ldd	r9, Y+11	; 0x0b
    186c:	aa 84       	ldd	r10, Y+10	; 0x0a
    186e:	b9 84       	ldd	r11, Y+9	; 0x09
    1870:	c8 84       	ldd	r12, Y+8	; 0x08
    1872:	df 80       	ldd	r13, Y+7	; 0x07
    1874:	ee 80       	ldd	r14, Y+6	; 0x06
    1876:	fd 80       	ldd	r15, Y+5	; 0x05
    1878:	0c 81       	ldd	r16, Y+4	; 0x04
    187a:	1b 81       	ldd	r17, Y+3	; 0x03
    187c:	aa 81       	ldd	r26, Y+2	; 0x02
    187e:	b9 81       	ldd	r27, Y+1	; 0x01
    1880:	ce 0f       	add	r28, r30
    1882:	d1 1d       	adc	r29, r1
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	ed 01       	movw	r28, r26
    1890:	08 95       	ret

00001892 <_exit>:
    1892:	f8 94       	cli

00001894 <__stop_program>:
    1894:	ff cf       	rjmp	.-2      	; 0x1894 <__stop_program>
