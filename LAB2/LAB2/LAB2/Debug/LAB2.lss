
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095e  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045e  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b6  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART_Module.h"

#define ONE_SECOND 500000UL
int main(void)
{
	DDRC |= 0x30; //I2C PORTS
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 4);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8a b9       	out	0x0a, r24	; 10
	Timer1_Init();
	DHT22_init();
	Roll_Init();
	Timer2_Init();
	Timer0_Init();*/
	USART_Init();
  b2:	0e 94 65 00 	call	0xca	; 0xca <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x20>
  c6:	00 00       	nop
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x22>

000000ca <USART_Init>:

unsigned char buffer_pos = 0;   // Posici?n actual en el buffer

void USART_Init()
{
	DDRD |= (1 << TX_PORT);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << RX_PORT);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	8a b9       	out	0x0a, r24	; 10
	//CONTROL AND STATUS REGISTER UCSRB
	//UCSRB |= (1 << RXCIE); // RX Interrupt enable
	//UCSRB |= (1 << TXCIE); // TX Interrupt enable
	//UCSRB |= (1 << UDRIE); // USART Data Register Empty Interrupt Enable
	
	UCSR0B |= (1 << TXEN0); // Enable TX
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // Enable RX
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 83       	st	Z, r24
	
	
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	//Baud Rate Register UBRRL UBRRH
	// 9600 Baud Rate 16MHZ clock
	UBRR0H = 0x00;
  f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67;
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Control & Status Register UCSRA
	UCSR0A = 0x00;
  fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
