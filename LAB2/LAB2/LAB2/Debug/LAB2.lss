
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000772  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800152  00800152  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d88  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f54  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f64  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00004700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000861  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d2d  00000000  00000000  00005401  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT22_init>:

volatile unsigned int AveHum = 0;

// Funcion para configurar el pin del DHT22
void DHT22_init() {
	DDRD |= (1 << DHT22_PIN);   // Configura el pin como salida
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DHT22_PIN);  // Pone el pin en alto
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	81 ee       	ldi	r24, 0xE1	; 225
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT22_init+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT22_init+0x1c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <LCD_Command>:
	LCD_Command(LCD_CLEAR);
}

void LCD_Command(unsigned char command)
{
	PORTB &= ~(0x3F);
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	90 7c       	andi	r25, 0xC0	; 192
  ca:	95 b9       	out	0x05, r25	; 5
	PORTB |= (command & 0x3F);
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	28 2f       	mov	r18, r24
  d0:	2f 73       	andi	r18, 0x3F	; 63
  d2:	92 2b       	or	r25, r18
  d4:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	93 7f       	andi	r25, 0xF3	; 243
  da:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((command >> 4) & 0x0C);
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	82 95       	swap	r24
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8c 70       	andi	r24, 0x0C	; 12
  e4:	89 2b       	or	r24, r25
  e6:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << RS_LCD); //Colocamos RS_LCD en 0
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	85 e3       	ldi	r24, 0x35	; 53
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Command+0x30>
  fa:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	88 b9       	out	0x08, r24	; 8
 102:	8f e8       	ldi	r24, 0x8F	; 143
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Command+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Command+0x46>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_Init>:
 */ 
#include "LCD_Module.h"

void LCD_Init()
{
	DDRB |= 0x3F; 
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8f 63       	ori	r24, 0x3F	; 63
 114:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0x0C;
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8c 60       	ori	r24, 0x0C	; 12
 11a:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<RS_LCD) | (1 << EN_LCD);
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e5       	ldi	r24, 0x5F	; 95
 124:	9a ee       	ldi	r25, 0xEA	; 234
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Init+0x16>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Init+0x1c>
 12c:	00 00       	nop
	
	//Comandos Iniciales al encender EL LCD
	_delay_ms(15);
	LCD_Command(0x30);
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	90 e4       	ldi	r25, 0x40	; 64
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Init+0x28>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0x2e>
 13e:	00 00       	nop
	_delay_ms(4.1);
	LCD_Command(0x30);
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e8       	ldi	r24, 0x8F	; 143
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Init+0x3a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Init+0x40>
 150:	00 00       	nop
	_delay_us(100);
	LCD_Command(0x30);
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
	
	//Comandos para configurar EL LCD
	LCD_Command(LCD_INTERFACE_DATA1);
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
	LCD_Command(LCD_DISPLAY_ON_CURSOR_OF);
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
	LCD_Command(LCD_CLEAR);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
 16a:	08 95       	ret

0000016c <LCD_Write_Char>:
	_delay_us(100);
}

void LCD_Write_Char(unsigned char character)
{
	PORTC |= (1 << RS_LCD);
 16c:	98 b1       	in	r25, 0x08	; 8
 16e:	91 60       	ori	r25, 0x01	; 1
 170:	98 b9       	out	0x08, r25	; 8
	PORTB &= ~(0x3F);
 172:	95 b1       	in	r25, 0x05	; 5
 174:	90 7c       	andi	r25, 0xC0	; 192
 176:	95 b9       	out	0x05, r25	; 5
	PORTB |= (character & 0x3F);
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	28 2f       	mov	r18, r24
 17c:	2f 73       	andi	r18, 0x3F	; 63
 17e:	92 2b       	or	r25, r18
 180:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
 182:	9b b1       	in	r25, 0x0b	; 11
 184:	93 7f       	andi	r25, 0xF3	; 243
 186:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((character >> 4) & 0x0C);
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	82 95       	swap	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	8c 70       	andi	r24, 0x0C	; 12
 190:	89 2b       	or	r24, r25
 192:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	88 b9       	out	0x08, r24	; 8
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Write_Char+0x30>
 1a0:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Write_Char+0x40>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Write_Char+0x46>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <LCD_Write_String>:
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	while(*str)
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <LCD_Write_String+0xe>
	{
		LCD_Write_Char(*str++);
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Write_Char>
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
	while(*str)
 1c4:	88 81       	ld	r24, Y
 1c6:	81 11       	cpse	r24, r1
 1c8:	fa cf       	rjmp	.-12     	; 0x1be <LCD_Write_String+0x8>
	{
		LCD_Write_Char(*str++);
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCD_SetCursor>:
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
 1d0:	62 30       	cpi	r22, 0x02	; 2
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <LCD_SetCursor+0x10>
 1d4:	63 30       	cpi	r22, 0x03	; 3
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <LCD_SetCursor+0x14>
 1d8:	61 30       	cpi	r22, 0x01	; 1
 1da:	31 f0       	breq	.+12     	; 0x1e8 <LCD_SetCursor+0x18>
		case 0: address = 0x00; break;  // Primera fila
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <LCD_SetCursor+0x1a>
		case 1: address = 0x40; break;  // Segunda fila
		case 2: address = 0x14; break;  // Tercera fila 
 1e0:	94 e1       	ldi	r25, 0x14	; 20
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <LCD_SetCursor+0x1a>
		case 3: address = 0x54; break;  // Cuarta fila 
 1e4:	94 e5       	ldi	r25, 0x54	; 84
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <LCD_SetCursor+0x1a>
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
		case 0: address = 0x00; break;  // Primera fila
		case 1: address = 0x40; break;  // Segunda fila
 1e8:	90 e4       	ldi	r25, 0x40	; 64
		case 2: address = 0x14; break;  // Tercera fila 
		case 3: address = 0x54; break;  // Cuarta fila 
		default: address = 0x00;
	}
	LCD_Command(LCD_CHANGE_LINE | (address + col));  // Comando "Set DDRAM Address"
 1ea:	89 0f       	add	r24, r25
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
 1f2:	08 95       	ret

000001f4 <main>:
#include "USART_Module.h"

#define TIME_CONSTANT_MS 200
int main(void)
{
	DDRC |= 0x30; //I2C PORTS
 1f4:	87 b1       	in	r24, 0x07	; 7
 1f6:	80 63       	ori	r24, 0x30	; 48
 1f8:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 4);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
	/*twi_init();
	Timer1_Init();
	*/
	DHT22_init();
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT22_init>
	UltraSonicInit();
 204:	0e 94 c9 01 	call	0x392	; 0x392 <UltraSonicInit>
	LCD_Init();
 208:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Init>
	Roll_Init();
 20c:	0e 94 45 01 	call	0x28a	; 0x28a <Roll_Init>
	USART_Init();
 210:	0e 94 33 02 	call	0x466	; 0x466 <USART_Init>
	Timer0_Init();
 214:	0e 94 49 01 	call	0x292	; 0x292 <Timer0_Init>
	Timer2_Init();
 218:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Timer2_Init>
	//RTC_updateTime("19:54:00");
	//RTC_updateDate("10/04/2025-5");
	
	txFlag = 0;
 21c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <txFlag>
	rxFlag = 0;
 220:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <rxFlag>
	indexBuffer = 0;
 224:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indexBuffer>
	sei();
 228:	78 94       	sei
	float UltraSonicData[10];
	unsigned int AverageTemp = 0;
	unsigned int AverageHum= 0;
	unsigned char buffer[20];
	unsigned char result = 0;
	Timer2_reset();
 22a:	0e 94 bb 01 	call	0x376	; 0x376 <Timer2_reset>
	Timer2_Stop();
 22e:	0e 94 c2 01 	call	0x384	; 0x384 <Timer2_Stop>
	
	LCD_Command(LCD_CLEAR);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Command>
	LCD_SetCursor(0,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_SetCursor>
	LCD_Write_String("---------------------------------------");
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Write_String>
	LCD_SetCursor(0,1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_SetCursor>
	LCD_Write_String("      WAIT FOR     ");
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Write_String>
	LCD_SetCursor(0,2);
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_SetCursor>
	LCD_Write_String("        DATA        ");
 260:	8c e3       	ldi	r24, 0x3C	; 60
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Write_String>
	LCD_SetCursor(0,3);
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_SetCursor>
	LCD_Write_String("--------------------");
 270:	83 e1       	ldi	r24, 0x13	; 19
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Write_String>
	
	Timer0_reset();
 278:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Timer0_reset>
	Timer0_Stop();
 27c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Timer0_Stop>
	while (1)
	{
		PORTD ^= (1 << 4);
 280:	9b b1       	in	r25, 0x0b	; 11
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	89 27       	eor	r24, r25
 286:	8b b9       	out	0x0b, r24	; 11
 288:	fb cf       	rjmp	.-10     	; 0x280 <main+0x8c>

0000028a <Roll_Init>:
	}
	return 0;
}
void Roll_Init()
{
	DDRD &= ~(1 << ROLL_PIN);
 28a:	8a b1       	in	r24, 0x0a	; 10
 28c:	8f 7b       	andi	r24, 0xBF	; 191
 28e:	8a b9       	out	0x0a, r24	; 10
 290:	08 95       	ret

00000292 <Timer0_Init>:
	}
	else
	{
		return 0;
	}
}
 292:	14 bc       	out	0x24, r1	; 36
 294:	15 bc       	out	0x25, r1	; 37
 296:	ee e6       	ldi	r30, 0x6E	; 110
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 83       	st	Z, r24
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	85 60       	ori	r24, 0x05	; 5
 2a4:	85 bd       	out	0x25, r24	; 37
 2a6:	16 bc       	out	0x26, r1	; 38
 2a8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <overflow_count0>
 2ac:	08 95       	ret

000002ae <__vector_16>:
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <overflow_count0>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <overflow_count0>
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <Timer0_reset>:
	return TCNT0;
}

void Timer0_reset()
{
	TCNT0 = 0;
 2d0:	16 bc       	out	0x26, r1	; 38
	overflow_count0 = 0;
 2d2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <overflow_count0>
 2d6:	08 95       	ret

000002d8 <Timer0_Stop>:
}
void Timer0_Stop()
{
	TCCR0B = 0;
 2d8:	15 bc       	out	0x25, r1	; 37
 2da:	08 95       	ret

000002dc <Timer2_Init>:
#include <stdint.h>
#include <avr/interrupt.h>

void Timer2_Init()
{
	TCCR2A = 0; //Modo normal
 2dc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	
	TIMSK2 |= (1 << TOIE2);
 2e0:	e0 e7       	ldi	r30, 0x70	; 112
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	80 83       	st	Z, r24
	TCCR2B = (0 << CS22) | (1 << CS21) | (0<< CS20); //preescaler 8 Cada TICK 0.5us
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 0; //Reiniciar Timer
 2f0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	overflow_count2 = 0; //Reiniciar Overflow
 2f4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <overflow_count2+0x1>
 2f8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <overflow_count2>
 2fc:	08 95       	ret

000002fe <__vector_9>:

	unsigned int tiempo_us = (overflow_count2 * 128) + (unsigned int)(Timer2_getCount() * 0.5);
	return tiempo_us;
}
ISR(TIMER2_OVF_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
	overflow_count2++;
 30c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <overflow_count2>
 310:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <overflow_count2+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <overflow_count2+0x1>
 31a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <overflow_count2>
}
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <Timer2_getCount>:

unsigned char Timer2_getCount()
{
	return TCNT2;
 32c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
}
 330:	08 95       	ret

00000332 <Timer2_getTime>:
	TCNT2 = 0; //Reiniciar Timer
	overflow_count2 = 0; //Reiniciar Overflow
}

unsigned int Timer2_getTime()
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29

	unsigned int tiempo_us = (overflow_count2 * 128) + (unsigned int)(Timer2_getCount() * 0.5);
 336:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <overflow_count2>
 33a:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <overflow_count2+0x1>
 33e:	eb 01       	movw	r28, r22
 340:	d6 95       	lsr	r29
 342:	dc 2f       	mov	r29, r28
 344:	cc 27       	eor	r28, r28
 346:	d7 95       	ror	r29
 348:	c7 95       	ror	r28
 34a:	0e 94 96 01 	call	0x32c	; 0x32c <Timer2_getCount>
 34e:	68 2f       	mov	r22, r24
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 be 02 	call	0x57c	; 0x57c <__floatsisf>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	0e 94 22 03 	call	0x644	; 0x644 <__mulsf3>
 366:	0e 94 8d 02 	call	0x51a	; 0x51a <__fixunssfsi>
 36a:	ce 01       	movw	r24, r28
 36c:	86 0f       	add	r24, r22
 36e:	97 1f       	adc	r25, r23
	return tiempo_us;
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <Timer2_reset>:
	return TCNT2;
}

void Timer2_reset()
{
	TCNT2 = 0;
 376:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	overflow_count2 = 0;
 37a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <overflow_count2+0x1>
 37e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <overflow_count2>
 382:	08 95       	ret

00000384 <Timer2_Stop>:
}

void Timer2_Stop()
{
	TCCR2B = 0;
 384:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 388:	08 95       	ret

0000038a <Timer2_Start>:
}

void Timer2_Start()
{
	TCCR2B = (0 << CS22) | (1 << CS21) | (0<< CS20);
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 390:	08 95       	ret

00000392 <UltraSonicInit>:
	LCD_SetCursor(0,2);
	LCD_Write_String("            ");
	LCD_SetCursor(0,3);
	LCD_Write_String("--------------------");
	_delay_ms(4000);
}
 392:	87 b1       	in	r24, 0x07	; 7
 394:	84 60       	ori	r24, 0x04	; 4
 396:	87 b9       	out	0x07, r24	; 7
 398:	87 b1       	in	r24, 0x07	; 7
 39a:	87 7f       	andi	r24, 0xF7	; 247
 39c:	87 b9       	out	0x07, r24	; 7
 39e:	e8 e6       	ldi	r30, 0x68	; 104
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 83       	st	Z, r24
 3a8:	ec e6       	ldi	r30, 0x6C	; 108
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	80 83       	st	Z, r24
 3b2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <start_time+0x1>
 3b6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <start_time>
 3ba:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
 3be:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
 3c2:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <current_state>
 3c6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <distance_cm>
 3ca:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <distance_cm+0x1>
 3ce:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <distance_cm+0x2>
 3d2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <distance_cm+0x3>
 3d6:	08 95       	ret

000003d8 <__vector_4>:
ISR(PCINT1_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	if(PINC & (1 << ECHO) && current_state == STATE_TRIGGER_SENT)
 3fa:	33 9b       	sbis	0x06, 3	; 6
 3fc:	12 c0       	rjmp	.+36     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fe:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <current_state>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	71 f4       	brne	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		Timer2_Start();
 406:	0e 94 c5 01 	call	0x38a	; 0x38a <Timer2_Start>
		Timer2_reset();              // Reiniciar contador
 40a:	0e 94 bb 01 	call	0x376	; 0x376 <Timer2_reset>
		start_time = Timer2_getTime();     // Leer timer (casi cero)
 40e:	0e 94 99 01 	call	0x332	; 0x332 <Timer2_getTime>
 412:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <start_time+0x1>
 416:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <start_time>
		current_state = STATE_MEASURING;
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <current_state>
 420:	11 c0       	rjmp	.+34     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	}
	else if(current_state == STATE_MEASURING && !(PINC & (1 << ECHO)))
 422:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <current_state>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	69 f4       	brne	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42a:	33 99       	sbic	0x06, 3	; 6
 42c:	0b c0       	rjmp	.+22     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		end_time = Timer2_getTime();
 42e:	0e 94 99 01 	call	0x332	; 0x332 <Timer2_getTime>
 432:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 436:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
		Timer2_Stop();
 43a:	0e 94 c2 01 	call	0x384	; 0x384 <Timer2_Stop>
		current_state = STATE_READY;
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <current_state>
	}
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <USART_Init>:
			indexBuffer++;
		}
		else
		{
			indexBuffer = 0;
			txFlag = 1;
 466:	8a b1       	in	r24, 0x0a	; 10
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	8a b9       	out	0x0a, r24	; 10
 46c:	8a b1       	in	r24, 0x0a	; 10
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	8a b9       	out	0x0a, r24	; 10
 472:	e1 ec       	ldi	r30, 0xC1	; 193
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	80 83       	st	Z, r24
 47c:	80 81       	ld	r24, Z
 47e:	80 64       	ori	r24, 0x40	; 64
 480:	80 83       	st	Z, r24
 482:	80 81       	ld	r24, Z
 484:	88 60       	ori	r24, 0x08	; 8
 486:	80 83       	st	Z, r24
 488:	80 81       	ld	r24, Z
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	80 83       	st	Z, r24
 48e:	e2 ec       	ldi	r30, 0xC2	; 194
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	86 60       	ori	r24, 0x06	; 6
 496:	80 83       	st	Z, r24
 498:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 49c:	87 e6       	ldi	r24, 0x67	; 103
 49e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4a2:	08 95       	ret

000004a4 <getUSARTdata>:
	}
}

unsigned char getUSARTdata()
{
	return UDR0;
 4a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 4a8:	08 95       	ret

000004aa <__vector_18>:

ISR(USART_RX_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	rxFlag = 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <rxFlag>
	dataRX = getUSARTdata();
 4d2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <getUSARTdata>
 4d6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <dataRX>
	
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__vector_20>:
ISR(USART_TX_vect)
{
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	8f 93       	push	r24
	txFlag = 1;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <txFlag>
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__fixunssfsi>:
 51a:	0e 94 01 03 	call	0x602	; 0x602 <__fp_splitA>
 51e:	88 f0       	brcs	.+34     	; 0x542 <__fixunssfsi+0x28>
 520:	9f 57       	subi	r25, 0x7F	; 127
 522:	98 f0       	brcs	.+38     	; 0x54a <__fixunssfsi+0x30>
 524:	b9 2f       	mov	r27, r25
 526:	99 27       	eor	r25, r25
 528:	b7 51       	subi	r27, 0x17	; 23
 52a:	b0 f0       	brcs	.+44     	; 0x558 <__fixunssfsi+0x3e>
 52c:	e1 f0       	breq	.+56     	; 0x566 <__fixunssfsi+0x4c>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	1a f0       	brmi	.+6      	; 0x53e <__fixunssfsi+0x24>
 538:	ba 95       	dec	r27
 53a:	c9 f7       	brne	.-14     	; 0x52e <__fixunssfsi+0x14>
 53c:	14 c0       	rjmp	.+40     	; 0x566 <__fixunssfsi+0x4c>
 53e:	b1 30       	cpi	r27, 0x01	; 1
 540:	91 f0       	breq	.+36     	; 0x566 <__fixunssfsi+0x4c>
 542:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_zero>
 546:	b1 e0       	ldi	r27, 0x01	; 1
 548:	08 95       	ret
 54a:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_zero>
 54e:	67 2f       	mov	r22, r23
 550:	78 2f       	mov	r23, r24
 552:	88 27       	eor	r24, r24
 554:	b8 5f       	subi	r27, 0xF8	; 248
 556:	39 f0       	breq	.+14     	; 0x566 <__fixunssfsi+0x4c>
 558:	b9 3f       	cpi	r27, 0xF9	; 249
 55a:	cc f3       	brlt	.-14     	; 0x54e <__fixunssfsi+0x34>
 55c:	86 95       	lsr	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b3 95       	inc	r27
 564:	d9 f7       	brne	.-10     	; 0x55c <__fixunssfsi+0x42>
 566:	3e f4       	brtc	.+14     	; 0x576 <__fixunssfsi+0x5c>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__floatunsisf>:
 578:	e8 94       	clt
 57a:	09 c0       	rjmp	.+18     	; 0x58e <__floatsisf+0x12>

0000057c <__floatsisf>:
 57c:	97 fb       	bst	r25, 7
 57e:	3e f4       	brtc	.+14     	; 0x58e <__floatsisf+0x12>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	99 23       	and	r25, r25
 590:	a9 f0       	breq	.+42     	; 0x5bc <__floatsisf+0x40>
 592:	f9 2f       	mov	r31, r25
 594:	96 e9       	ldi	r25, 0x96	; 150
 596:	bb 27       	eor	r27, r27
 598:	93 95       	inc	r25
 59a:	f6 95       	lsr	r31
 59c:	87 95       	ror	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f1 11       	cpse	r31, r1
 5a6:	f8 cf       	rjmp	.-16     	; 0x598 <__floatsisf+0x1c>
 5a8:	fa f4       	brpl	.+62     	; 0x5e8 <__floatsisf+0x6c>
 5aa:	bb 0f       	add	r27, r27
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__floatsisf+0x36>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	1b c0       	rjmp	.+54     	; 0x5e8 <__floatsisf+0x6c>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	16 c0       	rjmp	.+44     	; 0x5e8 <__floatsisf+0x6c>
 5bc:	88 23       	and	r24, r24
 5be:	11 f0       	breq	.+4      	; 0x5c4 <__floatsisf+0x48>
 5c0:	96 e9       	ldi	r25, 0x96	; 150
 5c2:	11 c0       	rjmp	.+34     	; 0x5e6 <__floatsisf+0x6a>
 5c4:	77 23       	and	r23, r23
 5c6:	21 f0       	breq	.+8      	; 0x5d0 <__floatsisf+0x54>
 5c8:	9e e8       	ldi	r25, 0x8E	; 142
 5ca:	87 2f       	mov	r24, r23
 5cc:	76 2f       	mov	r23, r22
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <__floatsisf+0x5e>
 5d0:	66 23       	and	r22, r22
 5d2:	71 f0       	breq	.+28     	; 0x5f0 <__floatsisf+0x74>
 5d4:	96 e8       	ldi	r25, 0x86	; 134
 5d6:	86 2f       	mov	r24, r22
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	2a f0       	brmi	.+10     	; 0x5e8 <__floatsisf+0x6c>
 5de:	9a 95       	dec	r25
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	da f7       	brpl	.-10     	; 0x5de <__floatsisf+0x62>
 5e8:	88 0f       	add	r24, r24
 5ea:	96 95       	lsr	r25
 5ec:	87 95       	ror	r24
 5ee:	97 f9       	bld	r25, 7
 5f0:	08 95       	ret

000005f2 <__fp_split3>:
 5f2:	57 fd       	sbrc	r21, 7
 5f4:	90 58       	subi	r25, 0x80	; 128
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	59 f0       	breq	.+22     	; 0x612 <__fp_splitA+0x10>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	71 f0       	breq	.+28     	; 0x61c <__fp_splitA+0x1a>
 600:	47 95       	ror	r20

00000602 <__fp_splitA>:
 602:	88 0f       	add	r24, r24
 604:	97 fb       	bst	r25, 7
 606:	99 1f       	adc	r25, r25
 608:	61 f0       	breq	.+24     	; 0x622 <__fp_splitA+0x20>
 60a:	9f 3f       	cpi	r25, 0xFF	; 255
 60c:	79 f0       	breq	.+30     	; 0x62c <__fp_splitA+0x2a>
 60e:	87 95       	ror	r24
 610:	08 95       	ret
 612:	12 16       	cp	r1, r18
 614:	13 06       	cpc	r1, r19
 616:	14 06       	cpc	r1, r20
 618:	55 1f       	adc	r21, r21
 61a:	f2 cf       	rjmp	.-28     	; 0x600 <__fp_split3+0xe>
 61c:	46 95       	lsr	r20
 61e:	f1 df       	rcall	.-30     	; 0x602 <__fp_splitA>
 620:	08 c0       	rjmp	.+16     	; 0x632 <__fp_splitA+0x30>
 622:	16 16       	cp	r1, r22
 624:	17 06       	cpc	r1, r23
 626:	18 06       	cpc	r1, r24
 628:	99 1f       	adc	r25, r25
 62a:	f1 cf       	rjmp	.-30     	; 0x60e <__fp_splitA+0xc>
 62c:	86 95       	lsr	r24
 62e:	71 05       	cpc	r23, r1
 630:	61 05       	cpc	r22, r1
 632:	08 94       	sec
 634:	08 95       	ret

00000636 <__fp_zero>:
 636:	e8 94       	clt

00000638 <__fp_szero>:
 638:	bb 27       	eor	r27, r27
 63a:	66 27       	eor	r22, r22
 63c:	77 27       	eor	r23, r23
 63e:	cb 01       	movw	r24, r22
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__mulsf3>:
 644:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3x>
 648:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_round>
 64c:	0e 94 98 03 	call	0x730	; 0x730 <__fp_pscA>
 650:	38 f0       	brcs	.+14     	; 0x660 <__mulsf3+0x1c>
 652:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_pscB>
 656:	20 f0       	brcs	.+8      	; 0x660 <__mulsf3+0x1c>
 658:	95 23       	and	r25, r21
 65a:	11 f0       	breq	.+4      	; 0x660 <__mulsf3+0x1c>
 65c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_inf>
 660:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_nan>
 664:	11 24       	eor	r1, r1
 666:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>

0000066a <__mulsf3x>:
 66a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 66e:	70 f3       	brcs	.-36     	; 0x64c <__mulsf3+0x8>

00000670 <__mulsf3_pse>:
 670:	95 9f       	mul	r25, r21
 672:	c1 f3       	breq	.-16     	; 0x664 <__mulsf3+0x20>
 674:	95 0f       	add	r25, r21
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	55 1f       	adc	r21, r21
 67a:	62 9f       	mul	r22, r18
 67c:	f0 01       	movw	r30, r0
 67e:	72 9f       	mul	r23, r18
 680:	bb 27       	eor	r27, r27
 682:	f0 0d       	add	r31, r0
 684:	b1 1d       	adc	r27, r1
 686:	63 9f       	mul	r22, r19
 688:	aa 27       	eor	r26, r26
 68a:	f0 0d       	add	r31, r0
 68c:	b1 1d       	adc	r27, r1
 68e:	aa 1f       	adc	r26, r26
 690:	64 9f       	mul	r22, r20
 692:	66 27       	eor	r22, r22
 694:	b0 0d       	add	r27, r0
 696:	a1 1d       	adc	r26, r1
 698:	66 1f       	adc	r22, r22
 69a:	82 9f       	mul	r24, r18
 69c:	22 27       	eor	r18, r18
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	62 1f       	adc	r22, r18
 6a4:	73 9f       	mul	r23, r19
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	62 1f       	adc	r22, r18
 6ac:	83 9f       	mul	r24, r19
 6ae:	a0 0d       	add	r26, r0
 6b0:	61 1d       	adc	r22, r1
 6b2:	22 1f       	adc	r18, r18
 6b4:	74 9f       	mul	r23, r20
 6b6:	33 27       	eor	r19, r19
 6b8:	a0 0d       	add	r26, r0
 6ba:	61 1d       	adc	r22, r1
 6bc:	23 1f       	adc	r18, r19
 6be:	84 9f       	mul	r24, r20
 6c0:	60 0d       	add	r22, r0
 6c2:	21 1d       	adc	r18, r1
 6c4:	82 2f       	mov	r24, r18
 6c6:	76 2f       	mov	r23, r22
 6c8:	6a 2f       	mov	r22, r26
 6ca:	11 24       	eor	r1, r1
 6cc:	9f 57       	subi	r25, 0x7F	; 127
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	9a f0       	brmi	.+38     	; 0x6f8 <__mulsf3_pse+0x88>
 6d2:	f1 f0       	breq	.+60     	; 0x710 <__mulsf3_pse+0xa0>
 6d4:	88 23       	and	r24, r24
 6d6:	4a f0       	brmi	.+18     	; 0x6ea <__mulsf3_pse+0x7a>
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	bb 1f       	adc	r27, r27
 6de:	66 1f       	adc	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	91 50       	subi	r25, 0x01	; 1
 6e6:	50 40       	sbci	r21, 0x00	; 0
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__mulsf3_pse+0x64>
 6ea:	9e 3f       	cpi	r25, 0xFE	; 254
 6ec:	51 05       	cpc	r21, r1
 6ee:	80 f0       	brcs	.+32     	; 0x710 <__mulsf3_pse+0xa0>
 6f0:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_inf>
 6f4:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 6f8:	5f 3f       	cpi	r21, 0xFF	; 255
 6fa:	e4 f3       	brlt	.-8      	; 0x6f4 <__mulsf3_pse+0x84>
 6fc:	98 3e       	cpi	r25, 0xE8	; 232
 6fe:	d4 f3       	brlt	.-12     	; 0x6f4 <__mulsf3_pse+0x84>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b7 95       	ror	r27
 708:	f7 95       	ror	r31
 70a:	e7 95       	ror	r30
 70c:	9f 5f       	subi	r25, 0xFF	; 255
 70e:	c1 f7       	brne	.-16     	; 0x700 <__mulsf3_pse+0x90>
 710:	fe 2b       	or	r31, r30
 712:	88 0f       	add	r24, r24
 714:	91 1d       	adc	r25, r1
 716:	96 95       	lsr	r25
 718:	87 95       	ror	r24
 71a:	97 f9       	bld	r25, 7
 71c:	08 95       	ret

0000071e <__fp_inf>:
 71e:	97 f9       	bld	r25, 7
 720:	9f 67       	ori	r25, 0x7F	; 127
 722:	80 e8       	ldi	r24, 0x80	; 128
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	08 95       	ret

0000072a <__fp_nan>:
 72a:	9f ef       	ldi	r25, 0xFF	; 255
 72c:	80 ec       	ldi	r24, 0xC0	; 192
 72e:	08 95       	ret

00000730 <__fp_pscA>:
 730:	00 24       	eor	r0, r0
 732:	0a 94       	dec	r0
 734:	16 16       	cp	r1, r22
 736:	17 06       	cpc	r1, r23
 738:	18 06       	cpc	r1, r24
 73a:	09 06       	cpc	r0, r25
 73c:	08 95       	ret

0000073e <__fp_pscB>:
 73e:	00 24       	eor	r0, r0
 740:	0a 94       	dec	r0
 742:	12 16       	cp	r1, r18
 744:	13 06       	cpc	r1, r19
 746:	14 06       	cpc	r1, r20
 748:	05 06       	cpc	r0, r21
 74a:	08 95       	ret

0000074c <__fp_round>:
 74c:	09 2e       	mov	r0, r25
 74e:	03 94       	inc	r0
 750:	00 0c       	add	r0, r0
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0xc>
 754:	88 23       	and	r24, r24
 756:	52 f0       	brmi	.+20     	; 0x76c <__fp_round+0x20>
 758:	bb 0f       	add	r27, r27
 75a:	40 f4       	brcc	.+16     	; 0x76c <__fp_round+0x20>
 75c:	bf 2b       	or	r27, r31
 75e:	11 f4       	brne	.+4      	; 0x764 <__fp_round+0x18>
 760:	60 ff       	sbrs	r22, 0
 762:	04 c0       	rjmp	.+8      	; 0x76c <__fp_round+0x20>
 764:	6f 5f       	subi	r22, 0xFF	; 255
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	08 95       	ret

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
