
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00001114  000011a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800146  00800146  000011ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9d  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f58  00000000  00000000  000030fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a7  00000000  00000000  00004055  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a8  00000000  00000000  000050fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f02  00000000  00000000  00005de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_4>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_9>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_16>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__floatsisf+0x2e>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__vector_4+0x18>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <Timer0_getTime+0x24>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <LCD_Command+0xe>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e4 e1       	ldi	r30, 0x14	; 20
     176:	f1 e1       	ldi	r31, 0x11	; 17
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a6 34       	cpi	r26, 0x46	; 70
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a6 e4       	ldi	r26, 0x46	; 70
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	af 34       	cpi	r26, 0x4F	; 79
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
     198:	0c 94 88 08 	jmp	0x1110	; 0x1110 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <DHT22_init>:

volatile unsigned int AveHum = 0;

// Funci?n para configurar el pin del DHT22
void DHT22_init() {
	DDRD |= (1 << DHT22_PIN);   // Configura el pin como salida
     1a0:	8a b1       	in	r24, 0x0a	; 10
     1a2:	80 68       	ori	r24, 0x80	; 128
     1a4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DHT22_PIN);  // Pone el pin en alto
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	81 ee       	ldi	r24, 0xE1	; 225
     1b0:	94 e0       	ldi	r25, 0x04	; 4
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	80 40       	sbci	r24, 0x00	; 0
     1b6:	90 40       	sbci	r25, 0x00	; 0
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <DHT22_init+0x12>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <DHT22_init+0x1c>
     1bc:	00 00       	nop
     1be:	08 95       	ret

000001c0 <LCD_Command>:
	LCD_Command(LCD_CLEAR);
}

void LCD_Command(unsigned char command)
{
	PORTB &= ~(0x3F);
     1c0:	95 b1       	in	r25, 0x05	; 5
     1c2:	90 7c       	andi	r25, 0xC0	; 192
     1c4:	95 b9       	out	0x05, r25	; 5
	PORTB |= (command & 0x3F);
     1c6:	95 b1       	in	r25, 0x05	; 5
     1c8:	28 2f       	mov	r18, r24
     1ca:	2f 73       	andi	r18, 0x3F	; 63
     1cc:	92 2b       	or	r25, r18
     1ce:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
     1d0:	9b b1       	in	r25, 0x0b	; 11
     1d2:	93 7f       	andi	r25, 0xF3	; 243
     1d4:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((command >> 4) & 0x0C);
     1d6:	9b b1       	in	r25, 0x0b	; 11
     1d8:	82 95       	swap	r24
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	8c 70       	andi	r24, 0x0C	; 12
     1de:	89 2b       	or	r24, r25
     1e0:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << RS_LCD); //Colocamos RS_LCD en 0
     1e2:	88 b1       	in	r24, 0x08	; 8
     1e4:	8e 7f       	andi	r24, 0xFE	; 254
     1e6:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
     1e8:	88 b1       	in	r24, 0x08	; 8
     1ea:	8d 7f       	andi	r24, 0xFD	; 253
     1ec:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ee:	85 e3       	ldi	r24, 0x35	; 53
     1f0:	8a 95       	dec	r24
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_Command+0x30>
     1f4:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
     1f6:	88 b1       	in	r24, 0x08	; 8
     1f8:	82 60       	ori	r24, 0x02	; 2
     1fa:	88 b9       	out	0x08, r24	; 8
     1fc:	8f e8       	ldi	r24, 0x8F	; 143
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <LCD_Command+0x40>
     204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_Command+0x46>
     206:	00 00       	nop
     208:	08 95       	ret

0000020a <LCD_Init>:
 */ 
#include "LCD_Module.h"

void LCD_Init()
{
	DDRB |= 0x3F; 
     20a:	84 b1       	in	r24, 0x04	; 4
     20c:	8f 63       	ori	r24, 0x3F	; 63
     20e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0x0C;
     210:	8a b1       	in	r24, 0x0a	; 10
     212:	8c 60       	ori	r24, 0x0C	; 12
     214:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<RS_LCD) | (1 << EN_LCD);
     216:	87 b1       	in	r24, 0x07	; 7
     218:	83 60       	ori	r24, 0x03	; 3
     21a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	8f e5       	ldi	r24, 0x5F	; 95
     21e:	9a ee       	ldi	r25, 0xEA	; 234
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <LCD_Init+0x16>
     224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_Init+0x1c>
     226:	00 00       	nop
	
	//Comandos Iniciales al encender EL LCD
	_delay_ms(15);
	LCD_Command(0x30);
     228:	80 e3       	ldi	r24, 0x30	; 48
     22a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
     22e:	8f e0       	ldi	r24, 0x0F	; 15
     230:	90 e4       	ldi	r25, 0x40	; 64
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LCD_Init+0x28>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_Init+0x2e>
     238:	00 00       	nop
	_delay_ms(4.1);
	LCD_Command(0x30);
     23a:	80 e3       	ldi	r24, 0x30	; 48
     23c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	8f e8       	ldi	r24, 0x8F	; 143
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <LCD_Init+0x3a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_Init+0x40>
     24a:	00 00       	nop
	_delay_us(100);
	LCD_Command(0x30);
     24c:	80 e3       	ldi	r24, 0x30	; 48
     24e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
	
	//Comandos para configurar EL LCD
	LCD_Command(LCD_INTERFACE_DATA1);
     252:	88 e3       	ldi	r24, 0x38	; 56
     254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
	LCD_Command(LCD_DISPLAY_ON_CURSOR_OF);
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
	LCD_Command(LCD_CLEAR);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
     264:	08 95       	ret

00000266 <LCD_Write_Char>:
	_delay_us(100);
}

void LCD_Write_Char(unsigned char character)
{
	PORTC |= (1 << RS_LCD);
     266:	98 b1       	in	r25, 0x08	; 8
     268:	91 60       	ori	r25, 0x01	; 1
     26a:	98 b9       	out	0x08, r25	; 8
	PORTB &= ~(0x3F);
     26c:	95 b1       	in	r25, 0x05	; 5
     26e:	90 7c       	andi	r25, 0xC0	; 192
     270:	95 b9       	out	0x05, r25	; 5
	PORTB |= (character & 0x3F);
     272:	95 b1       	in	r25, 0x05	; 5
     274:	28 2f       	mov	r18, r24
     276:	2f 73       	andi	r18, 0x3F	; 63
     278:	92 2b       	or	r25, r18
     27a:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(0x0C);
     27c:	9b b1       	in	r25, 0x0b	; 11
     27e:	93 7f       	andi	r25, 0xF3	; 243
     280:	9b b9       	out	0x0b, r25	; 11
	PORTD |= ((character >> 4) & 0x0C);
     282:	9b b1       	in	r25, 0x0b	; 11
     284:	82 95       	swap	r24
     286:	8f 70       	andi	r24, 0x0F	; 15
     288:	8c 70       	andi	r24, 0x0C	; 12
     28a:	89 2b       	or	r24, r25
     28c:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << EN_LCD); //EN_LCD en 0
     28e:	88 b1       	in	r24, 0x08	; 8
     290:	8d 7f       	andi	r24, 0xFD	; 253
     292:	88 b9       	out	0x08, r24	; 8
     294:	85 e3       	ldi	r24, 0x35	; 53
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Write_Char+0x30>
     29a:	00 00       	nop
	_delay_us(10);
	PORTC |= (1 << EN_LCD); //EN_LCD en 1
     29c:	88 b1       	in	r24, 0x08	; 8
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	88 b9       	out	0x08, r24	; 8
     2a2:	8f e8       	ldi	r24, 0x8F	; 143
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_Write_Char+0x40>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_Write_Char+0x46>
     2ac:	00 00       	nop
     2ae:	08 95       	ret

000002b0 <LCD_Write_String>:
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
	while(*str)
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_Write_String+0xe>
	{
		LCD_Write_Char(*str++);
     2b8:	21 96       	adiw	r28, 0x01	; 1
     2ba:	0e 94 33 01 	call	0x266	; 0x266 <LCD_Write_Char>
	_delay_us(100);
}

void LCD_Write_String(unsigned char *str)
{
	while(*str)
     2be:	88 81       	ld	r24, Y
     2c0:	81 11       	cpse	r24, r1
     2c2:	fa cf       	rjmp	.-12     	; 0x2b8 <LCD_Write_String+0x8>
	{
		LCD_Write_Char(*str++);
	}
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <LCD_SetCursor>:
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
     2ca:	62 30       	cpi	r22, 0x02	; 2
     2cc:	31 f0       	breq	.+12     	; 0x2da <LCD_SetCursor+0x10>
     2ce:	63 30       	cpi	r22, 0x03	; 3
     2d0:	31 f0       	breq	.+12     	; 0x2de <LCD_SetCursor+0x14>
     2d2:	61 30       	cpi	r22, 0x01	; 1
     2d4:	31 f0       	breq	.+12     	; 0x2e2 <LCD_SetCursor+0x18>
		case 0: address = 0x00; break;  // Primera fila
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <LCD_SetCursor+0x1a>
		case 1: address = 0x40; break;  // Segunda fila
		case 2: address = 0x14; break;  // Tercera fila 
     2da:	94 e1       	ldi	r25, 0x14	; 20
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <LCD_SetCursor+0x1a>
		case 3: address = 0x54; break;  // Cuarta fila 
     2de:	94 e5       	ldi	r25, 0x54	; 84
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_SetCursor+0x1a>
void LCD_SetCursor(char col, char row)
 {
	char address;
	switch (row) {
		case 0: address = 0x00; break;  // Primera fila
		case 1: address = 0x40; break;  // Segunda fila
     2e2:	90 e4       	ldi	r25, 0x40	; 64
		case 2: address = 0x14; break;  // Tercera fila 
		case 3: address = 0x54; break;  // Cuarta fila 
		default: address = 0x00;
	}
	LCD_Command(LCD_CHANGE_LINE | (address + col));  // Comando "Set DDRAM Address"
     2e4:	89 0f       	add	r24, r25
     2e6:	80 68       	ori	r24, 0x80	; 128
     2e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
     2ec:	08 95       	ret

000002ee <main>:
#include "USART_Module.h"

#define TIME_CONSTANT_MS 200
int main(void)
{
	DDRC |= 0x30; //I2C PORTS
     2ee:	87 b1       	in	r24, 0x07	; 7
     2f0:	80 63       	ori	r24, 0x30	; 48
     2f2:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 4);
     2f4:	8a b1       	in	r24, 0x0a	; 10
     2f6:	80 61       	ori	r24, 0x10	; 16
     2f8:	8a b9       	out	0x0a, r24	; 10
	/*twi_init();
	Timer1_Init();
	*/
	DHT22_init();
     2fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DHT22_init>
	UltraSonicInit();
     2fe:	0e 94 84 02 	call	0x508	; 0x508 <UltraSonicInit>
	LCD_Init();
     302:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_Init>
	Roll_Init();
     306:	0e 94 b9 01 	call	0x372	; 0x372 <Roll_Init>
	USART_Init();
     30a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <USART_Init>
	Timer0_Init();
     30e:	0e 94 bd 01 	call	0x37a	; 0x37a <Timer0_Init>
	Timer2_Init();
     312:	0e 94 2d 02 	call	0x45a	; 0x45a <Timer2_Init>
	//RTC_updateTime("19:54:00");
	//RTC_updateDate("10/04/2025-5");
	
	txFlag = 0;
     316:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	rxFlag = 0;
     31a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rxFlag>
	indexBuffer = 0;
     31e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <indexBuffer>
	sei();
     322:	78 94       	sei
	float AverageUltraSonic  = 0;
	unsigned int AverageTemp = 0;
	unsigned int AverageHum= 0;
	unsigned char buffer[20];
	unsigned char result = 0;
	Timer2_reset();
     324:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Timer2_reset>
	Timer2_Stop();
     328:	0e 94 81 02 	call	0x502	; 0x502 <Timer2_Stop>
	Timer0_reset();
     32c:	0e 94 29 02 	call	0x452	; 0x452 <Timer0_reset>
	indexBuffer = 0;
	sei();
	unsigned char flag_check = 0;
	unsigned char counterTime = 0;
	unsigned char counter = 0;
	float AverageUltraSonic  = 0;
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	76 01       	movw	r14, r12
	rxFlag = 0;
	indexBuffer = 0;
	sei();
	unsigned char flag_check = 0;
	unsigned char counterTime = 0;
	unsigned char counter = 0;
     336:	c0 e0       	ldi	r28, 0x00	; 0
	txFlag = 0;
	rxFlag = 0;
	indexBuffer = 0;
	sei();
	unsigned char flag_check = 0;
	unsigned char counterTime = 0;
     338:	d0 e0       	ldi	r29, 0x00	; 0
	Timer2_reset();
	Timer2_Stop();
	Timer0_reset();
	while (1)
	{
		if(Timer0_milis(TIME_CONSTANT_MS))
     33a:	88 ec       	ldi	r24, 0xC8	; 200
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 15 02 	call	0x42a	; 0x42a <Timer0_milis>
     342:	88 23       	and	r24, r24
     344:	19 f0       	breq	.+6      	; 0x34c <main+0x5e>
		{
			Timer0_reset();
     346:	0e 94 29 02 	call	0x452	; 0x452 <Timer0_reset>
			counterTime++;
     34a:	df 5f       	subi	r29, 0xFF	; 255
		}
		if(counterTime == 3)
     34c:	d3 30       	cpi	r29, 0x03	; 3
     34e:	49 f4       	brne	.+18     	; 0x362 <main+0x74>
		{
			counterTime = 0;
			counter++;
     350:	cf 5f       	subi	r28, 0xFF	; 255
			AverageUltraSonic = UltraSonic_AvarageData(counter,AverageUltraSonic);
     352:	b7 01       	movw	r22, r14
     354:	a6 01       	movw	r20, r12
     356:	8c 2f       	mov	r24, r28
     358:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <UltraSonic_AvarageData>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
			Timer0_reset();
			counterTime++;
		}
		if(counterTime == 3)
		{
			counterTime = 0;
     360:	d0 e0       	ldi	r29, 0x00	; 0
			counter++;
			AverageUltraSonic = UltraSonic_AvarageData(counter,AverageUltraSonic);
		}
		if(counter >= 10)
     362:	ca 30       	cpi	r28, 0x0A	; 10
     364:	50 f3       	brcs	.-44     	; 0x33a <main+0x4c>
		{
			UltraSonic_Display_Data(AverageUltraSonic);
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <UltraSonic_Display_Data>
			counter = 0;
     36e:	c0 e0       	ldi	r28, 0x00	; 0
     370:	e4 cf       	rjmp	.-56     	; 0x33a <main+0x4c>

00000372 <Roll_Init>:
	}
	return 0;
}
void Roll_Init()
{
	DDRD &= ~(1 << ROLL_PIN);
     372:	8a b1       	in	r24, 0x0a	; 10
     374:	8f 7b       	andi	r24, 0xBF	; 191
     376:	8a b9       	out	0x0a, r24	; 10
     378:	08 95       	ret

0000037a <Timer0_Init>:
#include <avr/interrupt.h>


void Timer0_Init()
{
	TCCR0A = 0; //Modo normal
     37a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0; //Stop Timer
     37c:	15 bc       	out	0x25, r1	; 37
	
	TIMSK0 |= (1 << TOIE0);
     37e:	ee e6       	ldi	r30, 0x6E	; 110
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	81 60       	ori	r24, 0x01	; 1
     386:	80 83       	st	Z, r24
	
	TCCR0B |= (1 << CS02) | (0 << CS01) | (1<< CS00); //preescaler 1024 Cada TICK 64us
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	85 60       	ori	r24, 0x05	; 5
     38c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //Reiniciar Contador
     38e:	16 bc       	out	0x26, r1	; 38
	overflow_count0 = 0; //Reiniciar OverFlow
     390:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <overflow_count0>
     394:	08 95       	ret

00000396 <__vector_16>:
}
ISR(TIMER0_OVF_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	8f 93       	push	r24
	overflow_count0++;
     3a2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <overflow_count0>
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <overflow_count0>
}
     3ac:	8f 91       	pop	r24
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <Timer0_getCount>:
	}
}

unsigned char Timer0_getCount()
{
	return TCNT0;
     3b8:	86 b5       	in	r24, 0x26	; 38
}
     3ba:	08 95       	ret

000003bc <Timer0_getTime>:
ISR(TIMER0_OVF_vect)
{
	overflow_count0++;
}
unsigned long int  Timer0_getTime()
{
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
	unsigned long int tiempo_us = ((unsigned long int)overflow_count0 * 16320UL) + ((unsigned long int)Timer0_getCount() * 64UL);
     3c4:	c0 90 48 01 	lds	r12, 0x0148	; 0x800148 <overflow_count0>
     3c8:	d1 2c       	mov	r13, r1
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Timer0_getCount>
     3d2:	e8 2f       	mov	r30, r24
     3d4:	af ef       	ldi	r26, 0xFF	; 255
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__muluhisi3>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	8e 0f       	add	r24, r30
     3e6:	91 1d       	adc	r25, r1
     3e8:	a1 1d       	adc	r26, r1
     3ea:	b1 1d       	adc	r27, r1
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	aa 1f       	adc	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	aa 1f       	adc	r26, r26
     3fa:	bb 1f       	adc	r27, r27
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	aa 1f       	adc	r26, r26
     402:	bb 1f       	adc	r27, r27
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	66 0f       	add	r22, r22
     412:	77 1f       	adc	r23, r23
     414:	88 1f       	adc	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	66 0f       	add	r22, r22
     41a:	77 1f       	adc	r23, r23
     41c:	88 1f       	adc	r24, r24
     41e:	99 1f       	adc	r25, r25
	return tiempo_us;
}
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <Timer0_milis>:
unsigned char Timer0_milis(unsigned short int TimeMilis)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24
	if(TimeMilis <= (unsigned short int)(Timer0_getTime()/1000))
     430:	0e 94 de 01 	call	0x3bc	; 0x3bc <Timer0_getTime>
     434:	28 ee       	ldi	r18, 0xE8	; 232
     436:	33 e0       	ldi	r19, 0x03	; 3
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
     440:	2c 17       	cp	r18, r28
     442:	3d 07       	cpc	r19, r29
     444:	10 f0       	brcs	.+4      	; 0x44a <Timer0_milis+0x20>
	{
		return 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	01 c0       	rjmp	.+2      	; 0x44c <Timer0_milis+0x22>
	}
	else
	{
		return 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <Timer0_reset>:
	return TCNT0;
}

void Timer0_reset()
{
	TCNT0 = 0;
     452:	16 bc       	out	0x26, r1	; 38
	overflow_count0 = 0;
     454:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <overflow_count0>
     458:	08 95       	ret

0000045a <Timer2_Init>:
#include <stdint.h>
#include <avr/interrupt.h>

void Timer2_Init()
{
	TCCR2A = 0; //Modo normal
     45a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	
	TIMSK2 |= (1 << TOIE2);
     45e:	e0 e7       	ldi	r30, 0x70	; 112
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	81 60       	ori	r24, 0x01	; 1
     466:	80 83       	st	Z, r24
	TCCR2B = (0 << CS22) | (1 << CS21) | (0<< CS20); //preescaler 8 Cada TICK 0.5us
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 0; //Reiniciar Timer
     46e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	overflow_count2 = 0; //Reiniciar Overflow
     472:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <overflow_count2+0x1>
     476:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <overflow_count2>
     47a:	08 95       	ret

0000047c <__vector_9>:

	unsigned int tiempo_us = (overflow_count2 * 128) + (unsigned int)(Timer2_getCount() * 0.5);
	return tiempo_us;
}
ISR(TIMER2_OVF_vect)
{
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
	overflow_count2++;
     48a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <overflow_count2>
     48e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <overflow_count2+0x1>
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <overflow_count2+0x1>
     498:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <overflow_count2>
}
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <Timer2_getCount>:

unsigned char Timer2_getCount()
{
	return TCNT2;
     4aa:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
}
     4ae:	08 95       	ret

000004b0 <Timer2_getTime>:
	TCNT2 = 0; //Reiniciar Timer
	overflow_count2 = 0; //Reiniciar Overflow
}

unsigned int Timer2_getTime()
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29

	unsigned int tiempo_us = (overflow_count2 * 128) + (unsigned int)(Timer2_getCount() * 0.5);
     4b4:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <overflow_count2>
     4b8:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <overflow_count2+0x1>
     4bc:	eb 01       	movw	r28, r22
     4be:	d6 95       	lsr	r29
     4c0:	dc 2f       	mov	r29, r28
     4c2:	cc 27       	eor	r28, r28
     4c4:	d7 95       	ror	r29
     4c6:	c7 95       	ror	r28
     4c8:	0e 94 55 02 	call	0x4aa	; 0x4aa <Timer2_getCount>
     4cc:	68 2f       	mov	r22, r24
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	0e 94 56 05 	call	0xaac	; 0xaac <__mulsf3>
     4e4:	0e 94 99 04 	call	0x932	; 0x932 <__fixunssfsi>
     4e8:	ce 01       	movw	r24, r28
     4ea:	86 0f       	add	r24, r22
     4ec:	97 1f       	adc	r25, r23
	return tiempo_us;
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <Timer2_reset>:
	return TCNT2;
}

void Timer2_reset()
{
	TCNT2 = 0;
     4f4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	overflow_count2 = 0;
     4f8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <overflow_count2+0x1>
     4fc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <overflow_count2>
     500:	08 95       	ret

00000502 <Timer2_Stop>:
}

void Timer2_Stop()
{
	TCCR2B = 0;
     502:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     506:	08 95       	ret

00000508 <UltraSonicInit>:
#include <stdio.h>
#include <avr/interrupt.h>

void UltraSonicInit()
{
	DDRC |= (1 << TRIGGER);
     508:	87 b1       	in	r24, 0x07	; 7
     50a:	84 60       	ori	r24, 0x04	; 4
     50c:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << ECHO);
     50e:	87 b1       	in	r24, 0x07	; 7
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	87 b9       	out	0x07, r24	; 7
	
	//Habilitar Interrupcion ECHO
	PCICR |= (1 << PCIE1);  // Habilita PCI1 
     514:	e8 e6       	ldi	r30, 0x68	; 104
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11); // Habilita mascara para PCINT11
     51e:	ec e6       	ldi	r30, 0x6C	; 108
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 60       	ori	r24, 0x08	; 8
     526:	80 83       	st	Z, r24
	
	risingEdge = 0;
     528:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <risingEdge>
	fallingEdge = 0;
     52c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <fallingEdge>
     530:	08 95       	ret

00000532 <measure_pulse_width>:
	distance = ((float)counter) / 58.0f;  // Formula: (us / 58) = cm
	
	return distance;
}
unsigned int measure_pulse_width() 
{
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
	
	unsigned int start_time, end_time;
	// Esperar flanco bajo (estado inicial alto)

	if(risingEdge)
     53a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <risingEdge>
     53e:	88 23       	and	r24, r24
     540:	39 f0       	breq	.+14     	; 0x550 <measure_pulse_width+0x1e>
	{
		risingEdge = 0;	
     542:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <risingEdge>
		Timer2_reset();              // Reiniciar contador
     546:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Timer2_reset>
		start_time = Timer2_getTime();     // Leer timer (casi cero)
     54a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Timer2_getTime>
     54e:	8c 01       	movw	r16, r24
	}
	if(fallingEdge)
     550:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <fallingEdge>
     554:	88 23       	and	r24, r24
     556:	29 f0       	breq	.+10     	; 0x562 <measure_pulse_width+0x30>
	{
		fallingEdge = 0;			
     558:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <fallingEdge>
		end_time = Timer2_getTime();
     55c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Timer2_getTime>
     560:	ec 01       	movw	r28, r24
		end_time = Timer2_getTime();
	}
	end_time = Timer2_getTime();*/
	// Calcular ancho del pulso
	return end_time - start_time;
}
     562:	ce 01       	movw	r24, r28
     564:	80 1b       	sub	r24, r16
     566:	91 0b       	sbc	r25, r17
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <GetDistance>:
float GetDistance()
{
	unsigned short int counter = 0;
	
	float distance = 0;
	PORTC |= (1 << TRIGGER);
     572:	88 b1       	in	r24, 0x08	; 8
     574:	84 60       	ori	r24, 0x04	; 4
     576:	88 b9       	out	0x08, r24	; 8
     578:	80 e5       	ldi	r24, 0x50	; 80
     57a:	8a 95       	dec	r24
     57c:	f1 f7       	brne	.-4      	; 0x57a <GetDistance+0x8>
	_delay_us(15);
	PORTC &= ~(1 << TRIGGER);
     57e:	88 b1       	in	r24, 0x08	; 8
     580:	8b 7f       	andi	r24, 0xFB	; 251
     582:	88 b9       	out	0x08, r24	; 8

	counter = measure_pulse_width();
     584:	0e 94 99 02 	call	0x532	; 0x532 <measure_pulse_width>
	// Calcular distancia (en cm)
	distance = ((float)counter) / 58.0f;  // Formula: (us / 58) = cm
     588:	bc 01       	movw	r22, r24
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 c8 04 	call	0x990	; 0x990 <__floatunsisf>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	48 e6       	ldi	r20, 0x68	; 104
     598:	52 e4       	ldi	r21, 0x42	; 66
     59a:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
	
	return distance;
}
     59e:	08 95       	ret

000005a0 <UltraSonic_AvarageData>:
	// Calcular ancho del pulso
	return end_time - start_time;
}

float UltraSonic_AvarageData(unsigned char counter,float dataUltra)
{
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	cf 93       	push	r28
     5aa:	c8 2f       	mov	r28, r24
     5ac:	6a 01       	movw	r12, r20
     5ae:	7b 01       	movw	r14, r22
	dataUltra+= GetDistance();
     5b0:	0e 94 b9 02 	call	0x572	; 0x572 <GetDistance>
     5b4:	a7 01       	movw	r20, r14
     5b6:	96 01       	movw	r18, r12
     5b8:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
	float AverageData = 0;
	if(counter < 10)
     5bc:	ca 30       	cpi	r28, 0x0A	; 10
     5be:	30 f0       	brcs	.+12     	; 0x5cc <UltraSonic_AvarageData+0x2c>
	{
		AverageData = dataUltra;	
	}
	else
	{
		AverageData = dataUltra / 10;
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e2       	ldi	r20, 0x20	; 32
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 27 04 	call	0x84e	; 0x84e <__divsf3>
	}
	return AverageData;
}
     5cc:	cf 91       	pop	r28
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <UltraSonic_Display_Data>:

void UltraSonic_Display_Data(float average)
{
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	64 97       	sbiw	r28, 0x14	; 20
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	6b 01       	movw	r12, r22
     5fa:	7c 01       	movw	r14, r24
	float distancia_basura = 0;
	unsigned char buffer[20];
	
	distancia_basura = average;
	 
	LCD_Command(LCD_CLEAR);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Command>
	LCD_SetCursor(0,0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SetCursor>
	LCD_Write_String("---------------------------------------");
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	dtostrf(distancia_basura, 5, 2, buffer);
     612:	8e 01       	movw	r16, r28
     614:	0f 5f       	subi	r16, 0xFF	; 255
     616:	1f 4f       	sbci	r17, 0xFF	; 255
     618:	22 e0       	ldi	r18, 0x02	; 2
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	45 e0       	ldi	r20, 0x05	; 5
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	c7 01       	movw	r24, r14
     622:	b6 01       	movw	r22, r12
     624:	0e 94 ff 05 	call	0xbfe	; 0xbfe <dtostrf>
	LCD_SetCursor(0,1);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SetCursor>
	LCD_Write_String(" Distance: ");
     630:	88 e2       	ldi	r24, 0x28	; 40
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	LCD_Write_String(buffer);
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	LCD_Write_String(" cm");
     63e:	84 e3       	ldi	r24, 0x34	; 52
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	LCD_SetCursor(0,2);
     646:	62 e0       	ldi	r22, 0x02	; 2
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SetCursor>
	LCD_Write_String("            ");
     64e:	88 e3       	ldi	r24, 0x38	; 56
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	LCD_SetCursor(0,3);
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SetCursor>
	LCD_Write_String("--------------------");
     65e:	83 e1       	ldi	r24, 0x13	; 19
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	8f e4       	ldi	r24, 0x4F	; 79
     66a:	93 ec       	ldi	r25, 0xC3	; 195
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	80 40       	sbci	r24, 0x00	; 0
     670:	90 40       	sbci	r25, 0x00	; 0
     672:	e1 f7       	brne	.-8      	; 0x66c <UltraSonic_Display_Data+0x94>
     674:	00 c0       	rjmp	.+0      	; 0x676 <UltraSonic_Display_Data+0x9e>
     676:	00 00       	nop
	_delay_ms(4000);
	average = 0;
}
     678:	64 96       	adiw	r28, 0x14	; 20
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	08 95       	ret

00000696 <__vector_4>:
ISR(PCINT1_vect)
{
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 93       	push	r24
	if(PINC & (1 << ECHO))
     6a2:	33 9b       	sbis	0x06, 3	; 6
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__vector_4+0x18>
	{
		risingEdge = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <risingEdge>
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <__vector_4+0x1e>
	}
	else
	{
		fallingEdge = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <fallingEdge>
	}
     6b4:	8f 91       	pop	r24
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <USART_Init>:
			indexBuffer++;
		}
		else
		{
			indexBuffer = 0;
			txFlag = 1;
     6c0:	8a b1       	in	r24, 0x0a	; 10
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	8a b9       	out	0x0a, r24	; 10
     6c6:	8a b1       	in	r24, 0x0a	; 10
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	8a b9       	out	0x0a, r24	; 10
     6cc:	e1 ec       	ldi	r30, 0xC1	; 193
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	80 68       	ori	r24, 0x80	; 128
     6d4:	80 83       	st	Z, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	80 64       	ori	r24, 0x40	; 64
     6da:	80 83       	st	Z, r24
     6dc:	80 81       	ld	r24, Z
     6de:	88 60       	ori	r24, 0x08	; 8
     6e0:	80 83       	st	Z, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	80 61       	ori	r24, 0x10	; 16
     6e6:	80 83       	st	Z, r24
     6e8:	e2 ec       	ldi	r30, 0xC2	; 194
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	86 60       	ori	r24, 0x06	; 6
     6f0:	80 83       	st	Z, r24
     6f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     6f6:	87 e6       	ldi	r24, 0x67	; 103
     6f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     6fc:	08 95       	ret

000006fe <getUSARTdata>:
	}
}

unsigned char getUSARTdata()
{
	return UDR0;
     6fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     702:	08 95       	ret

00000704 <__vector_18>:

ISR(USART_RX_vect)
{
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
	rxFlag = 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rxFlag>
	dataRX = getUSARTdata();
     72c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <getUSARTdata>
     730:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <dataRX>
	
}
     734:	ff 91       	pop	r31
     736:	ef 91       	pop	r30
     738:	bf 91       	pop	r27
     73a:	af 91       	pop	r26
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	7f 91       	pop	r23
     742:	6f 91       	pop	r22
     744:	5f 91       	pop	r21
     746:	4f 91       	pop	r20
     748:	3f 91       	pop	r19
     74a:	2f 91       	pop	r18
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_20>:
ISR(USART_TX_vect)
{
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	8f 93       	push	r24
	txFlag = 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
     768:	8f 91       	pop	r24
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__subsf3>:
     774:	50 58       	subi	r21, 0x80	; 128

00000776 <__addsf3>:
     776:	bb 27       	eor	r27, r27
     778:	aa 27       	eor	r26, r26
     77a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__addsf3x>
     77e:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     782:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     786:	38 f0       	brcs	.+14     	; 0x796 <__addsf3+0x20>
     788:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     78c:	20 f0       	brcs	.+8      	; 0x796 <__addsf3+0x20>
     78e:	39 f4       	brne	.+14     	; 0x79e <__addsf3+0x28>
     790:	9f 3f       	cpi	r25, 0xFF	; 255
     792:	19 f4       	brne	.+6      	; 0x79a <__addsf3+0x24>
     794:	26 f4       	brtc	.+8      	; 0x79e <__addsf3+0x28>
     796:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
     79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3+0x28>
     79c:	e0 95       	com	r30
     79e:	e7 fb       	bst	r30, 7
     7a0:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>

000007a4 <__addsf3x>:
     7a4:	e9 2f       	mov	r30, r25
     7a6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     7aa:	58 f3       	brcs	.-42     	; 0x782 <__addsf3+0xc>
     7ac:	ba 17       	cp	r27, r26
     7ae:	62 07       	cpc	r22, r18
     7b0:	73 07       	cpc	r23, r19
     7b2:	84 07       	cpc	r24, r20
     7b4:	95 07       	cpc	r25, r21
     7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__addsf3x+0x1c>
     7b8:	79 f4       	brne	.+30     	; 0x7d8 <__addsf3x+0x34>
     7ba:	a6 f5       	brtc	.+104    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     7bc:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
     7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3x+0x20>
     7c2:	e0 95       	com	r30
     7c4:	0b 2e       	mov	r0, r27
     7c6:	ba 2f       	mov	r27, r26
     7c8:	a0 2d       	mov	r26, r0
     7ca:	0b 01       	movw	r0, r22
     7cc:	b9 01       	movw	r22, r18
     7ce:	90 01       	movw	r18, r0
     7d0:	0c 01       	movw	r0, r24
     7d2:	ca 01       	movw	r24, r20
     7d4:	a0 01       	movw	r20, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	ff 27       	eor	r31, r31
     7da:	59 1b       	sub	r21, r25
     7dc:	99 f0       	breq	.+38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7de:	59 3f       	cpi	r21, 0xF9	; 249
     7e0:	50 f4       	brcc	.+20     	; 0x7f6 <__addsf3x+0x52>
     7e2:	50 3e       	cpi	r21, 0xE0	; 224
     7e4:	68 f1       	brcs	.+90     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7e6:	1a 16       	cp	r1, r26
     7e8:	f0 40       	sbci	r31, 0x00	; 0
     7ea:	a2 2f       	mov	r26, r18
     7ec:	23 2f       	mov	r18, r19
     7ee:	34 2f       	mov	r19, r20
     7f0:	44 27       	eor	r20, r20
     7f2:	58 5f       	subi	r21, 0xF8	; 248
     7f4:	f3 cf       	rjmp	.-26     	; 0x7dc <__addsf3x+0x38>
     7f6:	46 95       	lsr	r20
     7f8:	37 95       	ror	r19
     7fa:	27 95       	ror	r18
     7fc:	a7 95       	ror	r26
     7fe:	f0 40       	sbci	r31, 0x00	; 0
     800:	53 95       	inc	r21
     802:	c9 f7       	brne	.-14     	; 0x7f6 <__addsf3x+0x52>
     804:	7e f4       	brtc	.+30     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     806:	1f 16       	cp	r1, r31
     808:	ba 0b       	sbc	r27, r26
     80a:	62 0b       	sbc	r22, r18
     80c:	73 0b       	sbc	r23, r19
     80e:	84 0b       	sbc	r24, r20
     810:	ba f0       	brmi	.+46     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     812:	91 50       	subi	r25, 0x01	; 1
     814:	a1 f0       	breq	.+40     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     816:	ff 0f       	add	r31, r31
     818:	bb 1f       	adc	r27, r27
     81a:	66 1f       	adc	r22, r22
     81c:	77 1f       	adc	r23, r23
     81e:	88 1f       	adc	r24, r24
     820:	c2 f7       	brpl	.-16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     822:	0e c0       	rjmp	.+28     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     824:	ba 0f       	add	r27, r26
     826:	62 1f       	adc	r22, r18
     828:	73 1f       	adc	r23, r19
     82a:	84 1f       	adc	r24, r20
     82c:	48 f4       	brcc	.+18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     82e:	87 95       	ror	r24
     830:	77 95       	ror	r23
     832:	67 95       	ror	r22
     834:	b7 95       	ror	r27
     836:	f7 95       	ror	r31
     838:	9e 3f       	cpi	r25, 0xFE	; 254
     83a:	08 f0       	brcs	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     83c:	b0 cf       	rjmp	.-160    	; 0x79e <__addsf3+0x28>
     83e:	93 95       	inc	r25
     840:	88 0f       	add	r24, r24
     842:	08 f0       	brcs	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     844:	99 27       	eor	r25, r25
     846:	ee 0f       	add	r30, r30
     848:	97 95       	ror	r25
     84a:	87 95       	ror	r24
     84c:	08 95       	ret

0000084e <__divsf3>:
     84e:	0e 94 3b 04 	call	0x876	; 0x876 <__divsf3x>
     852:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     856:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     85a:	58 f0       	brcs	.+22     	; 0x872 <__divsf3+0x24>
     85c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     860:	40 f0       	brcs	.+16     	; 0x872 <__divsf3+0x24>
     862:	29 f4       	brne	.+10     	; 0x86e <__divsf3+0x20>
     864:	5f 3f       	cpi	r21, 0xFF	; 255
     866:	29 f0       	breq	.+10     	; 0x872 <__divsf3+0x24>
     868:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     86c:	51 11       	cpse	r21, r1
     86e:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     872:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>

00000876 <__divsf3x>:
     876:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     87a:	68 f3       	brcs	.-38     	; 0x856 <__divsf3+0x8>

0000087c <__divsf3_pse>:
     87c:	99 23       	and	r25, r25
     87e:	b1 f3       	breq	.-20     	; 0x86c <__divsf3+0x1e>
     880:	55 23       	and	r21, r21
     882:	91 f3       	breq	.-28     	; 0x868 <__divsf3+0x1a>
     884:	95 1b       	sub	r25, r21
     886:	55 0b       	sbc	r21, r21
     888:	bb 27       	eor	r27, r27
     88a:	aa 27       	eor	r26, r26
     88c:	62 17       	cp	r22, r18
     88e:	73 07       	cpc	r23, r19
     890:	84 07       	cpc	r24, r20
     892:	38 f0       	brcs	.+14     	; 0x8a2 <__divsf3_pse+0x26>
     894:	9f 5f       	subi	r25, 0xFF	; 255
     896:	5f 4f       	sbci	r21, 0xFF	; 255
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	44 1f       	adc	r20, r20
     89e:	aa 1f       	adc	r26, r26
     8a0:	a9 f3       	breq	.-22     	; 0x88c <__divsf3_pse+0x10>
     8a2:	35 d0       	rcall	.+106    	; 0x90e <__stack+0xf>
     8a4:	0e 2e       	mov	r0, r30
     8a6:	3a f0       	brmi	.+14     	; 0x8b6 <__divsf3_pse+0x3a>
     8a8:	e0 e8       	ldi	r30, 0x80	; 128
     8aa:	32 d0       	rcall	.+100    	; 0x910 <__stack+0x11>
     8ac:	91 50       	subi	r25, 0x01	; 1
     8ae:	50 40       	sbci	r21, 0x00	; 0
     8b0:	e6 95       	lsr	r30
     8b2:	00 1c       	adc	r0, r0
     8b4:	ca f7       	brpl	.-14     	; 0x8a8 <__divsf3_pse+0x2c>
     8b6:	2b d0       	rcall	.+86     	; 0x90e <__stack+0xf>
     8b8:	fe 2f       	mov	r31, r30
     8ba:	29 d0       	rcall	.+82     	; 0x90e <__stack+0xf>
     8bc:	66 0f       	add	r22, r22
     8be:	77 1f       	adc	r23, r23
     8c0:	88 1f       	adc	r24, r24
     8c2:	bb 1f       	adc	r27, r27
     8c4:	26 17       	cp	r18, r22
     8c6:	37 07       	cpc	r19, r23
     8c8:	48 07       	cpc	r20, r24
     8ca:	ab 07       	cpc	r26, r27
     8cc:	b0 e8       	ldi	r27, 0x80	; 128
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3_pse+0x56>
     8d0:	bb 0b       	sbc	r27, r27
     8d2:	80 2d       	mov	r24, r0
     8d4:	bf 01       	movw	r22, r30
     8d6:	ff 27       	eor	r31, r31
     8d8:	93 58       	subi	r25, 0x83	; 131
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	3a f0       	brmi	.+14     	; 0x8ec <__divsf3_pse+0x70>
     8de:	9e 3f       	cpi	r25, 0xFE	; 254
     8e0:	51 05       	cpc	r21, r1
     8e2:	78 f0       	brcs	.+30     	; 0x902 <__stack+0x3>
     8e4:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     8e8:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     8ec:	5f 3f       	cpi	r21, 0xFF	; 255
     8ee:	e4 f3       	brlt	.-8      	; 0x8e8 <__divsf3_pse+0x6c>
     8f0:	98 3e       	cpi	r25, 0xE8	; 232
     8f2:	d4 f3       	brlt	.-12     	; 0x8e8 <__divsf3_pse+0x6c>
     8f4:	86 95       	lsr	r24
     8f6:	77 95       	ror	r23
     8f8:	67 95       	ror	r22
     8fa:	b7 95       	ror	r27
     8fc:	f7 95       	ror	r31
     8fe:	9f 5f       	subi	r25, 0xFF	; 255
     900:	c9 f7       	brne	.-14     	; 0x8f4 <__divsf3_pse+0x78>
     902:	88 0f       	add	r24, r24
     904:	91 1d       	adc	r25, r1
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	97 f9       	bld	r25, 7
     90c:	08 95       	ret
     90e:	e1 e0       	ldi	r30, 0x01	; 1
     910:	66 0f       	add	r22, r22
     912:	77 1f       	adc	r23, r23
     914:	88 1f       	adc	r24, r24
     916:	bb 1f       	adc	r27, r27
     918:	62 17       	cp	r22, r18
     91a:	73 07       	cpc	r23, r19
     91c:	84 07       	cpc	r24, r20
     91e:	ba 07       	cpc	r27, r26
     920:	20 f0       	brcs	.+8      	; 0x92a <__stack+0x2b>
     922:	62 1b       	sub	r22, r18
     924:	73 0b       	sbc	r23, r19
     926:	84 0b       	sbc	r24, r20
     928:	ba 0b       	sbc	r27, r26
     92a:	ee 1f       	adc	r30, r30
     92c:	88 f7       	brcc	.-30     	; 0x910 <__stack+0x11>
     92e:	e0 95       	com	r30
     930:	08 95       	ret

00000932 <__fixunssfsi>:
     932:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_splitA>
     936:	88 f0       	brcs	.+34     	; 0x95a <__fixunssfsi+0x28>
     938:	9f 57       	subi	r25, 0x7F	; 127
     93a:	98 f0       	brcs	.+38     	; 0x962 <__fixunssfsi+0x30>
     93c:	b9 2f       	mov	r27, r25
     93e:	99 27       	eor	r25, r25
     940:	b7 51       	subi	r27, 0x17	; 23
     942:	b0 f0       	brcs	.+44     	; 0x970 <__fixunssfsi+0x3e>
     944:	e1 f0       	breq	.+56     	; 0x97e <__fixunssfsi+0x4c>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	1a f0       	brmi	.+6      	; 0x956 <__fixunssfsi+0x24>
     950:	ba 95       	dec	r27
     952:	c9 f7       	brne	.-14     	; 0x946 <__fixunssfsi+0x14>
     954:	14 c0       	rjmp	.+40     	; 0x97e <__fixunssfsi+0x4c>
     956:	b1 30       	cpi	r27, 0x01	; 1
     958:	91 f0       	breq	.+36     	; 0x97e <__fixunssfsi+0x4c>
     95a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_zero>
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	08 95       	ret
     962:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
     966:	67 2f       	mov	r22, r23
     968:	78 2f       	mov	r23, r24
     96a:	88 27       	eor	r24, r24
     96c:	b8 5f       	subi	r27, 0xF8	; 248
     96e:	39 f0       	breq	.+14     	; 0x97e <__fixunssfsi+0x4c>
     970:	b9 3f       	cpi	r27, 0xF9	; 249
     972:	cc f3       	brlt	.-14     	; 0x966 <__fixunssfsi+0x34>
     974:	86 95       	lsr	r24
     976:	77 95       	ror	r23
     978:	67 95       	ror	r22
     97a:	b3 95       	inc	r27
     97c:	d9 f7       	brne	.-10     	; 0x974 <__fixunssfsi+0x42>
     97e:	3e f4       	brtc	.+14     	; 0x98e <__fixunssfsi+0x5c>
     980:	90 95       	com	r25
     982:	80 95       	com	r24
     984:	70 95       	com	r23
     986:	61 95       	neg	r22
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	8f 4f       	sbci	r24, 0xFF	; 255
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	08 95       	ret

00000990 <__floatunsisf>:
     990:	e8 94       	clt
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__floatsisf+0x12>

00000994 <__floatsisf>:
     994:	97 fb       	bst	r25, 7
     996:	3e f4       	brtc	.+14     	; 0x9a6 <__floatsisf+0x12>
     998:	90 95       	com	r25
     99a:	80 95       	com	r24
     99c:	70 95       	com	r23
     99e:	61 95       	neg	r22
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	8f 4f       	sbci	r24, 0xFF	; 255
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	99 23       	and	r25, r25
     9a8:	a9 f0       	breq	.+42     	; 0x9d4 <__floatsisf+0x40>
     9aa:	f9 2f       	mov	r31, r25
     9ac:	96 e9       	ldi	r25, 0x96	; 150
     9ae:	bb 27       	eor	r27, r27
     9b0:	93 95       	inc	r25
     9b2:	f6 95       	lsr	r31
     9b4:	87 95       	ror	r24
     9b6:	77 95       	ror	r23
     9b8:	67 95       	ror	r22
     9ba:	b7 95       	ror	r27
     9bc:	f1 11       	cpse	r31, r1
     9be:	f8 cf       	rjmp	.-16     	; 0x9b0 <__floatsisf+0x1c>
     9c0:	fa f4       	brpl	.+62     	; 0xa00 <__floatsisf+0x6c>
     9c2:	bb 0f       	add	r27, r27
     9c4:	11 f4       	brne	.+4      	; 0x9ca <__floatsisf+0x36>
     9c6:	60 ff       	sbrs	r22, 0
     9c8:	1b c0       	rjmp	.+54     	; 0xa00 <__floatsisf+0x6c>
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	8f 4f       	sbci	r24, 0xFF	; 255
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	16 c0       	rjmp	.+44     	; 0xa00 <__floatsisf+0x6c>
     9d4:	88 23       	and	r24, r24
     9d6:	11 f0       	breq	.+4      	; 0x9dc <__floatsisf+0x48>
     9d8:	96 e9       	ldi	r25, 0x96	; 150
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <__floatsisf+0x6a>
     9dc:	77 23       	and	r23, r23
     9de:	21 f0       	breq	.+8      	; 0x9e8 <__floatsisf+0x54>
     9e0:	9e e8       	ldi	r25, 0x8E	; 142
     9e2:	87 2f       	mov	r24, r23
     9e4:	76 2f       	mov	r23, r22
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__floatsisf+0x5e>
     9e8:	66 23       	and	r22, r22
     9ea:	71 f0       	breq	.+28     	; 0xa08 <__floatsisf+0x74>
     9ec:	96 e8       	ldi	r25, 0x86	; 134
     9ee:	86 2f       	mov	r24, r22
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	2a f0       	brmi	.+10     	; 0xa00 <__floatsisf+0x6c>
     9f6:	9a 95       	dec	r25
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	88 1f       	adc	r24, r24
     9fe:	da f7       	brpl	.-10     	; 0x9f6 <__floatsisf+0x62>
     a00:	88 0f       	add	r24, r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	97 f9       	bld	r25, 7
     a08:	08 95       	ret

00000a0a <__fp_inf>:
     a0a:	97 f9       	bld	r25, 7
     a0c:	9f 67       	ori	r25, 0x7F	; 127
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	08 95       	ret

00000a16 <__fp_nan>:
     a16:	9f ef       	ldi	r25, 0xFF	; 255
     a18:	80 ec       	ldi	r24, 0xC0	; 192
     a1a:	08 95       	ret

00000a1c <__fp_pscA>:
     a1c:	00 24       	eor	r0, r0
     a1e:	0a 94       	dec	r0
     a20:	16 16       	cp	r1, r22
     a22:	17 06       	cpc	r1, r23
     a24:	18 06       	cpc	r1, r24
     a26:	09 06       	cpc	r0, r25
     a28:	08 95       	ret

00000a2a <__fp_pscB>:
     a2a:	00 24       	eor	r0, r0
     a2c:	0a 94       	dec	r0
     a2e:	12 16       	cp	r1, r18
     a30:	13 06       	cpc	r1, r19
     a32:	14 06       	cpc	r1, r20
     a34:	05 06       	cpc	r0, r21
     a36:	08 95       	ret

00000a38 <__fp_round>:
     a38:	09 2e       	mov	r0, r25
     a3a:	03 94       	inc	r0
     a3c:	00 0c       	add	r0, r0
     a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0xc>
     a40:	88 23       	and	r24, r24
     a42:	52 f0       	brmi	.+20     	; 0xa58 <__fp_round+0x20>
     a44:	bb 0f       	add	r27, r27
     a46:	40 f4       	brcc	.+16     	; 0xa58 <__fp_round+0x20>
     a48:	bf 2b       	or	r27, r31
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0x18>
     a4c:	60 ff       	sbrs	r22, 0
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__fp_round+0x20>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	08 95       	ret

00000a5a <__fp_split3>:
     a5a:	57 fd       	sbrc	r21, 7
     a5c:	90 58       	subi	r25, 0x80	; 128
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	59 f0       	breq	.+22     	; 0xa7a <__fp_splitA+0x10>
     a64:	5f 3f       	cpi	r21, 0xFF	; 255
     a66:	71 f0       	breq	.+28     	; 0xa84 <__fp_splitA+0x1a>
     a68:	47 95       	ror	r20

00000a6a <__fp_splitA>:
     a6a:	88 0f       	add	r24, r24
     a6c:	97 fb       	bst	r25, 7
     a6e:	99 1f       	adc	r25, r25
     a70:	61 f0       	breq	.+24     	; 0xa8a <__fp_splitA+0x20>
     a72:	9f 3f       	cpi	r25, 0xFF	; 255
     a74:	79 f0       	breq	.+30     	; 0xa94 <__fp_splitA+0x2a>
     a76:	87 95       	ror	r24
     a78:	08 95       	ret
     a7a:	12 16       	cp	r1, r18
     a7c:	13 06       	cpc	r1, r19
     a7e:	14 06       	cpc	r1, r20
     a80:	55 1f       	adc	r21, r21
     a82:	f2 cf       	rjmp	.-28     	; 0xa68 <__fp_split3+0xe>
     a84:	46 95       	lsr	r20
     a86:	f1 df       	rcall	.-30     	; 0xa6a <__fp_splitA>
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <__fp_splitA+0x30>
     a8a:	16 16       	cp	r1, r22
     a8c:	17 06       	cpc	r1, r23
     a8e:	18 06       	cpc	r1, r24
     a90:	99 1f       	adc	r25, r25
     a92:	f1 cf       	rjmp	.-30     	; 0xa76 <__fp_splitA+0xc>
     a94:	86 95       	lsr	r24
     a96:	71 05       	cpc	r23, r1
     a98:	61 05       	cpc	r22, r1
     a9a:	08 94       	sec
     a9c:	08 95       	ret

00000a9e <__fp_zero>:
     a9e:	e8 94       	clt

00000aa0 <__fp_szero>:
     aa0:	bb 27       	eor	r27, r27
     aa2:	66 27       	eor	r22, r22
     aa4:	77 27       	eor	r23, r23
     aa6:	cb 01       	movw	r24, r22
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <__mulsf3>:
     aac:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3x>
     ab0:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     ab4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     ab8:	38 f0       	brcs	.+14     	; 0xac8 <__mulsf3+0x1c>
     aba:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     abe:	20 f0       	brcs	.+8      	; 0xac8 <__mulsf3+0x1c>
     ac0:	95 23       	and	r25, r21
     ac2:	11 f0       	breq	.+4      	; 0xac8 <__mulsf3+0x1c>
     ac4:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     ac8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
     acc:	11 24       	eor	r1, r1
     ace:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>

00000ad2 <__mulsf3x>:
     ad2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     ad6:	70 f3       	brcs	.-36     	; 0xab4 <__mulsf3+0x8>

00000ad8 <__mulsf3_pse>:
     ad8:	95 9f       	mul	r25, r21
     ada:	c1 f3       	breq	.-16     	; 0xacc <__mulsf3+0x20>
     adc:	95 0f       	add	r25, r21
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	55 1f       	adc	r21, r21
     ae2:	62 9f       	mul	r22, r18
     ae4:	f0 01       	movw	r30, r0
     ae6:	72 9f       	mul	r23, r18
     ae8:	bb 27       	eor	r27, r27
     aea:	f0 0d       	add	r31, r0
     aec:	b1 1d       	adc	r27, r1
     aee:	63 9f       	mul	r22, r19
     af0:	aa 27       	eor	r26, r26
     af2:	f0 0d       	add	r31, r0
     af4:	b1 1d       	adc	r27, r1
     af6:	aa 1f       	adc	r26, r26
     af8:	64 9f       	mul	r22, r20
     afa:	66 27       	eor	r22, r22
     afc:	b0 0d       	add	r27, r0
     afe:	a1 1d       	adc	r26, r1
     b00:	66 1f       	adc	r22, r22
     b02:	82 9f       	mul	r24, r18
     b04:	22 27       	eor	r18, r18
     b06:	b0 0d       	add	r27, r0
     b08:	a1 1d       	adc	r26, r1
     b0a:	62 1f       	adc	r22, r18
     b0c:	73 9f       	mul	r23, r19
     b0e:	b0 0d       	add	r27, r0
     b10:	a1 1d       	adc	r26, r1
     b12:	62 1f       	adc	r22, r18
     b14:	83 9f       	mul	r24, r19
     b16:	a0 0d       	add	r26, r0
     b18:	61 1d       	adc	r22, r1
     b1a:	22 1f       	adc	r18, r18
     b1c:	74 9f       	mul	r23, r20
     b1e:	33 27       	eor	r19, r19
     b20:	a0 0d       	add	r26, r0
     b22:	61 1d       	adc	r22, r1
     b24:	23 1f       	adc	r18, r19
     b26:	84 9f       	mul	r24, r20
     b28:	60 0d       	add	r22, r0
     b2a:	21 1d       	adc	r18, r1
     b2c:	82 2f       	mov	r24, r18
     b2e:	76 2f       	mov	r23, r22
     b30:	6a 2f       	mov	r22, r26
     b32:	11 24       	eor	r1, r1
     b34:	9f 57       	subi	r25, 0x7F	; 127
     b36:	50 40       	sbci	r21, 0x00	; 0
     b38:	9a f0       	brmi	.+38     	; 0xb60 <__mulsf3_pse+0x88>
     b3a:	f1 f0       	breq	.+60     	; 0xb78 <__mulsf3_pse+0xa0>
     b3c:	88 23       	and	r24, r24
     b3e:	4a f0       	brmi	.+18     	; 0xb52 <__mulsf3_pse+0x7a>
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	bb 1f       	adc	r27, r27
     b46:	66 1f       	adc	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	88 1f       	adc	r24, r24
     b4c:	91 50       	subi	r25, 0x01	; 1
     b4e:	50 40       	sbci	r21, 0x00	; 0
     b50:	a9 f7       	brne	.-22     	; 0xb3c <__mulsf3_pse+0x64>
     b52:	9e 3f       	cpi	r25, 0xFE	; 254
     b54:	51 05       	cpc	r21, r1
     b56:	80 f0       	brcs	.+32     	; 0xb78 <__mulsf3_pse+0xa0>
     b58:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     b5c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     b60:	5f 3f       	cpi	r21, 0xFF	; 255
     b62:	e4 f3       	brlt	.-8      	; 0xb5c <__mulsf3_pse+0x84>
     b64:	98 3e       	cpi	r25, 0xE8	; 232
     b66:	d4 f3       	brlt	.-12     	; 0xb5c <__mulsf3_pse+0x84>
     b68:	86 95       	lsr	r24
     b6a:	77 95       	ror	r23
     b6c:	67 95       	ror	r22
     b6e:	b7 95       	ror	r27
     b70:	f7 95       	ror	r31
     b72:	e7 95       	ror	r30
     b74:	9f 5f       	subi	r25, 0xFF	; 255
     b76:	c1 f7       	brne	.-16     	; 0xb68 <__mulsf3_pse+0x90>
     b78:	fe 2b       	or	r31, r30
     b7a:	88 0f       	add	r24, r24
     b7c:	91 1d       	adc	r25, r1
     b7e:	96 95       	lsr	r25
     b80:	87 95       	ror	r24
     b82:	97 f9       	bld	r25, 7
     b84:	08 95       	ret

00000b86 <__udivmodsi4>:
     b86:	a1 e2       	ldi	r26, 0x21	; 33
     b88:	1a 2e       	mov	r1, r26
     b8a:	aa 1b       	sub	r26, r26
     b8c:	bb 1b       	sub	r27, r27
     b8e:	fd 01       	movw	r30, r26
     b90:	0d c0       	rjmp	.+26     	; 0xbac <__udivmodsi4_ep>

00000b92 <__udivmodsi4_loop>:
     b92:	aa 1f       	adc	r26, r26
     b94:	bb 1f       	adc	r27, r27
     b96:	ee 1f       	adc	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	a2 17       	cp	r26, r18
     b9c:	b3 07       	cpc	r27, r19
     b9e:	e4 07       	cpc	r30, r20
     ba0:	f5 07       	cpc	r31, r21
     ba2:	20 f0       	brcs	.+8      	; 0xbac <__udivmodsi4_ep>
     ba4:	a2 1b       	sub	r26, r18
     ba6:	b3 0b       	sbc	r27, r19
     ba8:	e4 0b       	sbc	r30, r20
     baa:	f5 0b       	sbc	r31, r21

00000bac <__udivmodsi4_ep>:
     bac:	66 1f       	adc	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	88 1f       	adc	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	1a 94       	dec	r1
     bb6:	69 f7       	brne	.-38     	; 0xb92 <__udivmodsi4_loop>
     bb8:	60 95       	com	r22
     bba:	70 95       	com	r23
     bbc:	80 95       	com	r24
     bbe:	90 95       	com	r25
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	bd 01       	movw	r22, r26
     bc6:	cf 01       	movw	r24, r30
     bc8:	08 95       	ret

00000bca <__umulhisi3>:
     bca:	a2 9f       	mul	r26, r18
     bcc:	b0 01       	movw	r22, r0
     bce:	b3 9f       	mul	r27, r19
     bd0:	c0 01       	movw	r24, r0
     bd2:	a3 9f       	mul	r26, r19
     bd4:	70 0d       	add	r23, r0
     bd6:	81 1d       	adc	r24, r1
     bd8:	11 24       	eor	r1, r1
     bda:	91 1d       	adc	r25, r1
     bdc:	b2 9f       	mul	r27, r18
     bde:	70 0d       	add	r23, r0
     be0:	81 1d       	adc	r24, r1
     be2:	11 24       	eor	r1, r1
     be4:	91 1d       	adc	r25, r1
     be6:	08 95       	ret

00000be8 <__muluhisi3>:
     be8:	0e 94 e5 05 	call	0xbca	; 0xbca <__umulhisi3>
     bec:	a5 9f       	mul	r26, r21
     bee:	90 0d       	add	r25, r0
     bf0:	b4 9f       	mul	r27, r20
     bf2:	90 0d       	add	r25, r0
     bf4:	a4 9f       	mul	r26, r20
     bf6:	80 0d       	add	r24, r0
     bf8:	91 1d       	adc	r25, r1
     bfa:	11 24       	eor	r1, r1
     bfc:	08 95       	ret

00000bfe <dtostrf>:
     bfe:	ef 92       	push	r14
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	e8 01       	movw	r28, r16
     c0a:	47 fd       	sbrc	r20, 7
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <dtostrf+0x14>
     c0e:	34 e0       	ldi	r19, 0x04	; 4
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <dtostrf+0x16>
     c12:	34 e1       	ldi	r19, 0x14	; 20
     c14:	04 2e       	mov	r0, r20
     c16:	00 0c       	add	r0, r0
     c18:	55 0b       	sbc	r21, r21
     c1a:	57 ff       	sbrs	r21, 7
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <dtostrf+0x26>
     c1e:	51 95       	neg	r21
     c20:	41 95       	neg	r20
     c22:	51 09       	sbc	r21, r1
     c24:	e3 2e       	mov	r14, r19
     c26:	02 2f       	mov	r16, r18
     c28:	24 2f       	mov	r18, r20
     c2a:	ae 01       	movw	r20, r28
     c2c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <dtoa_prf>
     c30:	ce 01       	movw	r24, r28
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ef 90       	pop	r14
     c3c:	08 95       	ret

00000c3e <dtoa_prf>:
     c3e:	a9 e0       	ldi	r26, 0x09	; 9
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__prologue_saves__+0xc>
     c4a:	6a 01       	movw	r12, r20
     c4c:	12 2f       	mov	r17, r18
     c4e:	b0 2e       	mov	r11, r16
     c50:	2b e3       	ldi	r18, 0x3B	; 59
     c52:	20 17       	cp	r18, r16
     c54:	20 f0       	brcs	.+8      	; 0xc5e <dtoa_prf+0x20>
     c56:	ff 24       	eor	r15, r15
     c58:	f3 94       	inc	r15
     c5a:	f0 0e       	add	r15, r16
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <dtoa_prf+0x24>
     c5e:	2c e3       	ldi	r18, 0x3C	; 60
     c60:	f2 2e       	mov	r15, r18
     c62:	0f 2d       	mov	r16, r15
     c64:	27 e0       	ldi	r18, 0x07	; 7
     c66:	ae 01       	movw	r20, r28
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	0e 94 79 07 	call	0xef2	; 0xef2 <__ftoa_engine>
     c70:	bc 01       	movw	r22, r24
     c72:	49 81       	ldd	r20, Y+1	; 0x01
     c74:	84 2f       	mov	r24, r20
     c76:	89 70       	andi	r24, 0x09	; 9
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	31 f0       	breq	.+12     	; 0xc88 <dtoa_prf+0x4a>
     c7c:	e1 fc       	sbrc	r14, 1
     c7e:	06 c0       	rjmp	.+12     	; 0xc8c <dtoa_prf+0x4e>
     c80:	e0 fe       	sbrs	r14, 0
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <dtoa_prf+0x52>
     c84:	90 e2       	ldi	r25, 0x20	; 32
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <dtoa_prf+0x54>
     c88:	9d e2       	ldi	r25, 0x2D	; 45
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <dtoa_prf+0x54>
     c8c:	9b e2       	ldi	r25, 0x2B	; 43
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <dtoa_prf+0x54>
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	5e 2d       	mov	r21, r14
     c94:	50 71       	andi	r21, 0x10	; 16
     c96:	43 ff       	sbrs	r20, 3
     c98:	3c c0       	rjmp	.+120    	; 0xd12 <dtoa_prf+0xd4>
     c9a:	91 11       	cpse	r25, r1
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <dtoa_prf+0x64>
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <dtoa_prf+0x66>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	81 17       	cp	r24, r17
     ca6:	18 f4       	brcc	.+6      	; 0xcae <dtoa_prf+0x70>
     ca8:	21 2f       	mov	r18, r17
     caa:	28 1b       	sub	r18, r24
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <dtoa_prf+0x72>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	51 11       	cpse	r21, r1
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <dtoa_prf+0x8c>
     cb4:	f6 01       	movw	r30, r12
     cb6:	82 2f       	mov	r24, r18
     cb8:	30 e2       	ldi	r19, 0x20	; 32
     cba:	88 23       	and	r24, r24
     cbc:	19 f0       	breq	.+6      	; 0xcc4 <dtoa_prf+0x86>
     cbe:	31 93       	st	Z+, r19
     cc0:	81 50       	subi	r24, 0x01	; 1
     cc2:	fb cf       	rjmp	.-10     	; 0xcba <dtoa_prf+0x7c>
     cc4:	c2 0e       	add	r12, r18
     cc6:	d1 1c       	adc	r13, r1
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	99 23       	and	r25, r25
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <dtoa_prf+0x9a>
     cce:	d6 01       	movw	r26, r12
     cd0:	9c 93       	st	X, r25
     cd2:	f6 01       	movw	r30, r12
     cd4:	31 96       	adiw	r30, 0x01	; 1
     cd6:	6f 01       	movw	r12, r30
     cd8:	c6 01       	movw	r24, r12
     cda:	03 96       	adiw	r24, 0x03	; 3
     cdc:	e2 fe       	sbrs	r14, 2
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <dtoa_prf+0xb6>
     ce0:	3e e4       	ldi	r19, 0x4E	; 78
     ce2:	d6 01       	movw	r26, r12
     ce4:	3c 93       	st	X, r19
     ce6:	41 e4       	ldi	r20, 0x41	; 65
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	4c 93       	st	X, r20
     cec:	11 97       	sbiw	r26, 0x01	; 1
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	3c 93       	st	X, r19
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <dtoa_prf+0xc2>
     cf4:	3e e6       	ldi	r19, 0x6E	; 110
     cf6:	f6 01       	movw	r30, r12
     cf8:	30 83       	st	Z, r19
     cfa:	41 e6       	ldi	r20, 0x61	; 97
     cfc:	41 83       	std	Z+1, r20	; 0x01
     cfe:	32 83       	std	Z+2, r19	; 0x02
     d00:	fc 01       	movw	r30, r24
     d02:	32 2f       	mov	r19, r18
     d04:	40 e2       	ldi	r20, 0x20	; 32
     d06:	33 23       	and	r19, r19
     d08:	09 f4       	brne	.+2      	; 0xd0c <dtoa_prf+0xce>
     d0a:	42 c0       	rjmp	.+132    	; 0xd90 <dtoa_prf+0x152>
     d0c:	41 93       	st	Z+, r20
     d0e:	31 50       	subi	r19, 0x01	; 1
     d10:	fa cf       	rjmp	.-12     	; 0xd06 <dtoa_prf+0xc8>
     d12:	42 ff       	sbrs	r20, 2
     d14:	44 c0       	rjmp	.+136    	; 0xd9e <dtoa_prf+0x160>
     d16:	91 11       	cpse	r25, r1
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <dtoa_prf+0xe0>
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <dtoa_prf+0xe2>
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	81 17       	cp	r24, r17
     d22:	18 f4       	brcc	.+6      	; 0xd2a <dtoa_prf+0xec>
     d24:	21 2f       	mov	r18, r17
     d26:	28 1b       	sub	r18, r24
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <dtoa_prf+0xee>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	51 11       	cpse	r21, r1
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <dtoa_prf+0x108>
     d30:	f6 01       	movw	r30, r12
     d32:	82 2f       	mov	r24, r18
     d34:	30 e2       	ldi	r19, 0x20	; 32
     d36:	88 23       	and	r24, r24
     d38:	19 f0       	breq	.+6      	; 0xd40 <dtoa_prf+0x102>
     d3a:	31 93       	st	Z+, r19
     d3c:	81 50       	subi	r24, 0x01	; 1
     d3e:	fb cf       	rjmp	.-10     	; 0xd36 <dtoa_prf+0xf8>
     d40:	c2 0e       	add	r12, r18
     d42:	d1 1c       	adc	r13, r1
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	99 23       	and	r25, r25
     d48:	29 f0       	breq	.+10     	; 0xd54 <dtoa_prf+0x116>
     d4a:	d6 01       	movw	r26, r12
     d4c:	9c 93       	st	X, r25
     d4e:	f6 01       	movw	r30, r12
     d50:	31 96       	adiw	r30, 0x01	; 1
     d52:	6f 01       	movw	r12, r30
     d54:	c6 01       	movw	r24, r12
     d56:	03 96       	adiw	r24, 0x03	; 3
     d58:	e2 fe       	sbrs	r14, 2
     d5a:	0b c0       	rjmp	.+22     	; 0xd72 <dtoa_prf+0x134>
     d5c:	39 e4       	ldi	r19, 0x49	; 73
     d5e:	d6 01       	movw	r26, r12
     d60:	3c 93       	st	X, r19
     d62:	3e e4       	ldi	r19, 0x4E	; 78
     d64:	11 96       	adiw	r26, 0x01	; 1
     d66:	3c 93       	st	X, r19
     d68:	11 97       	sbiw	r26, 0x01	; 1
     d6a:	36 e4       	ldi	r19, 0x46	; 70
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	3c 93       	st	X, r19
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <dtoa_prf+0x142>
     d72:	39 e6       	ldi	r19, 0x69	; 105
     d74:	f6 01       	movw	r30, r12
     d76:	30 83       	st	Z, r19
     d78:	3e e6       	ldi	r19, 0x6E	; 110
     d7a:	31 83       	std	Z+1, r19	; 0x01
     d7c:	36 e6       	ldi	r19, 0x66	; 102
     d7e:	32 83       	std	Z+2, r19	; 0x02
     d80:	fc 01       	movw	r30, r24
     d82:	32 2f       	mov	r19, r18
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	33 23       	and	r19, r19
     d88:	19 f0       	breq	.+6      	; 0xd90 <dtoa_prf+0x152>
     d8a:	41 93       	st	Z+, r20
     d8c:	31 50       	subi	r19, 0x01	; 1
     d8e:	fb cf       	rjmp	.-10     	; 0xd86 <dtoa_prf+0x148>
     d90:	fc 01       	movw	r30, r24
     d92:	e2 0f       	add	r30, r18
     d94:	f1 1d       	adc	r31, r1
     d96:	10 82       	st	Z, r1
     d98:	8e ef       	ldi	r24, 0xFE	; 254
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	a6 c0       	rjmp	.+332    	; 0xeea <dtoa_prf+0x2ac>
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	91 11       	cpse	r25, r1
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <dtoa_prf+0x16c>
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	16 16       	cp	r1, r22
     dac:	17 06       	cpc	r1, r23
     dae:	1c f4       	brge	.+6      	; 0xdb6 <dtoa_prf+0x178>
     db0:	fb 01       	movw	r30, r22
     db2:	31 96       	adiw	r30, 0x01	; 1
     db4:	02 c0       	rjmp	.+4      	; 0xdba <dtoa_prf+0x17c>
     db6:	e1 e0       	ldi	r30, 0x01	; 1
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	2e 0f       	add	r18, r30
     dbc:	3f 1f       	adc	r19, r31
     dbe:	bb 20       	and	r11, r11
     dc0:	21 f0       	breq	.+8      	; 0xdca <dtoa_prf+0x18c>
     dc2:	eb 2d       	mov	r30, r11
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	31 96       	adiw	r30, 0x01	; 1
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <dtoa_prf+0x190>
     dca:	e0 e0       	ldi	r30, 0x00	; 0
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	2e 0f       	add	r18, r30
     dd0:	3f 1f       	adc	r19, r31
     dd2:	e1 2f       	mov	r30, r17
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	2e 17       	cp	r18, r30
     dd8:	3f 07       	cpc	r19, r31
     dda:	1c f4       	brge	.+6      	; 0xde2 <dtoa_prf+0x1a4>
     ddc:	12 1b       	sub	r17, r18
     dde:	21 2f       	mov	r18, r17
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <dtoa_prf+0x1a6>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	8e 2d       	mov	r24, r14
     de6:	88 71       	andi	r24, 0x18	; 24
     de8:	59 f4       	brne	.+22     	; 0xe00 <dtoa_prf+0x1c2>
     dea:	f6 01       	movw	r30, r12
     dec:	82 2f       	mov	r24, r18
     dee:	30 e2       	ldi	r19, 0x20	; 32
     df0:	88 23       	and	r24, r24
     df2:	19 f0       	breq	.+6      	; 0xdfa <dtoa_prf+0x1bc>
     df4:	31 93       	st	Z+, r19
     df6:	81 50       	subi	r24, 0x01	; 1
     df8:	fb cf       	rjmp	.-10     	; 0xdf0 <dtoa_prf+0x1b2>
     dfa:	c2 0e       	add	r12, r18
     dfc:	d1 1c       	adc	r13, r1
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	99 23       	and	r25, r25
     e02:	29 f0       	breq	.+10     	; 0xe0e <dtoa_prf+0x1d0>
     e04:	d6 01       	movw	r26, r12
     e06:	9c 93       	st	X, r25
     e08:	f6 01       	movw	r30, r12
     e0a:	31 96       	adiw	r30, 0x01	; 1
     e0c:	6f 01       	movw	r12, r30
     e0e:	51 11       	cpse	r21, r1
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <dtoa_prf+0x1ea>
     e12:	f6 01       	movw	r30, r12
     e14:	82 2f       	mov	r24, r18
     e16:	90 e3       	ldi	r25, 0x30	; 48
     e18:	88 23       	and	r24, r24
     e1a:	19 f0       	breq	.+6      	; 0xe22 <dtoa_prf+0x1e4>
     e1c:	91 93       	st	Z+, r25
     e1e:	81 50       	subi	r24, 0x01	; 1
     e20:	fb cf       	rjmp	.-10     	; 0xe18 <dtoa_prf+0x1da>
     e22:	c2 0e       	add	r12, r18
     e24:	d1 1c       	adc	r13, r1
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	0f 2d       	mov	r16, r15
     e2a:	06 0f       	add	r16, r22
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	34 2f       	mov	r19, r20
     e30:	30 71       	andi	r19, 0x10	; 16
     e32:	44 ff       	sbrs	r20, 4
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <dtoa_prf+0x1fe>
     e36:	91 33       	cpi	r25, 0x31	; 49
     e38:	09 f4       	brne	.+2      	; 0xe3c <dtoa_prf+0x1fe>
     e3a:	01 50       	subi	r16, 0x01	; 1
     e3c:	10 16       	cp	r1, r16
     e3e:	24 f4       	brge	.+8      	; 0xe48 <dtoa_prf+0x20a>
     e40:	09 30       	cpi	r16, 0x09	; 9
     e42:	18 f0       	brcs	.+6      	; 0xe4a <dtoa_prf+0x20c>
     e44:	08 e0       	ldi	r16, 0x08	; 8
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <dtoa_prf+0x20c>
     e48:	01 e0       	ldi	r16, 0x01	; 1
     e4a:	ab 01       	movw	r20, r22
     e4c:	77 ff       	sbrs	r23, 7
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <dtoa_prf+0x216>
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	fb 01       	movw	r30, r22
     e56:	e4 1b       	sub	r30, r20
     e58:	f5 0b       	sbc	r31, r21
     e5a:	a1 e0       	ldi	r26, 0x01	; 1
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ac 0f       	add	r26, r28
     e60:	bd 1f       	adc	r27, r29
     e62:	ea 0f       	add	r30, r26
     e64:	fb 1f       	adc	r31, r27
     e66:	8e e2       	ldi	r24, 0x2E	; 46
     e68:	a8 2e       	mov	r10, r24
     e6a:	4b 01       	movw	r8, r22
     e6c:	80 1a       	sub	r8, r16
     e6e:	91 08       	sbc	r9, r1
     e70:	0b 2d       	mov	r16, r11
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	11 95       	neg	r17
     e76:	01 95       	neg	r16
     e78:	11 09       	sbc	r17, r1
     e7a:	4f 3f       	cpi	r20, 0xFF	; 255
     e7c:	bf ef       	ldi	r27, 0xFF	; 255
     e7e:	5b 07       	cpc	r21, r27
     e80:	21 f4       	brne	.+8      	; 0xe8a <dtoa_prf+0x24c>
     e82:	d6 01       	movw	r26, r12
     e84:	ac 92       	st	X, r10
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	6d 01       	movw	r12, r26
     e8a:	64 17       	cp	r22, r20
     e8c:	75 07       	cpc	r23, r21
     e8e:	2c f0       	brlt	.+10     	; 0xe9a <dtoa_prf+0x25c>
     e90:	84 16       	cp	r8, r20
     e92:	95 06       	cpc	r9, r21
     e94:	14 f4       	brge	.+4      	; 0xe9a <dtoa_prf+0x25c>
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <dtoa_prf+0x25e>
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	41 50       	subi	r20, 0x01	; 1
     e9e:	51 09       	sbc	r21, r1
     ea0:	31 96       	adiw	r30, 0x01	; 1
     ea2:	d6 01       	movw	r26, r12
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	7d 01       	movw	r14, r26
     ea8:	40 17       	cp	r20, r16
     eaa:	51 07       	cpc	r21, r17
     eac:	24 f0       	brlt	.+8      	; 0xeb6 <dtoa_prf+0x278>
     eae:	d6 01       	movw	r26, r12
     eb0:	8c 93       	st	X, r24
     eb2:	67 01       	movw	r12, r14
     eb4:	e2 cf       	rjmp	.-60     	; 0xe7a <dtoa_prf+0x23c>
     eb6:	64 17       	cp	r22, r20
     eb8:	75 07       	cpc	r23, r21
     eba:	39 f4       	brne	.+14     	; 0xeca <dtoa_prf+0x28c>
     ebc:	96 33       	cpi	r25, 0x36	; 54
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <dtoa_prf+0x28a>
     ec0:	95 33       	cpi	r25, 0x35	; 53
     ec2:	19 f4       	brne	.+6      	; 0xeca <dtoa_prf+0x28c>
     ec4:	31 11       	cpse	r19, r1
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <dtoa_prf+0x28c>
     ec8:	81 e3       	ldi	r24, 0x31	; 49
     eca:	f6 01       	movw	r30, r12
     ecc:	80 83       	st	Z, r24
     ece:	f7 01       	movw	r30, r14
     ed0:	82 2f       	mov	r24, r18
     ed2:	90 e2       	ldi	r25, 0x20	; 32
     ed4:	88 23       	and	r24, r24
     ed6:	19 f0       	breq	.+6      	; 0xede <dtoa_prf+0x2a0>
     ed8:	91 93       	st	Z+, r25
     eda:	81 50       	subi	r24, 0x01	; 1
     edc:	fb cf       	rjmp	.-10     	; 0xed4 <dtoa_prf+0x296>
     ede:	f7 01       	movw	r30, r14
     ee0:	e2 0f       	add	r30, r18
     ee2:	f1 1d       	adc	r31, r1
     ee4:	10 82       	st	Z, r1
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	29 96       	adiw	r28, 0x09	; 9
     eec:	ec e0       	ldi	r30, 0x0C	; 12
     eee:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__epilogue_restores__+0xc>

00000ef2 <__ftoa_engine>:
     ef2:	28 30       	cpi	r18, 0x08	; 8
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <__ftoa_engine+0x6>
     ef6:	27 e0       	ldi	r18, 0x07	; 7
     ef8:	33 27       	eor	r19, r19
     efa:	da 01       	movw	r26, r20
     efc:	99 0f       	add	r25, r25
     efe:	31 1d       	adc	r19, r1
     f00:	87 fd       	sbrc	r24, 7
     f02:	91 60       	ori	r25, 0x01	; 1
     f04:	00 96       	adiw	r24, 0x00	; 0
     f06:	61 05       	cpc	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	39 f4       	brne	.+14     	; 0xf1a <__ftoa_engine+0x28>
     f0c:	32 60       	ori	r19, 0x02	; 2
     f0e:	2e 5f       	subi	r18, 0xFE	; 254
     f10:	3d 93       	st	X+, r19
     f12:	30 e3       	ldi	r19, 0x30	; 48
     f14:	2a 95       	dec	r18
     f16:	e1 f7       	brne	.-8      	; 0xf10 <__ftoa_engine+0x1e>
     f18:	08 95       	ret
     f1a:	9f 3f       	cpi	r25, 0xFF	; 255
     f1c:	30 f0       	brcs	.+12     	; 0xf2a <__ftoa_engine+0x38>
     f1e:	80 38       	cpi	r24, 0x80	; 128
     f20:	71 05       	cpc	r23, r1
     f22:	61 05       	cpc	r22, r1
     f24:	09 f0       	breq	.+2      	; 0xf28 <__ftoa_engine+0x36>
     f26:	3c 5f       	subi	r19, 0xFC	; 252
     f28:	3c 5f       	subi	r19, 0xFC	; 252
     f2a:	3d 93       	st	X+, r19
     f2c:	91 30       	cpi	r25, 0x01	; 1
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <__ftoa_engine+0x40>
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	91 1d       	adc	r25, r1
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	1f 93       	push	r17
     f3a:	0f 93       	push	r16
     f3c:	ff 92       	push	r15
     f3e:	ef 92       	push	r14
     f40:	19 2f       	mov	r17, r25
     f42:	98 7f       	andi	r25, 0xF8	; 248
     f44:	96 95       	lsr	r25
     f46:	e9 2f       	mov	r30, r25
     f48:	96 95       	lsr	r25
     f4a:	96 95       	lsr	r25
     f4c:	e9 0f       	add	r30, r25
     f4e:	ff 27       	eor	r31, r31
     f50:	ee 53       	subi	r30, 0x3E	; 62
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	99 27       	eor	r25, r25
     f56:	33 27       	eor	r19, r19
     f58:	ee 24       	eor	r14, r14
     f5a:	ff 24       	eor	r15, r15
     f5c:	a7 01       	movw	r20, r14
     f5e:	e7 01       	movw	r28, r14
     f60:	05 90       	lpm	r0, Z+
     f62:	08 94       	sec
     f64:	07 94       	ror	r0
     f66:	28 f4       	brcc	.+10     	; 0xf72 <__ftoa_engine+0x80>
     f68:	36 0f       	add	r19, r22
     f6a:	e7 1e       	adc	r14, r23
     f6c:	f8 1e       	adc	r15, r24
     f6e:	49 1f       	adc	r20, r25
     f70:	51 1d       	adc	r21, r1
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	06 94       	lsr	r0
     f7c:	a1 f7       	brne	.-24     	; 0xf66 <__ftoa_engine+0x74>
     f7e:	05 90       	lpm	r0, Z+
     f80:	07 94       	ror	r0
     f82:	28 f4       	brcc	.+10     	; 0xf8e <__ftoa_engine+0x9c>
     f84:	e7 0e       	add	r14, r23
     f86:	f8 1e       	adc	r15, r24
     f88:	49 1f       	adc	r20, r25
     f8a:	56 1f       	adc	r21, r22
     f8c:	c1 1d       	adc	r28, r1
     f8e:	77 0f       	add	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	66 1f       	adc	r22, r22
     f96:	06 94       	lsr	r0
     f98:	a1 f7       	brne	.-24     	; 0xf82 <__ftoa_engine+0x90>
     f9a:	05 90       	lpm	r0, Z+
     f9c:	07 94       	ror	r0
     f9e:	28 f4       	brcc	.+10     	; 0xfaa <__ftoa_engine+0xb8>
     fa0:	f8 0e       	add	r15, r24
     fa2:	49 1f       	adc	r20, r25
     fa4:	56 1f       	adc	r21, r22
     fa6:	c7 1f       	adc	r28, r23
     fa8:	d1 1d       	adc	r29, r1
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	66 1f       	adc	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	06 94       	lsr	r0
     fb4:	a1 f7       	brne	.-24     	; 0xf9e <__ftoa_engine+0xac>
     fb6:	05 90       	lpm	r0, Z+
     fb8:	07 94       	ror	r0
     fba:	20 f4       	brcc	.+8      	; 0xfc4 <__ftoa_engine+0xd2>
     fbc:	49 0f       	add	r20, r25
     fbe:	56 1f       	adc	r21, r22
     fc0:	c7 1f       	adc	r28, r23
     fc2:	d8 1f       	adc	r29, r24
     fc4:	99 0f       	add	r25, r25
     fc6:	66 1f       	adc	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	06 94       	lsr	r0
     fce:	a9 f7       	brne	.-22     	; 0xfba <__ftoa_engine+0xc8>
     fd0:	84 91       	lpm	r24, Z
     fd2:	10 95       	com	r17
     fd4:	17 70       	andi	r17, 0x07	; 7
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <__ftoa_engine+0xf6>
     fd8:	d6 95       	lsr	r29
     fda:	c7 95       	ror	r28
     fdc:	57 95       	ror	r21
     fde:	47 95       	ror	r20
     fe0:	f7 94       	ror	r15
     fe2:	e7 94       	ror	r14
     fe4:	1a 95       	dec	r17
     fe6:	c1 f7       	brne	.-16     	; 0xfd8 <__ftoa_engine+0xe6>
     fe8:	e8 e6       	ldi	r30, 0x68	; 104
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	68 94       	set
     fee:	15 90       	lpm	r1, Z+
     ff0:	15 91       	lpm	r17, Z+
     ff2:	35 91       	lpm	r19, Z+
     ff4:	65 91       	lpm	r22, Z+
     ff6:	95 91       	lpm	r25, Z+
     ff8:	05 90       	lpm	r0, Z+
     ffa:	7f e2       	ldi	r23, 0x2F	; 47
     ffc:	73 95       	inc	r23
     ffe:	e1 18       	sub	r14, r1
    1000:	f1 0a       	sbc	r15, r17
    1002:	43 0b       	sbc	r20, r19
    1004:	56 0b       	sbc	r21, r22
    1006:	c9 0b       	sbc	r28, r25
    1008:	d0 09       	sbc	r29, r0
    100a:	c0 f7       	brcc	.-16     	; 0xffc <__ftoa_engine+0x10a>
    100c:	e1 0c       	add	r14, r1
    100e:	f1 1e       	adc	r15, r17
    1010:	43 1f       	adc	r20, r19
    1012:	56 1f       	adc	r21, r22
    1014:	c9 1f       	adc	r28, r25
    1016:	d0 1d       	adc	r29, r0
    1018:	7e f4       	brtc	.+30     	; 0x1038 <__ftoa_engine+0x146>
    101a:	70 33       	cpi	r23, 0x30	; 48
    101c:	11 f4       	brne	.+4      	; 0x1022 <__ftoa_engine+0x130>
    101e:	8a 95       	dec	r24
    1020:	e6 cf       	rjmp	.-52     	; 0xfee <__ftoa_engine+0xfc>
    1022:	e8 94       	clt
    1024:	01 50       	subi	r16, 0x01	; 1
    1026:	30 f0       	brcs	.+12     	; 0x1034 <__ftoa_engine+0x142>
    1028:	08 0f       	add	r16, r24
    102a:	0a f4       	brpl	.+2      	; 0x102e <__ftoa_engine+0x13c>
    102c:	00 27       	eor	r16, r16
    102e:	02 17       	cp	r16, r18
    1030:	08 f4       	brcc	.+2      	; 0x1034 <__ftoa_engine+0x142>
    1032:	20 2f       	mov	r18, r16
    1034:	23 95       	inc	r18
    1036:	02 2f       	mov	r16, r18
    1038:	7a 33       	cpi	r23, 0x3A	; 58
    103a:	28 f0       	brcs	.+10     	; 0x1046 <__ftoa_engine+0x154>
    103c:	79 e3       	ldi	r23, 0x39	; 57
    103e:	7d 93       	st	X+, r23
    1040:	2a 95       	dec	r18
    1042:	e9 f7       	brne	.-6      	; 0x103e <__ftoa_engine+0x14c>
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <__ftoa_engine+0x174>
    1046:	7d 93       	st	X+, r23
    1048:	2a 95       	dec	r18
    104a:	89 f6       	brne	.-94     	; 0xfee <__ftoa_engine+0xfc>
    104c:	06 94       	lsr	r0
    104e:	97 95       	ror	r25
    1050:	67 95       	ror	r22
    1052:	37 95       	ror	r19
    1054:	17 95       	ror	r17
    1056:	17 94       	ror	r1
    1058:	e1 18       	sub	r14, r1
    105a:	f1 0a       	sbc	r15, r17
    105c:	43 0b       	sbc	r20, r19
    105e:	56 0b       	sbc	r21, r22
    1060:	c9 0b       	sbc	r28, r25
    1062:	d0 09       	sbc	r29, r0
    1064:	98 f0       	brcs	.+38     	; 0x108c <__ftoa_engine+0x19a>
    1066:	23 95       	inc	r18
    1068:	7e 91       	ld	r23, -X
    106a:	73 95       	inc	r23
    106c:	7a 33       	cpi	r23, 0x3A	; 58
    106e:	08 f0       	brcs	.+2      	; 0x1072 <__ftoa_engine+0x180>
    1070:	70 e3       	ldi	r23, 0x30	; 48
    1072:	7c 93       	st	X, r23
    1074:	20 13       	cpse	r18, r16
    1076:	b8 f7       	brcc	.-18     	; 0x1066 <__ftoa_engine+0x174>
    1078:	7e 91       	ld	r23, -X
    107a:	70 61       	ori	r23, 0x10	; 16
    107c:	7d 93       	st	X+, r23
    107e:	30 f0       	brcs	.+12     	; 0x108c <__ftoa_engine+0x19a>
    1080:	83 95       	inc	r24
    1082:	71 e3       	ldi	r23, 0x31	; 49
    1084:	7d 93       	st	X+, r23
    1086:	70 e3       	ldi	r23, 0x30	; 48
    1088:	2a 95       	dec	r18
    108a:	e1 f7       	brne	.-8      	; 0x1084 <__ftoa_engine+0x192>
    108c:	11 24       	eor	r1, r1
    108e:	ef 90       	pop	r14
    1090:	ff 90       	pop	r15
    1092:	0f 91       	pop	r16
    1094:	1f 91       	pop	r17
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	99 27       	eor	r25, r25
    109c:	87 fd       	sbrc	r24, 7
    109e:	90 95       	com	r25
    10a0:	08 95       	ret

000010a2 <__prologue_saves__>:
    10a2:	2f 92       	push	r2
    10a4:	3f 92       	push	r3
    10a6:	4f 92       	push	r4
    10a8:	5f 92       	push	r5
    10aa:	6f 92       	push	r6
    10ac:	7f 92       	push	r7
    10ae:	8f 92       	push	r8
    10b0:	9f 92       	push	r9
    10b2:	af 92       	push	r10
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	ca 1b       	sub	r28, r26
    10cc:	db 0b       	sbc	r29, r27
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	09 94       	ijmp

000010da <__epilogue_restores__>:
    10da:	2a 88       	ldd	r2, Y+18	; 0x12
    10dc:	39 88       	ldd	r3, Y+17	; 0x11
    10de:	48 88       	ldd	r4, Y+16	; 0x10
    10e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    10ec:	b9 84       	ldd	r11, Y+9	; 0x09
    10ee:	c8 84       	ldd	r12, Y+8	; 0x08
    10f0:	df 80       	ldd	r13, Y+7	; 0x07
    10f2:	ee 80       	ldd	r14, Y+6	; 0x06
    10f4:	fd 80       	ldd	r15, Y+5	; 0x05
    10f6:	0c 81       	ldd	r16, Y+4	; 0x04
    10f8:	1b 81       	ldd	r17, Y+3	; 0x03
    10fa:	aa 81       	ldd	r26, Y+2	; 0x02
    10fc:	b9 81       	ldd	r27, Y+1	; 0x01
    10fe:	ce 0f       	add	r28, r30
    1100:	d1 1d       	adc	r29, r1
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	ed 01       	movw	r28, r26
    110e:	08 95       	ret

00001110 <_exit>:
    1110:	f8 94       	cli

00001112 <__stop_program>:
    1112:	ff cf       	rjmp	.-2      	; 0x1112 <__stop_program>
